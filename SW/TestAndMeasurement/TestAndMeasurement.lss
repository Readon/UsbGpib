
TestAndMeasurement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000023ca  0000245e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d5  0080011c  0080011c  0000247a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000247a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007c58  00000000  00000000  00002884  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f74  00000000  00000000  0000a4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004598  00000000  00000000  0000c450  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b80  00000000  00000000  000109e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002641  00000000  00000000  00011568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000514e  00000000  00000000  00013ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  00018cf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	89 c0       	rjmp	.+274    	; 0x114 <__ctors_end>
       2:	00 00       	nop
       4:	a4 c0       	rjmp	.+328    	; 0x14e <__bad_interrupt>
       6:	00 00       	nop
       8:	a2 c0       	rjmp	.+324    	; 0x14e <__bad_interrupt>
       a:	00 00       	nop
       c:	a0 c0       	rjmp	.+320    	; 0x14e <__bad_interrupt>
       e:	00 00       	nop
      10:	9e c0       	rjmp	.+316    	; 0x14e <__bad_interrupt>
      12:	00 00       	nop
      14:	9c c0       	rjmp	.+312    	; 0x14e <__bad_interrupt>
      16:	00 00       	nop
      18:	9a c0       	rjmp	.+308    	; 0x14e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	98 c0       	rjmp	.+304    	; 0x14e <__bad_interrupt>
      1e:	00 00       	nop
      20:	96 c0       	rjmp	.+300    	; 0x14e <__bad_interrupt>
      22:	00 00       	nop
      24:	94 c0       	rjmp	.+296    	; 0x14e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__vector_10>
      2c:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__vector_11>
      30:	8e c0       	rjmp	.+284    	; 0x14e <__bad_interrupt>
      32:	00 00       	nop
      34:	8c c0       	rjmp	.+280    	; 0x14e <__bad_interrupt>
      36:	00 00       	nop
      38:	8a c0       	rjmp	.+276    	; 0x14e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	88 c0       	rjmp	.+272    	; 0x14e <__bad_interrupt>
      3e:	00 00       	nop
      40:	86 c0       	rjmp	.+268    	; 0x14e <__bad_interrupt>
      42:	00 00       	nop
      44:	84 c0       	rjmp	.+264    	; 0x14e <__bad_interrupt>
      46:	00 00       	nop
      48:	82 c0       	rjmp	.+260    	; 0x14e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	80 c0       	rjmp	.+256    	; 0x14e <__bad_interrupt>
      4e:	00 00       	nop
      50:	7e c0       	rjmp	.+252    	; 0x14e <__bad_interrupt>
      52:	00 00       	nop
      54:	7c c0       	rjmp	.+248    	; 0x14e <__bad_interrupt>
      56:	00 00       	nop
      58:	7a c0       	rjmp	.+244    	; 0x14e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__vector_23>
      60:	76 c0       	rjmp	.+236    	; 0x14e <__bad_interrupt>
      62:	00 00       	nop
      64:	74 c0       	rjmp	.+232    	; 0x14e <__bad_interrupt>
      66:	00 00       	nop
      68:	72 c0       	rjmp	.+228    	; 0x14e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	70 c0       	rjmp	.+224    	; 0x14e <__bad_interrupt>
      6e:	00 00       	nop
      70:	6e c0       	rjmp	.+220    	; 0x14e <__bad_interrupt>
      72:	00 00       	nop
      74:	6c c0       	rjmp	.+216    	; 0x14e <__bad_interrupt>
      76:	00 00       	nop
      78:	6a c0       	rjmp	.+212    	; 0x14e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	68 c0       	rjmp	.+208    	; 0x14e <__bad_interrupt>
      7e:	00 00       	nop
      80:	66 c0       	rjmp	.+204    	; 0x14e <__bad_interrupt>
      82:	00 00       	nop
      84:	64 c0       	rjmp	.+200    	; 0x14e <__bad_interrupt>
      86:	00 00       	nop
      88:	62 c0       	rjmp	.+196    	; 0x14e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	60 c0       	rjmp	.+192    	; 0x14e <__bad_interrupt>
      8e:	00 00       	nop
      90:	5e c0       	rjmp	.+188    	; 0x14e <__bad_interrupt>
      92:	00 00       	nop
      94:	5c c0       	rjmp	.+184    	; 0x14e <__bad_interrupt>
      96:	00 00       	nop
      98:	5a c0       	rjmp	.+180    	; 0x14e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	58 c0       	rjmp	.+176    	; 0x14e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	56 c0       	rjmp	.+172    	; 0x14e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	54 c0       	rjmp	.+168    	; 0x14e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	52 c0       	rjmp	.+164    	; 0x14e <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	10 03 47 00 70 00 69 00 62 00 55 00 73 00 62 00     ..G.p.i.b.U.s.b.
      bc:	00 00                                               ..

000000be <ManufacturerString>:
      be:	16 03 58 00 79 00 70 00 68 00 72 00 6f 00 4c 00     ..X.y.p.h.r.o.L.
      ce:	61 00 62 00 73 00 00 00                             a.b.s...

000000d6 <LanguageString>:
      d6:	04 03 09 04                                         ....

000000da <ConfigurationDescriptor>:
      da:	09 02 27 00 01 01 00 c0 32 09 04 00 00 03 fe 03     ..'.....2.......
      ea:	01 00 07 05 03 02 40 00 05 07 05 82 02 40 00 05     ......@......@..
      fa:	07 05 81 03 02 00 05                                .......

00000101 <DeviceDescriptor>:
     101:	12 01 10 01 00 00 00 08 eb 03 65 20 01 00 01 02     ..........e ....
     111:	03 01 00                                            ...

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	da e0       	ldi	r29, 0x0A	; 10
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	ea ec       	ldi	r30, 0xCA	; 202
     128:	f3 e2       	ldi	r31, 0x23	; 35
     12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
     12c:	05 90       	lpm	r0, Z+
     12e:	0d 92       	st	X+, r0
     130:	ac 31       	cpi	r26, 0x1C	; 28
     132:	b1 07       	cpc	r27, r17
     134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
     136:	21 e0       	ldi	r18, 0x01	; 1
     138:	ac e1       	ldi	r26, 0x1C	; 28
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
     13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
     140:	a1 3f       	cpi	r26, 0xF1	; 241
     142:	b2 07       	cpc	r27, r18
     144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>
     146:	0e 94 00 09 	call	0x1200	; 0x1200 <main>
     14a:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <_exit>

0000014e <__bad_interrupt>:
     14e:	58 cf       	rjmp	.-336    	; 0x0 <__vectors>

00000150 <TMC_SetInternalSerial>:

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     150:	4f e5       	ldi	r20, 0x5F	; 95
     152:	50 e0       	ldi	r21, 0x00	; 0
     154:	af b7       	in	r26, 0x3f	; 63
     156:	f8 94       	cli
     158:	93 e0       	ldi	r25, 0x03	; 3
     15a:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <tmc_serial_string+0x1>
     15e:	88 23       	and	r24, r24
     160:	b1 f1       	breq	.+108    	; 0x1ce <TMC_SetInternalSerial+0x7e>
     162:	87 e4       	ldi	r24, 0x47	; 71
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <tmc_serial_string+0x3>
     16a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <tmc_serial_string+0x2>
     16e:	80 e5       	ldi	r24, 0x50	; 80
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <tmc_serial_string+0x5>
     176:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <tmc_serial_string+0x4>
     17a:	89 e4       	ldi	r24, 0x49	; 73
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <tmc_serial_string+0x7>
     182:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <tmc_serial_string+0x6>
     186:	82 e4       	ldi	r24, 0x42	; 66
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <tmc_serial_string+0x9>
     18e:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <tmc_serial_string+0x8>
     192:	50 93 89 01 	sts	0x0189, r21	; 0x800189 <tmc_serial_string+0xb>
     196:	40 93 88 01 	sts	0x0188, r20	; 0x800188 <tmc_serial_string+0xa>
     19a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     19e:	6a e0       	ldi	r22, 0x0A	; 10
     1a0:	0e 94 b8 11 	call	0x2370	; 0x2370 <__udivmodqi4>
     1a4:	28 2f       	mov	r18, r24
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	20 5d       	subi	r18, 0xD0	; 208
     1aa:	3f 4f       	sbci	r19, 0xFF	; 255
     1ac:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <tmc_serial_string+0xd>
     1b0:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <tmc_serial_string+0xc>
     1b4:	89 2f       	mov	r24, r25
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	c0 96       	adiw	r24, 0x30	; 48
     1ba:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <tmc_serial_string+0xf>
     1be:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <tmc_serial_string+0xe>
     1c2:	50 93 8f 01 	sts	0x018F, r21	; 0x80018f <tmc_serial_string+0x11>
     1c6:	40 93 8e 01 	sts	0x018E, r20	; 0x80018e <tmc_serial_string+0x10>
     1ca:	88 e0       	ldi	r24, 0x08	; 8
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <TMC_SetInternalSerial+0x80>
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	6e e0       	ldi	r22, 0x0E	; 14
     1d4:	71 e2       	ldi	r23, 0x21	; 33
     1d6:	28 2f       	mov	r18, r24
     1d8:	29 0f       	add	r18, r25
     1da:	e6 2f       	mov	r30, r22
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	70 93 57 00 	sts	0x0057, r23	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
     1e2:	e4 91       	lpm	r30, Z
     1e4:	90 ff       	sbrs	r25, 0
     1e6:	03 c0       	rjmp	.+6      	; 0x1ee <TMC_SetInternalSerial+0x9e>
     1e8:	e2 95       	swap	r30
     1ea:	ef 70       	andi	r30, 0x0F	; 15
     1ec:	6f 5f       	subi	r22, 0xFF	; 255
     1ee:	ef 70       	andi	r30, 0x0F	; 15
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	4e 2f       	mov	r20, r30
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	ea 30       	cpi	r30, 0x0A	; 10
     1f8:	18 f0       	brcs	.+6      	; 0x200 <TMC_SetInternalSerial+0xb0>
     1fa:	49 5c       	subi	r20, 0xC9	; 201
     1fc:	5f 4f       	sbci	r21, 0xFF	; 255
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <TMC_SetInternalSerial+0xb4>
     200:	40 5d       	subi	r20, 0xD0	; 208
     202:	5f 4f       	sbci	r21, 0xFF	; 255
     204:	f9 01       	movw	r30, r18
     206:	ee 0f       	add	r30, r30
     208:	ff 1f       	adc	r31, r31
     20a:	e0 58       	subi	r30, 0x80	; 128
     20c:	fe 4f       	sbci	r31, 0xFE	; 254
     20e:	51 83       	std	Z+1, r21	; 0x01
     210:	40 83       	st	Z, r20
     212:	9f 5f       	subi	r25, 0xFF	; 255
     214:	94 31       	cpi	r25, 0x14	; 20
     216:	f9 f6       	brne	.-66     	; 0x1d6 <TMC_SetInternalSerial+0x86>
     218:	8b 5e       	subi	r24, 0xEB	; 235
     21a:	88 0f       	add	r24, r24
     21c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <tmc_serial_string>
     220:	af bf       	out	0x3f, r26	; 63
     222:	08 95       	ret

00000224 <charToval>:
     224:	98 2f       	mov	r25, r24
     226:	80 ed       	ldi	r24, 0xD0	; 208
     228:	89 0f       	add	r24, r25
     22a:	8a 30       	cpi	r24, 0x0A	; 10
     22c:	08 f0       	brcs	.+2      	; 0x230 <charToval+0xc>
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	2f e9       	ldi	r18, 0x9F	; 159
     232:	29 0f       	add	r18, r25
     234:	26 30       	cpi	r18, 0x06	; 6
     236:	10 f4       	brcc	.+4      	; 0x23c <charToval+0x18>
     238:	89 ea       	ldi	r24, 0xA9	; 169
     23a:	89 0f       	add	r24, r25
     23c:	2f eb       	ldi	r18, 0xBF	; 191
     23e:	29 0f       	add	r18, r25
     240:	26 30       	cpi	r18, 0x06	; 6
     242:	10 f4       	brcc	.+4      	; 0x248 <charToval+0x24>
     244:	89 ec       	ldi	r24, 0xC9	; 201
     246:	89 0f       	add	r24, r25
     248:	08 95       	ret

0000024a <is_timedout>:
     24a:	85 e3       	ldi	r24, 0x35	; 53
     24c:	8a 95       	dec	r24
     24e:	f1 f7       	brne	.-4      	; 0x24c <is_timedout+0x2>
     250:	00 00       	nop
     252:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <timeout_val>
     256:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <timeout_val+0x1>
     25a:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <timeout_val+0x2>
     25e:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <timeout_val+0x3>
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	a1 05       	cpc	r26, r1
     266:	b1 05       	cpc	r27, r1
     268:	69 f0       	breq	.+26     	; 0x284 <is_timedout+0x3a>
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	a1 09       	sbc	r26, r1
     26e:	b1 09       	sbc	r27, r1
     270:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <timeout_val>
     274:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <timeout_val+0x1>
     278:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <timeout_val+0x2>
     27c:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <timeout_val+0x3>
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	08 95       	ret
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	08 95       	ret

00000288 <tmc_gpib_write_timedout>:
     288:	0e 94 9e 11 	call	0x233c	; 0x233c <USB_USBTask>
     28c:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <IsTMCBulkOUTReset>
     290:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <IsTMCBulkINReset>
     294:	89 2b       	or	r24, r25
     296:	08 95       	ret

00000298 <tmc_gpib_read_timedout>:
     298:	0e 94 9e 11 	call	0x233c	; 0x233c <USB_USBTask>
     29c:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <IsTMCBulkINReset>
     2a0:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <IsTMCBulkOUTReset>
     2a4:	89 2b       	or	r24, r25
     2a6:	08 95       	ret

000002a8 <Jump_To_Bootloader>:
     2a8:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <USB_Disable>
     2ac:	f8 94       	cli
     2ae:	2f ef       	ldi	r18, 0xFF	; 255
     2b0:	87 ea       	ldi	r24, 0xA7	; 167
     2b2:	91 e6       	ldi	r25, 0x61	; 97
     2b4:	21 50       	subi	r18, 0x01	; 1
     2b6:	80 40       	sbci	r24, 0x00	; 0
     2b8:	90 40       	sbci	r25, 0x00	; 0
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <Jump_To_Bootloader+0xc>
     2bc:	00 c0       	rjmp	.+0      	; 0x2be <Jump_To_Bootloader+0x16>
     2be:	00 00       	nop
     2c0:	9c e0       	ldi	r25, 0x0C	; 12
     2c2:	88 e1       	ldi	r24, 0x18	; 24
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	f8 94       	cli
     2c8:	a8 95       	wdr
     2ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2d4:	ef ef       	ldi	r30, 0xFF	; 255
     2d6:	f9 e6       	ldi	r31, 0x69	; 105
     2d8:	28 e1       	ldi	r18, 0x18	; 24
     2da:	e1 50       	subi	r30, 0x01	; 1
     2dc:	f0 40       	sbci	r31, 0x00	; 0
     2de:	20 40       	sbci	r18, 0x00	; 0
     2e0:	e1 f7       	brne	.-8      	; 0x2da <Jump_To_Bootloader+0x32>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <Jump_To_Bootloader+0x3c>
     2e4:	00 00       	nop
     2e6:	e0 e0       	ldi	r30, 0x00	; 0
     2e8:	f0 e7       	ldi	r31, 0x70	; 112
     2ea:	09 95       	icall
     2ec:	ff cf       	rjmp	.-2      	; 0x2ec <Jump_To_Bootloader+0x44>

000002ee <findGpibdevice>:
	bool devicepresent;
	
	//gpib_interface_clear();
	
	devicepresent = false;
	addr = gpib_search();
     2ee:	0e 94 2d 0c 	call	0x185a	; 0x185a <gpib_search>
	devicepresent = (addr < 255);
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	8f 3f       	cpi	r24, 0xFF	; 255
     2f6:	11 f4       	brne	.+4      	; 0x2fc <findGpibdevice+0xe>
     2f8:	90 e0       	ldi	r25, 0x00	; 0
	if (addr >= 255)	/* fallback to GPIB address 1, if no device was found */
		addr = 1;
     2fa:	81 e0       	ldi	r24, 0x01	; 1
	gpib_addr = addr; /* set global GPIB address to found address*/
     2fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <gpib_addr>
	
	return devicepresent;
}
     300:	89 2f       	mov	r24, r25
     302:	08 95       	ret

00000304 <identifyGpibDevice>:

/* returns TRUE, if a string was received over GPIB */
bool identifyGpibDevice(void)
{
     304:	ff 92       	push	r15
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	00 d0       	rcall	.+0      	; 0x310 <identifyGpibDevice+0xc>
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
	
	gotStringViaGPIB = true;
	
	hascomma = false; /* does the response contain a , character? */

	tmc_serial_string.Header.Size = 0;
     314:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <tmc_serial_string>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     318:	80 ea       	ldi	r24, 0xA0	; 160
     31a:	96 e8       	ldi	r25, 0x86	; 134
     31c:	a1 e0       	ldi	r26, 0x01	; 1
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <timeout_val>
     324:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <timeout_val+0x1>
     328:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <timeout_val+0x2>
     32c:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <timeout_val+0x3>
	hascomma = false; /* does the response contain a , character? */

	tmc_serial_string.Header.Size = 0;

	timeout_start(100000); /* 1s timeout*/
	gpib_make_listener(gpib_addr, is_timedout);
     330:	65 e2       	ldi	r22, 0x25	; 37
     332:	71 e0       	ldi	r23, 0x01	; 1
     334:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     338:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <gpib_make_listener>
	if (timeout_val != 0) gpib_writedat('*', false, is_timedout);
     33c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <timeout_val>
     340:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <timeout_val+0x1>
     344:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <timeout_val+0x2>
     348:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <timeout_val+0x3>
     34c:	89 2b       	or	r24, r25
     34e:	8a 2b       	or	r24, r26
     350:	8b 2b       	or	r24, r27
     352:	31 f0       	breq	.+12     	; 0x360 <identifyGpibDevice+0x5c>
     354:	45 e2       	ldi	r20, 0x25	; 37
     356:	51 e0       	ldi	r21, 0x01	; 1
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	8a e2       	ldi	r24, 0x2A	; 42
     35c:	0e 94 1d 0c 	call	0x183a	; 0x183a <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('I', false, is_timedout);
     360:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <timeout_val>
     364:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <timeout_val+0x1>
     368:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <timeout_val+0x2>
     36c:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <timeout_val+0x3>
     370:	89 2b       	or	r24, r25
     372:	8a 2b       	or	r24, r26
     374:	8b 2b       	or	r24, r27
     376:	31 f0       	breq	.+12     	; 0x384 <identifyGpibDevice+0x80>
     378:	45 e2       	ldi	r20, 0x25	; 37
     37a:	51 e0       	ldi	r21, 0x01	; 1
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	89 e4       	ldi	r24, 0x49	; 73
     380:	0e 94 1d 0c 	call	0x183a	; 0x183a <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('D', false, is_timedout);
     384:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <timeout_val>
     388:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <timeout_val+0x1>
     38c:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <timeout_val+0x2>
     390:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <timeout_val+0x3>
     394:	89 2b       	or	r24, r25
     396:	8a 2b       	or	r24, r26
     398:	8b 2b       	or	r24, r27
     39a:	31 f0       	breq	.+12     	; 0x3a8 <identifyGpibDevice+0xa4>
     39c:	45 e2       	ldi	r20, 0x25	; 37
     39e:	51 e0       	ldi	r21, 0x01	; 1
     3a0:	60 e0       	ldi	r22, 0x00	; 0
     3a2:	84 e4       	ldi	r24, 0x44	; 68
     3a4:	0e 94 1d 0c 	call	0x183a	; 0x183a <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('N', false, is_timedout);
     3a8:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <timeout_val>
     3ac:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <timeout_val+0x1>
     3b0:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <timeout_val+0x2>
     3b4:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <timeout_val+0x3>
     3b8:	89 2b       	or	r24, r25
     3ba:	8a 2b       	or	r24, r26
     3bc:	8b 2b       	or	r24, r27
     3be:	31 f0       	breq	.+12     	; 0x3cc <identifyGpibDevice+0xc8>
     3c0:	45 e2       	ldi	r20, 0x25	; 37
     3c2:	51 e0       	ldi	r21, 0x01	; 1
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	8e e4       	ldi	r24, 0x4E	; 78
     3c8:	0e 94 1d 0c 	call	0x183a	; 0x183a <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('?', false, is_timedout);
     3cc:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <timeout_val>
     3d0:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <timeout_val+0x1>
     3d4:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <timeout_val+0x2>
     3d8:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <timeout_val+0x3>
     3dc:	89 2b       	or	r24, r25
     3de:	8a 2b       	or	r24, r26
     3e0:	8b 2b       	or	r24, r27
     3e2:	31 f0       	breq	.+12     	; 0x3f0 <identifyGpibDevice+0xec>
     3e4:	45 e2       	ldi	r20, 0x25	; 37
     3e6:	51 e0       	ldi	r21, 0x01	; 1
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	8f e3       	ldi	r24, 0x3F	; 63
     3ec:	0e 94 1d 0c 	call	0x183a	; 0x183a <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('\n', true, is_timedout);
     3f0:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <timeout_val>
     3f4:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <timeout_val+0x1>
     3f8:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <timeout_val+0x2>
     3fc:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <timeout_val+0x3>
     400:	89 2b       	or	r24, r25
     402:	8a 2b       	or	r24, r26
     404:	8b 2b       	or	r24, r27
     406:	31 f0       	breq	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     408:	45 e2       	ldi	r20, 0x25	; 37
     40a:	51 e0       	ldi	r21, 0x01	; 1
     40c:	61 e0       	ldi	r22, 0x01	; 1
     40e:	8a e0       	ldi	r24, 0x0A	; 10
     410:	0e 94 1d 0c 	call	0x183a	; 0x183a <gpib_writedat>
	gpib_untalk_unlisten(is_timedout);
     414:	85 e2       	ldi	r24, 0x25	; 37
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	0e 94 cd 0b 	call	0x179a	; 0x179a <gpib_untalk_unlisten>
	
	if (timeout_val != 0) 
     41c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <timeout_val>
     420:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <timeout_val+0x1>
     424:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <timeout_val+0x2>
     428:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <timeout_val+0x3>
     42c:	89 2b       	or	r24, r25
     42e:	8a 2b       	or	r24, r26
     430:	8b 2b       	or	r24, r27
     432:	09 f4       	brne	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     434:	75 c1       	rjmp	.+746    	; 0x720 <__LOCK_REGION_LENGTH__+0x320>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     436:	80 ea       	ldi	r24, 0xA0	; 160
     438:	96 e8       	ldi	r25, 0x86	; 134
     43a:	a1 e0       	ldi	r26, 0x01	; 1
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <timeout_val>
     442:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <timeout_val+0x1>
     446:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <timeout_val+0x2>
     44a:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <timeout_val+0x3>
	gpib_untalk_unlisten(is_timedout);
	
	if (timeout_val != 0) 
	{
		timeout_start(100000); /* 1s timeout*/
		gpib_make_talker(gpib_addr, is_timedout);
     44e:	65 e2       	ldi	r22, 0x25	; 37
     450:	71 e0       	ldi	r23, 0x01	; 1
     452:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     456:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <gpib_make_talker>
	bool    eoi, timedout;
	bool    gotStringViaGPIB;
	
	gotStringViaGPIB = true;
	
	hascomma = false; /* does the response contain a , character? */
     45a:	f1 2c       	mov	r15, r1
	
	if (timeout_val != 0) 
	{
		timeout_start(100000); /* 1s timeout*/
		gpib_make_talker(gpib_addr, is_timedout);
		len = 0;
     45c:	10 e0       	ldi	r17, 0x00	; 0
		do
		{
			c = gpib_readdat(&eoi, &timedout, is_timedout);
     45e:	45 e2       	ldi	r20, 0x25	; 37
     460:	51 e0       	ldi	r21, 0x01	; 1
     462:	be 01       	movw	r22, r28
     464:	6f 5f       	subi	r22, 0xFF	; 255
     466:	7f 4f       	sbci	r23, 0xFF	; 255
     468:	ce 01       	movw	r24, r28
     46a:	02 96       	adiw	r24, 0x02	; 2
     46c:	0e 94 42 0b 	call	0x1684	; 0x1684 <gpib_readdat>
			hascomma = hascomma || (c == ',');
     470:	01 e0       	ldi	r16, 0x01	; 1
     472:	f1 10       	cpse	r15, r1
     474:	03 c0       	rjmp	.+6      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     476:	8c 32       	cpi	r24, 0x2C	; 44
     478:	09 f0       	breq	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47a:	00 e0       	ldi	r16, 0x00	; 0
     47c:	f0 2e       	mov	r15, r16
			if ( (c=='\"') || (c=='*') || (c=='/') || (c=='\\') || (c==':') || (c=='?') || (c==' ') || (c==',') || (c=='&') ) /* YEP, a comma and amphersand is allowed in USBTMC spec, but R&S SW does not like this... */
     47e:	98 2f       	mov	r25, r24
     480:	9f 7e       	andi	r25, 0xEF	; 239
     482:	9a 32       	cpi	r25, 0x2A	; 42
     484:	61 f0       	breq	.+24     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     486:	9f 32       	cpi	r25, 0x2F	; 47
     488:	51 f0       	breq	.+20     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     48a:	8c 35       	cpi	r24, 0x5C	; 92
     48c:	41 f0       	breq	.+16     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     48e:	98 2f       	mov	r25, r24
     490:	9d 7f       	andi	r25, 0xFD	; 253
     492:	90 32       	cpi	r25, 0x20	; 32
     494:	21 f0       	breq	.+8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     496:	8c 32       	cpi	r24, 0x2C	; 44
     498:	11 f0       	breq	.+4      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     49a:	86 32       	cpi	r24, 0x26	; 38
     49c:	09 f4       	brne	.+2      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
				c='_';
     49e:	8f e5       	ldi	r24, 0x5F	; 95
			if ( (c >=32) && (c <=126))
     4a0:	90 ee       	ldi	r25, 0xE0	; 224
     4a2:	98 0f       	add	r25, r24
     4a4:	9f 35       	cpi	r25, 0x5F	; 95
     4a6:	50 f4       	brcc	.+20     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
				tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
     4a8:	e1 2f       	mov	r30, r17
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	ee 0f       	add	r30, r30
     4ae:	ff 1f       	adc	r31, r31
     4b0:	e0 58       	subi	r30, 0x80	; 128
     4b2:	fe 4f       	sbci	r31, 0xFE	; 254
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	91 83       	std	Z+1, r25	; 0x01
     4b8:	80 83       	st	Z, r24
     4ba:	1f 5f       	subi	r17, 0xFF	; 255
		}
		while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi));
     4bc:	12 33       	cpi	r17, 0x32	; 50
     4be:	50 f4       	brcc	.+20     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	81 11       	cpse	r24, r1
     4c4:	07 c0       	rjmp	.+14     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4c6:	8a 81       	ldd	r24, Y+2	; 0x02
     4c8:	88 23       	and	r24, r24
     4ca:	49 f2       	breq	.-110    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
		/* strip away spaces at end */
		while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     4ce:	12 30       	cpi	r17, 0x02	; 2
     4d0:	60 f0       	brcs	.+24     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
			len--;
     4d2:	11 50       	subi	r17, 0x01	; 1
			if ( (c >=32) && (c <=126))
				tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
		}
		while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi));
		/* strip away spaces at end */
		while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     4d4:	e1 2f       	mov	r30, r17
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	ee 0f       	add	r30, r30
     4da:	ff 1f       	adc	r31, r31
     4dc:	e2 58       	subi	r30, 0x82	; 130
     4de:	fe 4f       	sbci	r31, 0xFE	; 254
     4e0:	80 81       	ld	r24, Z
     4e2:	91 81       	ldd	r25, Z+1	; 0x01
     4e4:	8f 35       	cpi	r24, 0x5F	; 95
     4e6:	91 05       	cpc	r25, r1
     4e8:	91 f3       	breq	.-28     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
			len--;
		tmc_serial_string.Header.Size = len*2 + sizeof(USB_Descriptor_Header_t);
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	81 0f       	add	r24, r17
     4ee:	88 0f       	add	r24, r24
     4f0:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <tmc_serial_string>
		
		gpib_untalk_unlisten(is_timedout);
     4f4:	85 e2       	ldi	r24, 0x25	; 37
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 cd 0b 	call	0x179a	; 0x179a <gpib_untalk_unlisten>
		
		if ( (timeout_val == 0) || (len==0) ) /* no response to *IDN? string*/
     4fc:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <timeout_val>
     500:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <timeout_val+0x1>
     504:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <timeout_val+0x2>
     508:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <timeout_val+0x3>
     50c:	89 2b       	or	r24, r25
     50e:	8a 2b       	or	r24, r26
     510:	8b 2b       	or	r24, r27
     512:	11 f0       	breq	.+4      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     514:	11 11       	cpse	r17, r1
     516:	08 c1       	rjmp	.+528    	; 0x728 <__LOCK_REGION_LENGTH__+0x328>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     518:	80 ea       	ldi	r24, 0xA0	; 160
     51a:	96 e8       	ldi	r25, 0x86	; 134
     51c:	a1 e0       	ldi	r26, 0x01	; 1
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <timeout_val>
     524:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <timeout_val+0x1>
     528:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <timeout_val+0x2>
     52c:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <timeout_val+0x3>
		gpib_untalk_unlisten(is_timedout);
		
		if ( (timeout_val == 0) || (len==0) ) /* no response to *IDN? string*/
		{ /* so try out ID? query */
			timeout_start(100000); /* 1s timeout*/
			gpib_make_listener(gpib_addr, is_timedout);
     530:	65 e2       	ldi	r22, 0x25	; 37
     532:	71 e0       	ldi	r23, 0x01	; 1
     534:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     538:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <gpib_make_listener>
			if (timeout_val != 0) gpib_writedat('I', false, is_timedout);
     53c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <timeout_val>
     540:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <timeout_val+0x1>
     544:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <timeout_val+0x2>
     548:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <timeout_val+0x3>
     54c:	89 2b       	or	r24, r25
     54e:	8a 2b       	or	r24, r26
     550:	8b 2b       	or	r24, r27
     552:	31 f0       	breq	.+12     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
     554:	45 e2       	ldi	r20, 0x25	; 37
     556:	51 e0       	ldi	r21, 0x01	; 1
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	89 e4       	ldi	r24, 0x49	; 73
     55c:	0e 94 1d 0c 	call	0x183a	; 0x183a <gpib_writedat>
			if (timeout_val != 0) gpib_writedat('D', false, is_timedout);
     560:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <timeout_val>
     564:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <timeout_val+0x1>
     568:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <timeout_val+0x2>
     56c:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <timeout_val+0x3>
     570:	89 2b       	or	r24, r25
     572:	8a 2b       	or	r24, r26
     574:	8b 2b       	or	r24, r27
     576:	31 f0       	breq	.+12     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     578:	45 e2       	ldi	r20, 0x25	; 37
     57a:	51 e0       	ldi	r21, 0x01	; 1
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	84 e4       	ldi	r24, 0x44	; 68
     580:	0e 94 1d 0c 	call	0x183a	; 0x183a <gpib_writedat>
			if (timeout_val != 0) gpib_writedat('?', false, is_timedout);
     584:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <timeout_val>
     588:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <timeout_val+0x1>
     58c:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <timeout_val+0x2>
     590:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <timeout_val+0x3>
     594:	89 2b       	or	r24, r25
     596:	8a 2b       	or	r24, r26
     598:	8b 2b       	or	r24, r27
     59a:	31 f0       	breq	.+12     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     59c:	45 e2       	ldi	r20, 0x25	; 37
     59e:	51 e0       	ldi	r21, 0x01	; 1
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	8f e3       	ldi	r24, 0x3F	; 63
     5a4:	0e 94 1d 0c 	call	0x183a	; 0x183a <gpib_writedat>
			if (timeout_val != 0) gpib_writedat('\n', true, is_timedout);
     5a8:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <timeout_val>
     5ac:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <timeout_val+0x1>
     5b0:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <timeout_val+0x2>
     5b4:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <timeout_val+0x3>
     5b8:	89 2b       	or	r24, r25
     5ba:	8a 2b       	or	r24, r26
     5bc:	8b 2b       	or	r24, r27
     5be:	31 f0       	breq	.+12     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     5c0:	45 e2       	ldi	r20, 0x25	; 37
     5c2:	51 e0       	ldi	r21, 0x01	; 1
     5c4:	61 e0       	ldi	r22, 0x01	; 1
     5c6:	8a e0       	ldi	r24, 0x0A	; 10
     5c8:	0e 94 1d 0c 	call	0x183a	; 0x183a <gpib_writedat>
			gpib_untalk_unlisten(is_timedout);
     5cc:	85 e2       	ldi	r24, 0x25	; 37
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	0e 94 cd 0b 	call	0x179a	; 0x179a <gpib_untalk_unlisten>
			if (timeout_val != 0) 
     5d4:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <timeout_val>
     5d8:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <timeout_val+0x1>
     5dc:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <timeout_val+0x2>
     5e0:	b0 91 7c 01 	lds	r27, 0x017C	; 0x80017c <timeout_val+0x3>
     5e4:	89 2b       	or	r24, r25
     5e6:	8a 2b       	or	r24, r26
     5e8:	8b 2b       	or	r24, r27
     5ea:	09 f4       	brne	.+2      	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
     5ec:	97 c0       	rjmp	.+302    	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     5ee:	80 ea       	ldi	r24, 0xA0	; 160
     5f0:	96 e8       	ldi	r25, 0x86	; 134
     5f2:	a1 e0       	ldi	r26, 0x01	; 1
     5f4:	b0 e0       	ldi	r27, 0x00	; 0
     5f6:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <timeout_val>
     5fa:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <timeout_val+0x1>
     5fe:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <timeout_val+0x2>
     602:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <timeout_val+0x3>
			if (timeout_val != 0) gpib_writedat('\n', true, is_timedout);
			gpib_untalk_unlisten(is_timedout);
			if (timeout_val != 0) 
			{
				timeout_start(100000); /* 1s timeout*/
				gpib_make_talker(gpib_addr, is_timedout);
     606:	65 e2       	ldi	r22, 0x25	; 37
     608:	71 e0       	ldi	r23, 0x01	; 1
     60a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     60e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <gpib_make_talker>
				len = 0;
     612:	10 e0       	ldi	r17, 0x00	; 0
				do
				{
					c = gpib_readdat(&eoi, &timedout, is_timedout);
     614:	45 e2       	ldi	r20, 0x25	; 37
     616:	51 e0       	ldi	r21, 0x01	; 1
     618:	be 01       	movw	r22, r28
     61a:	6f 5f       	subi	r22, 0xFF	; 255
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	ce 01       	movw	r24, r28
     620:	02 96       	adiw	r24, 0x02	; 2
     622:	0e 94 42 0b 	call	0x1684	; 0x1684 <gpib_readdat>
					hascomma = hascomma || (c == ',');
     626:	01 e0       	ldi	r16, 0x01	; 1
     628:	f1 10       	cpse	r15, r1
     62a:	03 c0       	rjmp	.+6      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
     62c:	8c 32       	cpi	r24, 0x2C	; 44
     62e:	09 f0       	breq	.+2      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
     630:	00 e0       	ldi	r16, 0x00	; 0
     632:	f0 2e       	mov	r15, r16
					if ( (c=='\"') || (c=='*') || (c=='/') || (c=='\\') || (c==':') || (c=='?') || (c==' ') || (c==',') || (c=='&'))
     634:	98 2f       	mov	r25, r24
     636:	9f 7e       	andi	r25, 0xEF	; 239
     638:	9a 32       	cpi	r25, 0x2A	; 42
     63a:	61 f0       	breq	.+24     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     63c:	9f 32       	cpi	r25, 0x2F	; 47
     63e:	51 f0       	breq	.+20     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     640:	8c 35       	cpi	r24, 0x5C	; 92
     642:	41 f0       	breq	.+16     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     644:	98 2f       	mov	r25, r24
     646:	9d 7f       	andi	r25, 0xFD	; 253
     648:	90 32       	cpi	r25, 0x20	; 32
     64a:	21 f0       	breq	.+8      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     64c:	8c 32       	cpi	r24, 0x2C	; 44
     64e:	11 f0       	breq	.+4      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     650:	86 32       	cpi	r24, 0x26	; 38
     652:	09 f4       	brne	.+2      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
						c='_';
     654:	8f e5       	ldi	r24, 0x5F	; 95
					if ( (c >=32) && (c <=126) )
     656:	90 ee       	ldi	r25, 0xE0	; 224
     658:	98 0f       	add	r25, r24
     65a:	9f 35       	cpi	r25, 0x5F	; 95
     65c:	58 f4       	brcc	.+22     	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
						tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
     65e:	e1 2f       	mov	r30, r17
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	e0 58       	subi	r30, 0x80	; 128
     668:	fe 4f       	sbci	r31, 0xFE	; 254
     66a:	28 2f       	mov	r18, r24
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	31 83       	std	Z+1, r19	; 0x01
     670:	20 83       	st	Z, r18
     672:	1f 5f       	subi	r17, 0xFF	; 255
				}
				while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi) && (c != '\r') && (c != '\n'));
     674:	12 33       	cpi	r17, 0x32	; 50
     676:	70 f4       	brcc	.+28     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     678:	99 81       	ldd	r25, Y+1	; 0x01
     67a:	91 11       	cpse	r25, r1
     67c:	0b c0       	rjmp	.+22     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     67e:	9a 81       	ldd	r25, Y+2	; 0x02
     680:	91 11       	cpse	r25, r1
     682:	08 c0       	rjmp	.+16     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     684:	8d 30       	cpi	r24, 0x0D	; 13
     686:	31 f0       	breq	.+12     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     688:	8a 30       	cpi	r24, 0x0A	; 10
     68a:	21 f6       	brne	.-120    	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
     68c:	03 c0       	rjmp	.+6      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
				/* strip away spaces at end */
				while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     68e:	12 30       	cpi	r17, 0x02	; 2
     690:	60 f0       	brcs	.+24     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
					len--;
     692:	11 50       	subi	r17, 0x01	; 1
					if ( (c >=32) && (c <=126) )
						tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
				}
				while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi) && (c != '\r') && (c != '\n'));
				/* strip away spaces at end */
				while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     694:	e1 2f       	mov	r30, r17
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	ee 0f       	add	r30, r30
     69a:	ff 1f       	adc	r31, r31
     69c:	e2 58       	subi	r30, 0x82	; 130
     69e:	fe 4f       	sbci	r31, 0xFE	; 254
     6a0:	80 81       	ld	r24, Z
     6a2:	91 81       	ldd	r25, Z+1	; 0x01
     6a4:	8f 35       	cpi	r24, 0x5F	; 95
     6a6:	91 05       	cpc	r25, r1
     6a8:	91 f3       	breq	.-28     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
					len--;
				tmc_serial_string.Header.Size = len*2 + sizeof(USB_Descriptor_Header_t);
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	81 0f       	add	r24, r17
     6ae:	88 0f       	add	r24, r24
     6b0:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <tmc_serial_string>
				gpib_untalk_unlisten(is_timedout);
     6b4:	85 e2       	ldi	r24, 0x25	; 37
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 cd 0b 	call	0x179a	; 0x179a <gpib_untalk_unlisten>
			}				
		}
		
		
		if (!hascomma)
     6bc:	01 11       	cpse	r16, r1
     6be:	19 c0       	rjmp	.+50     	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
			if ( (tmc_serial_string.UnicodeString[0] == 'H') &&
     6c0:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <tmc_serial_string+0x2>
     6c4:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <tmc_serial_string+0x3>
     6c8:	88 34       	cpi	r24, 0x48	; 72
     6ca:	91 05       	cpc	r25, r1
     6cc:	a1 f4       	brne	.+40     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
     6ce:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <tmc_serial_string+0x4>
     6d2:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <tmc_serial_string+0x5>
     6d6:	80 35       	cpi	r24, 0x50	; 80
     6d8:	91 05       	cpc	r25, r1
     6da:	69 f4       	brne	.+26     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
     6dc:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <tmc_serial_string+0x6>
     6e0:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <tmc_serial_string+0x7>
     6e4:	20 53       	subi	r18, 0x30	; 48
     6e6:	31 09       	sbc	r19, r1
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	2a 30       	cpi	r18, 0x0A	; 10
     6ec:	31 05       	cpc	r19, r1
     6ee:	20 f0       	brcs	.+8      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6f6:	80 e0       	ldi	r24, 0x00	; 0
			{
				hascomma = true;
			}
		
		
		if ((timeout_val == 0) || (len == 0)  || (!hascomma) ) /* timeout happened or length is 0 => build a serial number based on GPIB address */
     6f8:	40 91 79 01 	lds	r20, 0x0179	; 0x800179 <timeout_val>
     6fc:	50 91 7a 01 	lds	r21, 0x017A	; 0x80017a <timeout_val+0x1>
     700:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <timeout_val+0x2>
     704:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <timeout_val+0x3>
     708:	45 2b       	or	r20, r21
     70a:	46 2b       	or	r20, r22
     70c:	47 2b       	or	r20, r23
     70e:	41 f0       	breq	.+16     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     710:	11 23       	and	r17, r17
     712:	31 f0       	breq	.+12     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     714:	88 23       	and	r24, r24
     716:	21 f0       	breq	.+8      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
{
	uint8_t c, len, hascomma;
	bool    eoi, timedout;
	bool    gotStringViaGPIB;
	
	gotStringViaGPIB = true;
     718:	11 e0       	ldi	r17, 0x01	; 1
     71a:	09 c0       	rjmp	.+18     	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
				gpib_untalk_unlisten(is_timedout);
			}				
		}
		
		
		if (!hascomma)
     71c:	00 23       	and	r16, r16
     71e:	81 f2       	breq	.-96     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
			}
		
		
		if ((timeout_val == 0) || (len == 0)  || (!hascomma) ) /* timeout happened or length is 0 => build a serial number based on GPIB address */
		{
			TMC_SetInternalSerial(true);
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	16 dd       	rcall	.-1492   	; 0x150 <TMC_SetInternalSerial>
			gotStringViaGPIB = false;
     724:	10 e0       	ldi	r17, 0x00	; 0
     726:	03 c0       	rjmp	.+6      	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
				gpib_untalk_unlisten(is_timedout);
			}				
		}
		
		
		if (!hascomma)
     728:	00 23       	and	r16, r16
     72a:	51 f2       	breq	.-108    	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
     72c:	f5 cf       	rjmp	.-22     	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
		gotStringViaGPIB = false;
	}
	
	//TMC_SetInternalSerial(false);
	
	gpib_ren(false);
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	be d6       	rcall	.+3452   	; 0x14ae <gpib_ren>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     732:	2f ef       	ldi	r18, 0xFF	; 255
     734:	81 ee       	ldi	r24, 0xE1	; 225
     736:	94 e0       	ldi	r25, 0x04	; 4
     738:	21 50       	subi	r18, 0x01	; 1
     73a:	80 40       	sbci	r24, 0x00	; 0
     73c:	90 40       	sbci	r25, 0x00	; 0
     73e:	e1 f7       	brne	.-8      	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
     740:	00 c0       	rjmp	.+0      	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
	_delay_ms(100);
	gpib_ren(true);
     742:	00 00       	nop
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	b3 d6       	rcall	.+3430   	; 0x14ae <gpib_ren>
	return gotStringViaGPIB;
}
     748:	81 2f       	mov	r24, r17
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	08 95       	ret

0000075a <check_bootloaderEntry>:
	SetGlobalInterruptMask(CurrentGlobalInt);
}

void check_bootloaderEntry(void)
{
	if ( !(PINB & (1<<2)) ) /* check if PB2 is LOW*/
     75a:	1a 9b       	sbis	0x03, 2	; 3
	{
		Jump_To_Bootloader();
     75c:	a5 cd       	rjmp	.-1206   	; 0x2a8 <Jump_To_Bootloader>
     75e:	08 95       	ret

00000760 <eeprom_update_if_changed>:
	}
}

void eeprom_update_if_changed(uint16_t addr, uint8_t value)
{
     760:	1f 93       	push	r17
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	ec 01       	movw	r28, r24
     768:	16 2f       	mov	r17, r22
	uint8_t oldval;
	eeprom_busy_wait();
     76a:	f9 99       	sbic	0x1f, 1	; 31
     76c:	fe cf       	rjmp	.-4      	; 0x76a <eeprom_update_if_changed+0xa>
	oldval = eeprom_read_byte((uint8_t*)addr); /* read previous gpib address */
     76e:	ce 01       	movw	r24, r28
     770:	0e 94 cd 11 	call	0x239a	; 0x239a <eeprom_read_byte>
	if (oldval != value)
     774:	81 17       	cp	r24, r17
     776:	49 f0       	breq	.+18     	; 0x78a <eeprom_update_if_changed+0x2a>
	{
		eeprom_busy_wait();
     778:	f9 99       	sbic	0x1f, 1	; 31
     77a:	fe cf       	rjmp	.-4      	; 0x778 <eeprom_update_if_changed+0x18>
		eeprom_write_byte((uint8_t*)addr, value);		
     77c:	61 2f       	mov	r22, r17
     77e:	ce 01       	movw	r24, r28
	}
}
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
	eeprom_busy_wait();
	oldval = eeprom_read_byte((uint8_t*)addr); /* read previous gpib address */
	if (oldval != value)
	{
		eeprom_busy_wait();
		eeprom_write_byte((uint8_t*)addr, value);		
     786:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <eeprom_write_byte>
	}
}
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	08 95       	ret

00000792 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     792:	84 b7       	in	r24, 0x34	; 52
     794:	87 7f       	andi	r24, 0xF7	; 247
     796:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	a8 95       	wdr
     79e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     7a2:	88 61       	ori	r24, 0x18	; 24
     7a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     7a8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     7ac:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	80 e8       	ldi	r24, 0x80	; 128
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     7ba:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     7be:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1);
	

	/* Hardware Initialization */
	//LEDs_Init();
	USB_Init();
     7c0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <USB_Init>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     7c4:	e0 ee       	ldi	r30, 0xE0	; 224
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	81 60       	ori	r24, 0x01	; 1
     7cc:	80 83       	st	Z, r24
	USB_Detach();

	
	/* update the TMC default serial number*/
	TMC_SetInternalSerial(false);
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	bf dc       	rcall	.-1666   	; 0x150 <TMC_SetInternalSerial>
	
	/* LED to output and turn on */
	DDRF |= (1<<5);
     7d2:	85 9a       	sbi	0x10, 5	; 16
	LED(1);
     7d4:	8d 9a       	sbi	0x11, 5	; 17
     7d6:	08 95       	ret

000007d8 <EVENT_USB_Device_Connect>:
     7d8:	08 95       	ret

000007da <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs and stops the USB management and CDC management tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
     7da:	08 95       	ret

000007dc <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7dc:	42 e0       	ldi	r20, 0x02	; 2
     7de:	61 ec       	ldi	r22, 0xC1	; 193
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Endpoint_ConfigureEndpoint_Prv>
     7e6:	42 e3       	ldi	r20, 0x32	; 50
     7e8:	61 e8       	ldi	r22, 0x81	; 129
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Endpoint_ConfigureEndpoint_Prv>
     7f0:	42 e3       	ldi	r20, 0x32	; 50
     7f2:	60 e8       	ldi	r22, 0x80	; 128
     7f4:	83 e0       	ldi	r24, 0x03	; 3
     7f6:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <Endpoint_ConfigureEndpoint_Prv>

000007fa <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
     7fa:	cf 93       	push	r28
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
	uint8_t btag, statusReg;
	
	
	if ( ((USB_ControlRequest.wIndex == INTERFACE_ID_TestAndMeasurement) && ((USB_ControlRequest.bmRequestType & REQREC_INTERFACE)!=0)) ||
     7fc:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <USB_ControlRequest+0x4>
     800:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <USB_ControlRequest+0x5>
     804:	00 97       	sbiw	r24, 0x00	; 0
     806:	29 f4       	brne	.+10     	; 0x812 <EVENT_USB_Device_ControlRequest+0x18>
     808:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>
     80c:	80 fd       	sbrc	r24, 0
     80e:	0b c0       	rjmp	.+22     	; 0x826 <EVENT_USB_Device_ControlRequest+0x2c>
     810:	8a c1       	rjmp	.+788    	; 0xb26 <__stack+0x27>
     812:	82 38       	cpi	r24, 0x82	; 130
     814:	91 05       	cpc	r25, r1
     816:	19 f0       	breq	.+6      	; 0x81e <EVENT_USB_Device_ControlRequest+0x24>
	     (((USB_ControlRequest.wIndex == TMC_IN_EPADDR) || (USB_ControlRequest.wIndex == TMC_OUT_EPADDR)) && ((USB_ControlRequest.bmRequestType & REQREC_ENDPOINT)!=0))     )
     818:	03 97       	sbiw	r24, 0x03	; 3
     81a:	09 f0       	breq	.+2      	; 0x81e <EVENT_USB_Device_ControlRequest+0x24>
     81c:	84 c1       	rjmp	.+776    	; 0xb26 <__stack+0x27>
     81e:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>
     822:	81 ff       	sbrs	r24, 1
     824:	80 c1       	rjmp	.+768    	; 0xb26 <__stack+0x27>
	{
		/* Process TMC specific control requests */
		switch (USB_ControlRequest.bRequest)
     826:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <USB_ControlRequest+0x1>
     82a:	86 30       	cpi	r24, 0x06	; 6
     82c:	09 f4       	brne	.+2      	; 0x830 <EVENT_USB_Device_ControlRequest+0x36>
     82e:	08 c1       	rjmp	.+528    	; 0xa40 <EVENT_USB_Device_ControlRequest+0x246>
     830:	90 f4       	brcc	.+36     	; 0x856 <EVENT_USB_Device_ControlRequest+0x5c>
     832:	83 30       	cpi	r24, 0x03	; 3
     834:	09 f4       	brne	.+2      	; 0x838 <EVENT_USB_Device_ControlRequest+0x3e>
     836:	96 c0       	rjmp	.+300    	; 0x964 <EVENT_USB_Device_ControlRequest+0x16a>
     838:	38 f4       	brcc	.+14     	; 0x848 <EVENT_USB_Device_ControlRequest+0x4e>
     83a:	81 30       	cpi	r24, 0x01	; 1
     83c:	09 f4       	brne	.+2      	; 0x840 <EVENT_USB_Device_ControlRequest+0x46>
     83e:	63 c0       	rjmp	.+198    	; 0x906 <EVENT_USB_Device_ControlRequest+0x10c>
     840:	82 30       	cpi	r24, 0x02	; 2
     842:	09 f4       	brne	.+2      	; 0x846 <EVENT_USB_Device_ControlRequest+0x4c>
     844:	83 c0       	rjmp	.+262    	; 0x94c <EVENT_USB_Device_ControlRequest+0x152>
     846:	6f c1       	rjmp	.+734    	; 0xb26 <__stack+0x27>
     848:	84 30       	cpi	r24, 0x04	; 4
     84a:	09 f4       	brne	.+2      	; 0x84e <EVENT_USB_Device_ControlRequest+0x54>
     84c:	b2 c0       	rjmp	.+356    	; 0x9b2 <EVENT_USB_Device_ControlRequest+0x1b8>
     84e:	85 30       	cpi	r24, 0x05	; 5
     850:	09 f4       	brne	.+2      	; 0x854 <EVENT_USB_Device_ControlRequest+0x5a>
     852:	df c0       	rjmp	.+446    	; 0xa12 <EVENT_USB_Device_ControlRequest+0x218>
     854:	68 c1       	rjmp	.+720    	; 0xb26 <__stack+0x27>
     856:	80 38       	cpi	r24, 0x80	; 128
     858:	71 f1       	breq	.+92     	; 0x8b6 <EVENT_USB_Device_ControlRequest+0xbc>
     85a:	18 f5       	brcc	.+70     	; 0x8a2 <EVENT_USB_Device_ControlRequest+0xa8>
     85c:	87 30       	cpi	r24, 0x07	; 7
     85e:	09 f4       	brne	.+2      	; 0x862 <EVENT_USB_Device_ControlRequest+0x68>
     860:	15 c1       	rjmp	.+554    	; 0xa8c <EVENT_USB_Device_ControlRequest+0x292>
     862:	80 34       	cpi	r24, 0x40	; 64
     864:	09 f0       	breq	.+2      	; 0x868 <EVENT_USB_Device_ControlRequest+0x6e>
     866:	5f c1       	rjmp	.+702    	; 0xb26 <__stack+0x27>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     868:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     86c:	87 7f       	andi	r24, 0xF7	; 247
     86e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     872:	c1 e0       	ldi	r28, 0x01	; 1
     874:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     878:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     87c:	8e 77       	andi	r24, 0x7E	; 126
     87e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearSETUP();

				/* USBTMC Status response (1 Byte) */
				Endpoint_Write_8(TMC_STATUS_SUCCESS);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     882:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <Endpoint_ClearStatusStage>
				
				LED(0);
     886:	8d 98       	cbi	0x11, 5	; 17
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	84 e3       	ldi	r24, 0x34	; 52
     88c:	9c e0       	ldi	r25, 0x0C	; 12
     88e:	21 50       	subi	r18, 0x01	; 1
     890:	80 40       	sbci	r24, 0x00	; 0
     892:	90 40       	sbci	r25, 0x00	; 0
     894:	e1 f7       	brne	.-8      	; 0x88e <EVENT_USB_Device_ControlRequest+0x94>
     896:	00 c0       	rjmp	.+0      	; 0x898 <EVENT_USB_Device_ControlRequest+0x9e>
     898:	00 00       	nop
				_delay_ms(250);
				LED(1);
     89a:	8d 9a       	sbi	0x11, 5	; 17
				
				s_nextwrite_mightbeparameterset = true;
     89c:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <s_nextwrite_mightbeparameterset>
				break;
     8a0:	42 c1       	rjmp	.+644    	; 0xb26 <__stack+0x27>
	
	if ( ((USB_ControlRequest.wIndex == INTERFACE_ID_TestAndMeasurement) && ((USB_ControlRequest.bmRequestType & REQREC_INTERFACE)!=0)) ||
	     (((USB_ControlRequest.wIndex == TMC_IN_EPADDR) || (USB_ControlRequest.wIndex == TMC_OUT_EPADDR)) && ((USB_ControlRequest.bmRequestType & REQREC_ENDPOINT)!=0))     )
	{
		/* Process TMC specific control requests */
		switch (USB_ControlRequest.bRequest)
     8a2:	81 3a       	cpi	r24, 0xA1	; 161
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <EVENT_USB_Device_ControlRequest+0xae>
     8a6:	1e c1       	rjmp	.+572    	; 0xae4 <EVENT_USB_Device_ControlRequest+0x2ea>
     8a8:	82 3a       	cpi	r24, 0xA2	; 162
     8aa:	09 f4       	brne	.+2      	; 0x8ae <EVENT_USB_Device_ControlRequest+0xb4>
     8ac:	0b c1       	rjmp	.+534    	; 0xac4 <EVENT_USB_Device_ControlRequest+0x2ca>
     8ae:	80 3a       	cpi	r24, 0xA0	; 160
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <EVENT_USB_Device_ControlRequest+0xba>
     8b2:	39 c1       	rjmp	.+626    	; 0xb26 <__stack+0x27>
     8b4:	00 c1       	rjmp	.+512    	; 0xab6 <EVENT_USB_Device_ControlRequest+0x2bc>
		{
			case Req_ReadStatusByte:
				btag = USB_ControlRequest.wValue;
     8b6:	c0 91 eb 01 	lds	r28, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>

				gpib_ren(1); /* ensure that remote control is enabled */
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	f8 d5       	rcall	.+3056   	; 0x14ae <gpib_ren>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     8be:	80 e5       	ldi	r24, 0x50	; 80
     8c0:	93 ec       	ldi	r25, 0xC3	; 195
     8c2:	a0 e0       	ldi	r26, 0x00	; 0
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <timeout_val>
     8ca:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <timeout_val+0x1>
     8ce:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <timeout_val+0x2>
     8d2:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <timeout_val+0x3>
			case Req_ReadStatusByte:
				btag = USB_ControlRequest.wValue;

				gpib_ren(1); /* ensure that remote control is enabled */
				timeout_start(50000); /* 0.5s timeout*/
				statusReg =  gpib_readStatusByte(gpib_addr, is_timedout);
     8d6:	65 e2       	ldi	r22, 0x25	; 37
     8d8:	71 e0       	ldi	r23, 0x01	; 1
     8da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     8de:	1c d7       	rcall	.+3640   	; 0x1718 <gpib_readStatusByte>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     8e0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8e4:	97 7f       	andi	r25, 0xF7	; 247
     8e6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8f0:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8f4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_8(TMC_STATUS_SUCCESS);
				Endpoint_Write_8(btag);
				Endpoint_Write_8(statusReg);
				
				/* prepare interrupt response*/
				RSTB_btag = btag;
     8f8:	c0 93 6b 01 	sts	0x016B, r28	; 0x80016b <RSTB_btag>
				RSTB_status = statusReg;
     8fc:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <RSTB_status>
				handleRSTB = true;
     900:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <handleRSTB>
     904:	08 c1       	rjmp	.+528    	; 0xb16 <__stack+0x17>

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
			case Req_InitiateAbortBulkOut:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     906:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <USB_ControlRequest>
     90a:	92 3a       	cpi	r25, 0xA2	; 162
     90c:	09 f0       	breq	.+2      	; 0x910 <EVENT_USB_Device_ControlRequest+0x116>
     90e:	0b c1       	rjmp	.+534    	; 0xb26 <__stack+0x27>
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
     910:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <RequestInProgress>
     914:	91 11       	cpse	r25, r1
     916:	0e c0       	rjmp	.+28     	; 0x934 <EVENT_USB_Device_ControlRequest+0x13a>
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
     918:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <CurrentTransferTag>
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 91 eb 01 	lds	r20, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
     922:	50 91 ec 01 	lds	r21, 0x01EC	; 0x8001ec <USB_ControlRequest+0x3>
     926:	42 17       	cp	r20, r18
     928:	53 07       	cpc	r21, r19
     92a:	31 f4       	brne	.+12     	; 0x938 <EVENT_USB_Device_ControlRequest+0x13e>
					{
						/* Indicate that all in-progress/pending data OUT requests should be aborted */
						IsTMCBulkOUTReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkOut;
     92c:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	03 c0       	rjmp	.+6      	; 0x93a <EVENT_USB_Device_ControlRequest+0x140>
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
     934:	83 e8       	ldi	r24, 0x83	; 131
     936:	01 c0       	rjmp	.+2      	; 0x93a <EVENT_USB_Device_ControlRequest+0x140>
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
					{
						TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
     938:	81 e8       	ldi	r24, 0x81	; 129
						IsTMCBulkOUTReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkOut;
					}
IsTMCBulkOUTReset = true;
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <IsTMCBulkOUTReset>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     940:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     944:	97 7f       	andi	r25, 0xF7	; 247
     946:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     94a:	e3 c0       	rjmp	.+454    	; 0xb12 <__stack+0x13>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_CheckAbortBulkOutStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     94c:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>
     950:	82 3a       	cpi	r24, 0xA2	; 162
     952:	09 f0       	breq	.+2      	; 0x956 <EVENT_USB_Device_ControlRequest+0x15c>
     954:	e8 c0       	rjmp	.+464    	; 0xb26 <__stack+0x27>
				{
					/* Check that an ABORT BULK OUT transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateAbortBulkOut)
     956:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <RequestInProgress>
     95a:	81 30       	cpi	r24, 0x01	; 1
     95c:	d9 f5       	brne	.+118    	; 0x9d4 <EVENT_USB_Device_ControlRequest+0x1da>
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkOUTReset)
     95e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <IsTMCBulkOUTReset>
     962:	32 c0       	rjmp	.+100    	; 0x9c8 <EVENT_USB_Device_ControlRequest+0x1ce>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_InitiateAbortBulkIn:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     964:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <USB_ControlRequest>
     968:	92 3a       	cpi	r25, 0xA2	; 162
     96a:	09 f0       	breq	.+2      	; 0x96e <EVENT_USB_Device_ControlRequest+0x174>
     96c:	dc c0       	rjmp	.+440    	; 0xb26 <__stack+0x27>
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
     96e:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <RequestInProgress>
     972:	91 11       	cpse	r25, r1
     974:	0e c0       	rjmp	.+28     	; 0x992 <EVENT_USB_Device_ControlRequest+0x198>
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
     976:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <CurrentTransferTag>
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	40 91 eb 01 	lds	r20, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
     980:	50 91 ec 01 	lds	r21, 0x01EC	; 0x8001ec <USB_ControlRequest+0x3>
     984:	42 17       	cp	r20, r18
     986:	53 07       	cpc	r21, r19
     988:	31 f4       	brne	.+12     	; 0x996 <EVENT_USB_Device_ControlRequest+0x19c>
					{
						/* Indicate that all in-progress/pending data IN requests should be aborted */
						IsTMCBulkINReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkIn;
     98a:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	03 c0       	rjmp	.+6      	; 0x998 <EVENT_USB_Device_ControlRequest+0x19e>
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
     992:	83 e8       	ldi	r24, 0x83	; 131
     994:	01 c0       	rjmp	.+2      	; 0x998 <EVENT_USB_Device_ControlRequest+0x19e>
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
					{
						TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
     996:	81 e8       	ldi	r24, 0x81	; 129
						IsTMCBulkINReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkIn;
					}
					IsTMCBulkINReset = true;
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <IsTMCBulkINReset>
     99e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9a2:	97 7f       	andi	r25, 0xF7	; 247
     9a4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9a8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

					Endpoint_ClearSETUP();

					/* Write the request response bytes */
					Endpoint_Write_8(TMCRequestStatus);
					Endpoint_Write_8(CurrentTransferTag);
     9ac:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <CurrentTransferTag>
     9b0:	b0 c0       	rjmp	.+352    	; 0xb12 <__stack+0x13>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_CheckAbortBulkInStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     9b2:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>
     9b6:	82 3a       	cpi	r24, 0xA2	; 162
     9b8:	09 f0       	breq	.+2      	; 0x9bc <EVENT_USB_Device_ControlRequest+0x1c2>
     9ba:	b5 c0       	rjmp	.+362    	; 0xb26 <__stack+0x27>
				{
					/* Check that an ABORT BULK IN transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateAbortBulkIn)
     9bc:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <RequestInProgress>
     9c0:	83 30       	cpi	r24, 0x03	; 3
     9c2:	41 f4       	brne	.+16     	; 0x9d4 <EVENT_USB_Device_ControlRequest+0x1da>
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkINReset)
     9c4:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <IsTMCBulkINReset>
     9c8:	81 11       	cpse	r24, r1
     9ca:	06 c0       	rjmp	.+12     	; 0x9d8 <EVENT_USB_Device_ControlRequest+0x1de>
					  TMCRequestStatus = TMC_STATUS_PENDING;
					else
					  RequestInProgress = 0;
     9cc:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	03 c0       	rjmp	.+6      	; 0x9da <EVENT_USB_Device_ControlRequest+0x1e0>
			case Req_CheckAbortBulkInStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
				{
					/* Check that an ABORT BULK IN transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateAbortBulkIn)
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     9d4:	82 e8       	ldi	r24, 0x82	; 130
     9d6:	01 c0       	rjmp	.+2      	; 0x9da <EVENT_USB_Device_ControlRequest+0x1e0>
					else if (IsTMCBulkINReset)
					  TMCRequestStatus = TMC_STATUS_PENDING;
     9d8:	82 e0       	ldi	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9da:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9de:	97 7f       	andi	r25, 0xF7	; 247
     9e0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9e4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     9e8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     9ec:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					Endpoint_ClearSETUP();

					/* Write the request response bytes */
					Endpoint_Write_8(TMCRequestStatus);
					Endpoint_Write_16_LE(0);
					Endpoint_Write_32_LE(LastTransferLength);
     9f0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <LastTransferLength>
     9f4:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <LastTransferLength+0x1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     9f8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	89 2f       	mov	r24, r25
     a02:	9a 2f       	mov	r25, r26
     a04:	ab 2f       	mov	r26, r27
     a06:	bb 27       	eor	r27, r27
     a08:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     a0c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a10:	3a c0       	rjmp	.+116    	; 0xa86 <EVENT_USB_Device_ControlRequest+0x28c>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_InitiateClear:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     a12:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <USB_ControlRequest>
     a16:	91 3a       	cpi	r25, 0xA1	; 161
     a18:	09 f0       	breq	.+2      	; 0xa1c <EVENT_USB_Device_ControlRequest+0x222>
     a1a:	85 c0       	rjmp	.+266    	; 0xb26 <__stack+0x27>
				{
					/* Check that no split transaction is already in progress */
					if (RequestInProgress != 0)
     a1c:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <RequestInProgress>
     a20:	99 23       	and	r25, r25
     a22:	21 f0       	breq	.+8      	; 0xa2c <EVENT_USB_Device_ControlRequest+0x232>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a24:	83 e8       	ldi	r24, 0x83	; 131
     a26:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a2a:	6d c0       	rjmp	.+218    	; 0xb06 <__stack+0x7>
						Endpoint_Write_8(TMC_STATUS_SPLIT_IN_PROGRESS);
					}
					else
					{
						/* Indicate that all in-progress/pending data IN and OUT requests should be aborted */
						IsTMCBulkINReset  = true;
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <IsTMCBulkINReset>
						IsTMCBulkOUTReset = true;
     a32:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <IsTMCBulkOUTReset>
						handleSDC = true; // trigger handling of SDC command to device
     a36:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <handleSDC>
						

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateClear;
     a3a:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <RequestInProgress>
     a3e:	63 c0       	rjmp	.+198    	; 0xb06 <__stack+0x7>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_CheckClearStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     a40:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>
     a44:	81 3a       	cpi	r24, 0xA1	; 161
     a46:	09 f0       	breq	.+2      	; 0xa4a <EVENT_USB_Device_ControlRequest+0x250>
     a48:	6e c0       	rjmp	.+220    	; 0xb26 <__stack+0x27>
				{
					/* Check that a CLEAR transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateClear)
     a4a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <RequestInProgress>
     a4e:	85 30       	cpi	r24, 0x05	; 5
     a50:	81 f4       	brne	.+32     	; 0xa72 <EVENT_USB_Device_ControlRequest+0x278>
						TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkINReset || IsTMCBulkOUTReset || handleSDC)
     a52:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <IsTMCBulkINReset>
     a56:	81 11       	cpse	r24, r1
     a58:	0e c0       	rjmp	.+28     	; 0xa76 <EVENT_USB_Device_ControlRequest+0x27c>
     a5a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <IsTMCBulkOUTReset>
     a5e:	81 11       	cpse	r24, r1
     a60:	0a c0       	rjmp	.+20     	; 0xa76 <EVENT_USB_Device_ControlRequest+0x27c>
     a62:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <handleSDC>
     a66:	81 11       	cpse	r24, r1
     a68:	06 c0       	rjmp	.+12     	; 0xa76 <EVENT_USB_Device_ControlRequest+0x27c>
						TMCRequestStatus = TMC_STATUS_PENDING;
					else 
					{
						TMCRequestStatus = TMC_STATUS_SUCCESS;
						RequestInProgress = 0;
     a6a:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <RequestInProgress>
						TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkINReset || IsTMCBulkOUTReset || handleSDC)
						TMCRequestStatus = TMC_STATUS_PENDING;
					else 
					{
						TMCRequestStatus = TMC_STATUS_SUCCESS;
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	03 c0       	rjmp	.+6      	; 0xa78 <EVENT_USB_Device_ControlRequest+0x27e>
			case Req_CheckClearStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
				{
					/* Check that a CLEAR transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateClear)
						TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     a72:	82 e8       	ldi	r24, 0x82	; 130
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <EVENT_USB_Device_ControlRequest+0x27e>
					else if (IsTMCBulkINReset || IsTMCBulkOUTReset || handleSDC)
						TMCRequestStatus = TMC_STATUS_PENDING;
     a76:	82 e0       	ldi	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a78:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a7c:	97 7f       	andi	r25, 0xF7	; 247
     a7e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a82:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a86:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a8a:	45 c0       	rjmp	.+138    	; 0xb16 <__stack+0x17>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_GetCapabilities:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     a8c:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>
     a90:	81 3a       	cpi	r24, 0xA1	; 161
     a92:	09 f0       	breq	.+2      	; 0xa96 <EVENT_USB_Device_ControlRequest+0x29c>
     a94:	48 c0       	rjmp	.+144    	; 0xb26 <__stack+0x27>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a96:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a9a:	87 7f       	andi	r24, 0xF7	; 247
     a9c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				{
					Endpoint_ClearSETUP();

					/* Write the device capabilities to the control endpoint */
					Endpoint_Write_Control_Stream_LE(&Capabilities, sizeof(TMC_Capabilities_t));
     aa0:	68 e1       	ldi	r22, 0x18	; 24
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	83 e0       	ldi	r24, 0x03	; 3
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	cd d7       	rcall	.+3994   	; 0x1a44 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     aaa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     aae:	8b 77       	andi	r24, 0x7B	; 123
     ab0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ab4:	38 c0       	rjmp	.+112    	; 0xb26 <__stack+0x27>
				
				s_nextwrite_mightbeparameterset = true;
				break;

			case Req_RenControl:
				if ((USB_ControlRequest.wValue & 0xff) == 1)
     ab6:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
     aba:	81 30       	cpi	r24, 0x01	; 1
				{
					gpib_ren(1);
				}
				else
				{
					gpib_ren(0);
     abc:	09 f0       	breq	.+2      	; 0xac0 <EVENT_USB_Device_ControlRequest+0x2c6>
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	f6 d4       	rcall	.+2540   	; 0x14ae <gpib_ren>
     ac2:	21 c0       	rjmp	.+66     	; 0xb06 <__stack+0x7>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     ac4:	80 e5       	ldi	r24, 0x50	; 80
     ac6:	93 ec       	ldi	r25, 0xC3	; 195
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <timeout_val>
     ad0:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <timeout_val+0x1>
     ad4:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <timeout_val+0x2>
     ad8:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <timeout_val+0x3>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
			case Req_LocalLockout:
				timeout_start(50000); /* 0.5s timeout*/
				gpib_localLockout(is_timedout);
     adc:	85 e2       	ldi	r24, 0x25	; 37
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	c6 d5       	rcall	.+2956   	; 0x166e <gpib_localLockout>
     ae2:	11 c0       	rjmp	.+34     	; 0xb06 <__stack+0x7>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     ae4:	80 e5       	ldi	r24, 0x50	; 80
     ae6:	93 ec       	ldi	r25, 0xC3	; 195
     ae8:	a0 e0       	ldi	r26, 0x00	; 0
     aea:	b0 e0       	ldi	r27, 0x00	; 0
     aec:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <timeout_val>
     af0:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <timeout_val+0x1>
     af4:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <timeout_val+0x2>
     af8:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <timeout_val+0x3>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
			case Req_GoToLocal:
				timeout_start(50000); /* 0.5s timeout*/
				gpib_gotoLocal(gpib_addr, is_timedout);
     afc:	65 e2       	ldi	r22, 0x25	; 37
     afe:	71 e0       	ldi	r23, 0x01	; 1
     b00:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     b04:	9f d5       	rcall	.+2878   	; 0x1644 <gpib_gotoLocal>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b0a:	87 7f       	andi	r24, 0xF7	; 247
     b0c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b16:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b1a:	8e 77       	andi	r24, 0x7E	; 126
     b1c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
		}
	}
}
     b20:	cf 91       	pop	r28
				
				Endpoint_ClearSETUP();
				/* USBTMC Status response (1 Byte) */
				Endpoint_Write_8(TMC_STATUS_SUCCESS);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     b22:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <Endpoint_ClearStatusStage>
				break;
		}
	}
}
     b26:	cf 91       	pop	r28
     b28:	08 95       	ret

00000b2a <ProcessInternalCommand>:
					0x00 or 0xff => EOI termination
					0x01         => EOI or '\n' (LF = linefeed)
					0x02         => EOI or '\r' (CR = carriage return)
*/
void ProcessInternalCommand(uint8_t* const Data, uint8_t Length)
{
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	ec 01       	movw	r28, r24
	uint8_t xx, yy;
	
	xx = charToval(Data[1])*16 + charToval(Data[2]);
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	76 db       	rcall	.-2324   	; 0x224 <charToval>
     b38:	18 2f       	mov	r17, r24
     b3a:	8a 81       	ldd	r24, Y+2	; 0x02
     b3c:	73 db       	rcall	.-2330   	; 0x224 <charToval>
     b3e:	90 e1       	ldi	r25, 0x10	; 16
     b40:	19 9f       	mul	r17, r25
     b42:	80 0d       	add	r24, r0
     b44:	11 24       	eor	r1, r1
     b46:	18 2f       	mov	r17, r24
	yy = charToval(Data[3])*16 + charToval(Data[4]);
     b48:	8b 81       	ldd	r24, Y+3	; 0x03
     b4a:	6c db       	rcall	.-2344   	; 0x224 <charToval>
     b4c:	08 2f       	mov	r16, r24
     b4e:	8c 81       	ldd	r24, Y+4	; 0x04
     b50:	69 db       	rcall	.-2350   	; 0x224 <charToval>
     b52:	68 2f       	mov	r22, r24
     b54:	90 e1       	ldi	r25, 0x10	; 16
     b56:	09 9f       	mul	r16, r25
     b58:	60 0d       	add	r22, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	11 23       	and	r17, r17
	
	switch (xx)
     b5e:	19 f0       	breq	.+6      	; 0xb66 <ProcessInternalCommand+0x3c>
     b60:	11 30       	cpi	r17, 0x01	; 1
     b62:	41 f0       	breq	.+16     	; 0xb74 <ProcessInternalCommand+0x4a>
     b64:	21 c0       	rjmp	.+66     	; 0xba8 <ProcessInternalCommand+0x7e>
     b66:	88 e6       	ldi	r24, 0x68	; 104
	{
		case 0x00: /* automatic detection y */
			eeprom_update_if_changed(104, yy);
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	df 91       	pop	r29
					gpib_set_readtermination('\0');
					break;
			}
			break;
	}
}
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
	yy = charToval(Data[3])*16 + charToval(Data[4]);
	
	switch (xx)
	{
		case 0x00: /* automatic detection y */
			eeprom_update_if_changed(104, yy);
     b72:	f6 cd       	rjmp	.-1044   	; 0x760 <eeprom_update_if_changed>
     b74:	61 30       	cpi	r22, 0x01	; 1
			break;
		case 0x01: /* select termination method */
			switch (yy)
     b76:	41 f0       	breq	.+16     	; 0xb88 <ProcessInternalCommand+0x5e>
     b78:	62 30       	cpi	r22, 0x02	; 2
     b7a:	61 f4       	brne	.+24     	; 0xb94 <ProcessInternalCommand+0x6a>
				case 0x01: /* \n */
					eeprom_update_if_changed(105, '\n');
					gpib_set_readtermination('\n');
					break;
				case 0x02: /* \r */
					eeprom_update_if_changed(105, '\r');
     b7c:	6d e0       	ldi	r22, 0x0D	; 13
     b7e:	89 e6       	ldi	r24, 0x69	; 105
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	ee dd       	rcall	.-1060   	; 0x760 <eeprom_update_if_changed>
					gpib_set_readtermination('\r');
     b84:	8d e0       	ldi	r24, 0x0D	; 13
     b86:	0b c0       	rjmp	.+22     	; 0xb9e <ProcessInternalCommand+0x74>
			break;
		case 0x01: /* select termination method */
			switch (yy)
			{
				case 0x01: /* \n */
					eeprom_update_if_changed(105, '\n');
     b88:	6a e0       	ldi	r22, 0x0A	; 10
     b8a:	89 e6       	ldi	r24, 0x69	; 105
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	e8 dd       	rcall	.-1072   	; 0x760 <eeprom_update_if_changed>
					gpib_set_readtermination('\n');
     b90:	8a e0       	ldi	r24, 0x0A	; 10
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <ProcessInternalCommand+0x74>
				case 0x02: /* \r */
					eeprom_update_if_changed(105, '\r');
					gpib_set_readtermination('\r');
					break;
				default:
					eeprom_update_if_changed(105, '\0');
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	89 e6       	ldi	r24, 0x69	; 105
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	e2 dd       	rcall	.-1084   	; 0x760 <eeprom_update_if_changed>
					gpib_set_readtermination('\0');
     b9c:	80 e0       	ldi	r24, 0x00	; 0
					break;
			}
			break;
	}
}
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
					eeprom_update_if_changed(105, '\r');
					gpib_set_readtermination('\r');
					break;
				default:
					eeprom_update_if_changed(105, '\0');
					gpib_set_readtermination('\0');
     ba6:	4f c6       	rjmp	.+3230   	; 0x1846 <gpib_set_readtermination>
     ba8:	df 91       	pop	r29
					break;
			}
			break;
	}
}
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	08 95       	ret

00000bb2 <ProcessSentMessage>:
     bb2:	cf 92       	push	r12

void ProcessSentMessage(uint8_t* const Data, uint8_t Length, bool isFirstTransfer, bool isLastTransfer, gpibtimeout_t ptimeoutfunc)
{
     bb4:	df 92       	push	r13
     bb6:	ef 92       	push	r14
     bb8:	ff 92       	push	r15
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	7c 01       	movw	r14, r24
     bc4:	c6 2f       	mov	r28, r22
     bc6:	d4 2e       	mov	r13, r20
     bc8:	d2 2f       	mov	r29, r18
	uint8_t i, dat;
	bool timedout, isinternalcommand;
	
	
	/* check, if this is an internal command */ 
	isinternalcommand = isFirstTransfer && isFirstTransfer && s_nextwrite_mightbeparameterset && (Data[0] == '!');
     bca:	44 23       	and	r20, r20
     bcc:	49 f0       	breq	.+18     	; 0xbe0 <ProcessSentMessage+0x2e>
     bce:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <s_nextwrite_mightbeparameterset>
     bd2:	88 23       	and	r24, r24
     bd4:	29 f0       	breq	.+10     	; 0xbe0 <ProcessSentMessage+0x2e>
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	f7 01       	movw	r30, r14
     bda:	90 81       	ld	r25, Z
     bdc:	91 32       	cpi	r25, 0x21	; 33
     bde:	09 f0       	breq	.+2      	; 0xbe2 <ProcessSentMessage+0x30>
     be0:	80 e0       	ldi	r24, 0x00	; 0
	if (isinternalcommand)
     be2:	80 ff       	sbrs	r24, 0
     be4:	04 c0       	rjmp	.+8      	; 0xbee <ProcessSentMessage+0x3c>
	{
		ProcessInternalCommand(Data, Length);
     be6:	6c 2f       	mov	r22, r28
     be8:	c7 01       	movw	r24, r14
     bea:	9f df       	rcall	.-194    	; 0xb2a <ProcessInternalCommand>
     bec:	24 c0       	rjmp	.+72     	; 0xc36 <ProcessSentMessage+0x84>
	}
	else
	{
		timedout = false;
		
		gpib_ren(1); /* ensure that remote control is enabled */
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	5e d4       	rcall	.+2236   	; 0x14ae <gpib_ren>
		
		LED(0);
     bf2:	8d 98       	cbi	0x11, 5	; 17
		if (isFirstTransfer)
     bf4:	dd 20       	and	r13, r13
     bf6:	29 f0       	breq	.+10     	; 0xc02 <ProcessSentMessage+0x50>
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
     bf8:	b8 01       	movw	r22, r16
     bfa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     bfe:	fd d5       	rcall	.+3066   	; 0x17fa <gpib_make_listener>
     c00:	01 c0       	rjmp	.+2      	; 0xc04 <ProcessSentMessage+0x52>
	{
		ProcessInternalCommand(Data, Length);
	}
	else
	{
		timedout = false;
     c02:	80 e0       	ldi	r24, 0x00	; 0
		i = 0;
		while ( (Length > 0) && !timedout)
		{
			Length--;
			dat = Data[i++];
			timedout = gpib_writedat(dat, (Length == 0)  && isLastTransfer, ptimeoutfunc);
     c04:	cd 2e       	mov	r12, r29
		LED(0);
		if (isFirstTransfer)
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
			
		i = 0;
		while ( (Length > 0) && !timedout)
     c06:	cc 23       	and	r28, r28
     c08:	79 f0       	breq	.+30     	; 0xc28 <ProcessSentMessage+0x76>
     c0a:	81 11       	cpse	r24, r1
     c0c:	13 c0       	rjmp	.+38     	; 0xc34 <ProcessSentMessage+0x82>
		{
			Length--;
     c0e:	c1 50       	subi	r28, 0x01	; 1
			dat = Data[i++];
     c10:	f7 01       	movw	r30, r14
     c12:	81 91       	ld	r24, Z+
     c14:	7f 01       	movw	r14, r30
			timedout = gpib_writedat(dat, (Length == 0)  && isLastTransfer, ptimeoutfunc);
     c16:	c1 11       	cpse	r28, r1
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <ProcessSentMessage+0x6c>
     c1a:	6c 2d       	mov	r22, r12
     c1c:	01 c0       	rjmp	.+2      	; 0xc20 <ProcessSentMessage+0x6e>
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	61 70       	andi	r22, 0x01	; 1
     c22:	a8 01       	movw	r20, r16
     c24:	0a d6       	rcall	.+3092   	; 0x183a <gpib_writedat>
     c26:	ef cf       	rjmp	.-34     	; 0xc06 <ProcessSentMessage+0x54>
		}
		
		if (isLastTransfer && !timedout) /* in case of timeout the interface is cleared within the writedat function, no need to untalk!*/
     c28:	dd 23       	and	r29, r29
     c2a:	21 f0       	breq	.+8      	; 0xc34 <ProcessSentMessage+0x82>
     c2c:	81 11       	cpse	r24, r1
			gpib_untalk_unlisten(ptimeoutfunc);
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <ProcessSentMessage+0x82>
     c30:	c8 01       	movw	r24, r16
     c32:	b3 d5       	rcall	.+2918   	; 0x179a <gpib_untalk_unlisten>
		LED(1);
     c34:	8d 9a       	sbi	0x11, 5	; 17
	}
	s_nextwrite_mightbeparameterset = false;
     c36:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <s_nextwrite_mightbeparameterset>
}
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	ff 90       	pop	r15
     c44:	ef 90       	pop	r14
     c46:	df 90       	pop	r13
     c48:	cf 90       	pop	r12
     c4a:	08 95       	ret

00000c4c <GetNextMessage>:

uint8_t GetNextMessage(uint8_t* const Data, uint8_t maxlen, bool isFirstMessage, bool *pisLastMessage, gpibtimeout_t ptimeoutfunc)
{
     c4c:	6f 92       	push	r6
     c4e:	7f 92       	push	r7
     c50:	8f 92       	push	r8
     c52:	9f 92       	push	r9
     c54:	af 92       	push	r10
     c56:	bf 92       	push	r11
     c58:	cf 92       	push	r12
     c5a:	df 92       	push	r13
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	00 d0       	rcall	.+0      	; 0xc68 <GetNextMessage+0x1c>
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	5c 01       	movw	r10, r24
     c6e:	f6 2e       	mov	r15, r22
     c70:	74 2e       	mov	r7, r20
     c72:	49 01       	movw	r8, r18
     c74:	68 01       	movw	r12, r16
	uint8_t c, i;
	bool    Eoi, timedout;
	
	gpib_ren(1); /* ensure that remote control is enabled */
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	1a d4       	rcall	.+2100   	; 0x14ae <gpib_ren>
	
	LED(0);	
     c7a:	8d 98       	cbi	0x11, 5	; 17
	
	timedout = false;
     c7c:	19 82       	std	Y+1, r1	; 0x01
	if (isFirstMessage)
     c7e:	77 20       	and	r7, r7
     c80:	29 f0       	breq	.+10     	; 0xc8c <GetNextMessage+0x40>
		timedout = gpib_make_talker(gpib_addr, ptimeoutfunc);
     c82:	b8 01       	movw	r22, r16
     c84:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     c88:	9c d5       	rcall	.+2872   	; 0x17c2 <gpib_make_talker>
     c8a:	89 83       	std	Y+1, r24	; 0x01

	i = 0;
	Eoi = false;
     c8c:	1a 82       	std	Y+2, r1	; 0x02
     c8e:	87 e2       	ldi	r24, 0x27	; 39
     c90:	68 2e       	mov	r6, r24
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	78 2e       	mov	r7, r24
	
	timedout = false;
	if (isFirstMessage)
		timedout = gpib_make_talker(gpib_addr, ptimeoutfunc);

	i = 0;
     c96:	10 e0       	ldi	r17, 0x00	; 0
	Eoi = false;

	while (!Eoi && (i < maxlen) && !timedout)
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	91 11       	cpse	r25, r1
     c9e:	13 c0       	rjmp	.+38     	; 0xcc6 <GetNextMessage+0x7a>
     ca0:	f1 16       	cp	r15, r17
     ca2:	b1 f0       	breq	.+44     	; 0xcd0 <GetNextMessage+0x84>
     ca4:	81 11       	cpse	r24, r1
     ca6:	18 c0       	rjmp	.+48     	; 0xcd8 <GetNextMessage+0x8c>
	{
	
		c = gpib_readdat(&Eoi, &timedout, ptimeoutfunc); 
     ca8:	a6 01       	movw	r20, r12
     caa:	be 01       	movw	r22, r28
     cac:	6f 5f       	subi	r22, 0xFF	; 255
     cae:	7f 4f       	sbci	r23, 0xFF	; 255
     cb0:	ce 01       	movw	r24, r28
     cb2:	02 96       	adiw	r24, 0x02	; 2
     cb4:	e7 d4       	rcall	.+2510   	; 0x1684 <gpib_readdat>
		if (!timedout)
     cb6:	99 81       	ldd	r25, Y+1	; 0x01
     cb8:	91 11       	cpse	r25, r1
     cba:	ee cf       	rjmp	.-36     	; 0xc98 <GetNextMessage+0x4c>
			NextResponseBuffer[i++] = c;
     cbc:	1f 5f       	subi	r17, 0xFF	; 255
     cbe:	f3 01       	movw	r30, r6
     cc0:	81 93       	st	Z+, r24
     cc2:	3f 01       	movw	r6, r30
     cc4:	e9 cf       	rjmp	.-46     	; 0xc98 <GetNextMessage+0x4c>
	}
		
	if (Eoi && !timedout) /* in case of timeout, no need to unlisten => interface clear done in readdat function! */
     cc6:	81 11       	cpse	r24, r1
		gpib_untalk_unlisten(ptimeoutfunc);
     cc8:	07 c0       	rjmp	.+14     	; 0xcd8 <GetNextMessage+0x8c>
     cca:	c6 01       	movw	r24, r12
     ccc:	66 d5       	rcall	.+2764   	; 0x179a <gpib_untalk_unlisten>
     cce:	f1 2e       	mov	r15, r17

	if (timedout) /* in case of timedout, simulate an end of message */
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	88 23       	and	r24, r24
     cd4:	21 f0       	breq	.+8      	; 0xcde <GetNextMessage+0x92>
     cd6:	1f 2d       	mov	r17, r15
		Eoi = true;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	8a 83       	std	Y+2, r24	; 0x02
     cdc:	f1 2e       	mov	r15, r17
	*pisLastMessage = Eoi;
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	f4 01       	movw	r30, r8
     ce2:	80 83       	st	Z, r24
	
	memcpy((char*)Data, (char*)NextResponseBuffer, i);
     ce4:	4f 2d       	mov	r20, r15
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	67 e2       	ldi	r22, 0x27	; 39
     cea:	71 e0       	ldi	r23, 0x01	; 1
     cec:	c5 01       	movw	r24, r10
     cee:	0e 94 c4 11 	call	0x2388	; 0x2388 <memcpy>
	
	LED(1);
     cf2:	8d 9a       	sbi	0x11, 5	; 17

	return i;
}
     cf4:	8f 2d       	mov	r24, r15
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	bf 90       	pop	r11
     d0a:	af 90       	pop	r10
     d0c:	9f 90       	pop	r9
     d0e:	8f 90       	pop	r8
     d10:	7f 90       	pop	r7
     d12:	6f 90       	pop	r6
     d14:	08 95       	ret

00000d16 <TMC_resetstates>:
bool TMC_eom;
bool TMC_InLastMessageComplete = true;

void TMC_resetstates(void)
{
	TMC_LastMessageComplete = true;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <TMC_LastMessageComplete>
	TMC_InLastMessageComplete = true;
     d1c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <TMC_InLastMessageComplete>
	s_remaining_bytes_receive = 0;
     d20:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <s_remaining_bytes_receive>
     d24:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <s_remaining_bytes_receive+0x1>
     d28:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <s_remaining_bytes_receive+0x2>
     d2c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <s_remaining_bytes_receive+0x3>
	gpib_interface_clear();
     d30:	c4 c3       	rjmp	.+1928   	; 0x14ba <gpib_interface_clear>

00000d32 <ReadTMCHeader>:
 *  \param[out] MessageHeader  Pointer to a location where the read header (if any) should be stored
 *
 *  \return Boolean \c true if a header was read, \c false otherwise
 */
bool ReadTMCHeader(TMC_MessageHeader_t* const MessageHeader)
{
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <ReadTMCHeader+0xa>
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d40:	23 e0       	ldi	r18, 0x03	; 3
     d42:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d46:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
     d4a:	22 ff       	sbrs	r18, 2
     d4c:	1c c0       	rjmp	.+56     	; 0xd86 <ReadTMCHeader+0x54>
     d4e:	8c 01       	movw	r16, r24
	  return false;

	/* Read in the header of the command from the host */
	BytesTransferred = 0;
     d50:	1a 82       	std	Y+2, r1	; 0x02
     d52:	19 82       	std	Y+1, r1	; 0x01
	while ((ErrorCode = Endpoint_Read_Stream_LE(MessageHeader, sizeof(TMC_MessageHeader_t), &BytesTransferred)) ==
     d54:	ae 01       	movw	r20, r28
     d56:	4f 5f       	subi	r20, 0xFF	; 255
     d58:	5f 4f       	sbci	r21, 0xFF	; 255
     d5a:	6c e0       	ldi	r22, 0x0C	; 12
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	c8 01       	movw	r24, r16
     d60:	28 d6       	rcall	.+3152   	; 0x19b2 <Endpoint_Read_Stream_LE>
     d62:	98 2f       	mov	r25, r24
     d64:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <IsTMCBulkOUTReset>
     d68:	95 30       	cpi	r25, 0x05	; 5
     d6a:	11 f4       	brne	.+4      	; 0xd70 <ReadTMCHeader+0x3e>
	       ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (IsTMCBulkOUTReset)
     d6c:	88 23       	and	r24, r24
     d6e:	91 f3       	breq	.-28     	; 0xd54 <ReadTMCHeader+0x22>
		  break;
	}

	/* Store the new command tag value for later use */
	CurrentTransferTag = MessageHeader->Tag;
     d70:	f8 01       	movw	r30, r16
     d72:	21 81       	ldd	r18, Z+1	; 0x01
     d74:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <CurrentTransferTag>

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkOUTReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
     d78:	81 11       	cpse	r24, r1
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <ReadTMCHeader+0x4e>
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	91 11       	cpse	r25, r1
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	81 70       	andi	r24, 0x01	; 1
     d84:	01 c0       	rjmp	.+2      	; 0xd88 <ReadTMCHeader+0x56>
	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
	  return false;
     d86:	80 e0       	ldi	r24, 0x00	; 0
	/* Store the new command tag value for later use */
	CurrentTransferTag = MessageHeader->Tag;

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkOUTReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	08 95       	ret

00000d96 <WriteTMCHeader>:

bool WriteTMCHeader(TMC_MessageHeader_t* const MessageHeader)
{
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <WriteTMCHeader+0xa>
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	8c 01       	movw	r16, r24
	uint16_t BytesTransferred;
	uint8_t  ErrorCode;

	/* Set the message tag of the command header */
	MessageHeader->Tag        =  CurrentTransferTag;
     da6:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <CurrentTransferTag>
     daa:	f8 01       	movw	r30, r16
     dac:	81 83       	std	Z+1, r24	; 0x01
	MessageHeader->InverseTag = ~CurrentTransferTag;
     dae:	80 95       	com	r24
     db0:	82 83       	std	Z+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(TMC_IN_EPADDR);

	/* Send the command header to the host */
	BytesTransferred = 0;
     db8:	1a 82       	std	Y+2, r1	; 0x02
     dba:	19 82       	std	Y+1, r1	; 0x01
	while ((ErrorCode = Endpoint_Write_Stream_LE(MessageHeader, sizeof(TMC_MessageHeader_t), &BytesTransferred)) ==
     dbc:	ae 01       	movw	r20, r28
     dbe:	4f 5f       	subi	r20, 0xFF	; 255
     dc0:	5f 4f       	sbci	r21, 0xFF	; 255
     dc2:	6c e0       	ldi	r22, 0x0C	; 12
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	c8 01       	movw	r24, r16
     dc8:	ab d5       	rcall	.+2902   	; 0x1920 <Endpoint_Write_Stream_LE>
     dca:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <IsTMCBulkINReset>
     dce:	85 30       	cpi	r24, 0x05	; 5
     dd0:	11 f4       	brne	.+4      	; 0xdd6 <WriteTMCHeader+0x40>
	       ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (IsTMCBulkINReset)
     dd2:	99 23       	and	r25, r25
     dd4:	99 f3       	breq	.-26     	; 0xdbc <WriteTMCHeader+0x26>
		  break;
	}

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkINReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
     dd6:	91 11       	cpse	r25, r1
     dd8:	05 c0       	rjmp	.+10     	; 0xde4 <WriteTMCHeader+0x4e>
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	81 11       	cpse	r24, r1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	89 2f       	mov	r24, r25
     de2:	01 c0       	rjmp	.+2      	; 0xde6 <WriteTMCHeader+0x50>
     de4:	80 e0       	ldi	r24, 0x00	; 0
}
     de6:	81 70       	andi	r24, 0x01	; 1
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	08 95       	ret

00000df6 <TMC_Task>:
//	gpib_untalk_unlisten();
}

/** Function to manage TMC data transmission and reception to and from the host. */
void TMC_Task(void)
{
     df6:	bf 92       	push	r11
     df8:	cf 92       	push	r12
     dfa:	df 92       	push	r13
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	cf 58       	subi	r28, 0x8F	; 143
     e0e:	d1 09       	sbc	r29, r1
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
	bool lastmessage;
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     e1a:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
     e1e:	84 30       	cpi	r24, 0x04	; 4
     e20:	09 f0       	breq	.+2      	; 0xe24 <TMC_Task+0x2e>
     e22:	dd c1       	rjmp	.+954    	; 0x11de <TMC_Task+0x3e8>
	TMC_MessageHeader_t MessageHeader;
	uint8_t             MessagePayload[128], curlen;
	
	

	if (s_remaining_bytes_receive == 0)
     e24:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
     e28:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
     e2c:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
     e30:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
     e34:	89 2b       	or	r24, r25
     e36:	8a 2b       	or	r24, r26
     e38:	8b 2b       	or	r24, r27
     e3a:	09 f0       	breq	.+2      	; 0xe3e <TMC_Task+0x48>
     e3c:	22 c1       	rjmp	.+580    	; 0x1082 <TMC_Task+0x28c>
	{
	
		/* Try to read in a TMC message from the interface, process if one is available */
		if (ReadTMCHeader(&MessageHeader))
     e3e:	ce 01       	movw	r24, r28
     e40:	8f 57       	subi	r24, 0x7F	; 127
     e42:	9f 4f       	sbci	r25, 0xFF	; 255
     e44:	76 df       	rcall	.-276    	; 0xd32 <ReadTMCHeader>
     e46:	88 23       	and	r24, r24
     e48:	09 f4       	brne	.+2      	; 0xe4c <TMC_Task+0x56>
     e4a:	7f c1       	rjmp	.+766    	; 0x114a <TMC_Task+0x354>
		{
		dbg++;
     e4c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     e50:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
     e5a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
		
			/* Indicate busy */
			//LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

			switch (MessageHeader.MessageID)
     e5e:	cf 57       	subi	r28, 0x7F	; 127
     e60:	df 4f       	sbci	r29, 0xFF	; 255
     e62:	88 81       	ld	r24, Y
     e64:	c1 58       	subi	r28, 0x81	; 129
     e66:	d0 40       	sbci	r29, 0x00	; 0
     e68:	82 30       	cpi	r24, 0x02	; 2
     e6a:	09 f4       	brne	.+2      	; 0xe6e <TMC_Task+0x78>
     e6c:	a0 c0       	rjmp	.+320    	; 0xfae <TMC_Task+0x1b8>
     e6e:	80 38       	cpi	r24, 0x80	; 128
     e70:	21 f0       	breq	.+8      	; 0xe7a <TMC_Task+0x84>
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	09 f0       	breq	.+2      	; 0xe78 <TMC_Task+0x82>
     e76:	ff c0       	rjmp	.+510    	; 0x1076 <TMC_Task+0x280>
     e78:	19 c0       	rjmp	.+50     	; 0xeac <TMC_Task+0xb6>
			{
				case TMC_MESSAGEID_TRIGGER:
					gpib_ren(1); /* ensure that remote control is enabled */
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	18 d3       	rcall	.+1584   	; 0x14ae <gpib_ren>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     e7e:	80 e5       	ldi	r24, 0x50	; 80
     e80:	93 ec       	ldi	r25, 0xC3	; 195
     e82:	a0 e0       	ldi	r26, 0x00	; 0
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <timeout_val>
     e8a:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <timeout_val+0x1>
     e8e:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <timeout_val+0x2>
     e92:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <timeout_val+0x3>
			switch (MessageHeader.MessageID)
			{
				case TMC_MESSAGEID_TRIGGER:
					gpib_ren(1); /* ensure that remote control is enabled */
					timeout_start(50000); /* 0.5s timeout*/
					gpib_trigger(gpib_addr, is_timedout);
     e96:	65 e2       	ldi	r22, 0x25	; 37
     e98:	71 e0       	ldi	r23, 0x01	; 1
     e9a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     e9e:	bd d3       	rcall	.+1914   	; 0x161a <gpib_trigger>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ea0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ea4:	8b 77       	andi	r24, 0x7B	; 123
     ea6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     eaa:	4f c1       	rjmp	.+670    	; 0x114a <TMC_Task+0x354>
					Endpoint_ClearOUT();					
					break;
				case TMC_MESSAGEID_DEV_DEP_MSG_OUT:
					s_remaining_bytes_receive = MessageHeader.TransferSize;
     eac:	cb 57       	subi	r28, 0x7B	; 123
     eae:	df 4f       	sbci	r29, 0xFF	; 255
     eb0:	38 81       	ld	r19, Y
     eb2:	c5 58       	subi	r28, 0x85	; 133
     eb4:	d0 40       	sbci	r29, 0x00	; 0
     eb6:	ca 57       	subi	r28, 0x7A	; 122
     eb8:	df 4f       	sbci	r29, 0xFF	; 255
     eba:	28 81       	ld	r18, Y
     ebc:	c6 58       	subi	r28, 0x86	; 134
     ebe:	d0 40       	sbci	r29, 0x00	; 0
     ec0:	c9 57       	subi	r28, 0x79	; 121
     ec2:	df 4f       	sbci	r29, 0xFF	; 255
     ec4:	98 81       	ld	r25, Y
     ec6:	c7 58       	subi	r28, 0x87	; 135
     ec8:	d0 40       	sbci	r29, 0x00	; 0
     eca:	c8 57       	subi	r28, 0x78	; 120
     ecc:	df 4f       	sbci	r29, 0xFF	; 255
     ece:	88 81       	ld	r24, Y
     ed0:	c8 58       	subi	r28, 0x88	; 136
     ed2:	d0 40       	sbci	r29, 0x00	; 0
     ed4:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <s_remaining_bytes_receive>
     ed8:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <s_remaining_bytes_receive+0x1>
     edc:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <s_remaining_bytes_receive+0x2>
     ee0:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <s_remaining_bytes_receive+0x3>
					
					LastTransferLength = 0;
     ee4:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <LastTransferLength+0x1>
     ee8:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <LastTransferLength>
					curlen = MIN(TMC_IO_EPSIZE-sizeof(TMC_MessageHeader_t), MessageHeader.TransferSize);
     eec:	c3 2e       	mov	r12, r19
     eee:	d2 2e       	mov	r13, r18
     ef0:	e9 2e       	mov	r14, r25
     ef2:	f8 2e       	mov	r15, r24
     ef4:	85 e3       	ldi	r24, 0x35	; 53
     ef6:	c8 16       	cp	r12, r24
     ef8:	d1 04       	cpc	r13, r1
     efa:	e1 04       	cpc	r14, r1
     efc:	f1 04       	cpc	r15, r1
     efe:	28 f0       	brcs	.+10     	; 0xf0a <TMC_Task+0x114>
     f00:	94 e3       	ldi	r25, 0x34	; 52
     f02:	c9 2e       	mov	r12, r25
     f04:	d1 2c       	mov	r13, r1
     f06:	e1 2c       	mov	r14, r1
     f08:	f1 2c       	mov	r15, r1
     f0a:	bc 2c       	mov	r11, r12
					//
					while (Endpoint_Read_Stream_LE(MessagePayload, curlen, &LastTransferLength) ==
     f0c:	47 e6       	ldi	r20, 0x67	; 103
     f0e:	51 e0       	ldi	r21, 0x01	; 1
     f10:	b6 01       	movw	r22, r12
     f12:	ce 01       	movw	r24, r28
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	4d d5       	rcall	.+2714   	; 0x19b2 <Endpoint_Read_Stream_LE>
     f18:	85 30       	cpi	r24, 0x05	; 5
     f1a:	21 f4       	brne	.+8      	; 0xf24 <TMC_Task+0x12e>
						   ENDPOINT_RWSTREAM_IncompleteTransfer)
					{
						if (IsTMCBulkOUTReset)
     f1c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <IsTMCBulkOUTReset>
     f20:	88 23       	and	r24, r24
     f22:	a1 f3       	breq	.-24     	; 0xf0c <TMC_Task+0x116>
						  break;
					}					
					
					s_remaining_bytes_receive -= curlen;
     f24:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
     f28:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
     f2c:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
     f30:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
     f34:	8c 19       	sub	r24, r12
     f36:	9d 09       	sbc	r25, r13
     f38:	ae 09       	sbc	r26, r14
     f3a:	bf 09       	sbc	r27, r15
     f3c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <s_remaining_bytes_receive>
     f40:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <s_remaining_bytes_receive+0x1>
     f44:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <s_remaining_bytes_receive+0x2>
     f48:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <s_remaining_bytes_receive+0x3>
					
					TMC_eom = (MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction != 0);
     f4c:	c7 57       	subi	r28, 0x77	; 119
     f4e:	df 4f       	sbci	r29, 0xFF	; 255
     f50:	28 81       	ld	r18, Y
     f52:	c9 58       	subi	r28, 0x89	; 137
     f54:	d0 40       	sbci	r29, 0x00	; 0
     f56:	31 e0       	ldi	r19, 0x01	; 1
     f58:	21 11       	cpse	r18, r1
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <TMC_Task+0x168>
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <TMC_eom>
					lastmessage =  TMC_eom && (s_remaining_bytes_receive==0);
     f62:	22 23       	and	r18, r18
     f64:	29 f0       	breq	.+10     	; 0xf70 <TMC_Task+0x17a>
     f66:	21 e0       	ldi	r18, 0x01	; 1
     f68:	89 2b       	or	r24, r25
     f6a:	8a 2b       	or	r24, r26
     f6c:	8b 2b       	or	r24, r27
     f6e:	09 f0       	breq	.+2      	; 0xf72 <TMC_Task+0x17c>
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	21 70       	andi	r18, 0x01	; 1
     f74:	c1 57       	subi	r28, 0x71	; 113
     f76:	df 4f       	sbci	r29, 0xFF	; 255
     f78:	28 83       	st	Y, r18
     f7a:	cf 58       	subi	r28, 0x8F	; 143
     f7c:	d0 40       	sbci	r29, 0x00	; 0
					ProcessSentMessage(MessagePayload, curlen, TMC_LastMessageComplete, lastmessage, tmc_gpib_write_timedout);
     f7e:	04 e4       	ldi	r16, 0x44	; 68
     f80:	11 e0       	ldi	r17, 0x01	; 1
     f82:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <TMC_LastMessageComplete>
     f86:	6b 2d       	mov	r22, r11
     f88:	ce 01       	movw	r24, r28
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	12 de       	rcall	.-988    	; 0xbb2 <ProcessSentMessage>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f8e:	83 e0       	ldi	r24, 0x03	; 3
     f90:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f94:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f98:	8b 77       	andi	r24, 0x7B	; 123
     f9a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					
					/* Select the Data Out endpoint, this has to be done because the timeout function cal select the control endpoint */
					Endpoint_SelectEndpoint(TMC_OUT_EPADDR);
					Endpoint_ClearOUT();
					
					TMC_LastMessageComplete = lastmessage;
     f9e:	c1 57       	subi	r28, 0x71	; 113
     fa0:	df 4f       	sbci	r29, 0xFF	; 255
     fa2:	88 81       	ld	r24, Y
     fa4:	cf 58       	subi	r28, 0x8F	; 143
     fa6:	d0 40       	sbci	r29, 0x00	; 0
     fa8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <TMC_LastMessageComplete>
					break;
     fac:	ce c0       	rjmp	.+412    	; 0x114a <TMC_Task+0x354>
     fae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fb2:	8b 77       	andi	r24, 0x7B	; 123
     fb4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				case TMC_MESSAGEID_DEV_DEP_MSG_IN:
					Endpoint_ClearOUT();
					curlen = MIN(TMC_IO_EPSIZE-sizeof(TMC_MessageHeader_t) -1, MessageHeader.TransferSize);
					MessageHeader.TransferSize = GetNextMessage(MessagePayload, curlen, TMC_InLastMessageComplete, &lastmessage, tmc_gpib_read_timedout);
     fb8:	cb 57       	subi	r28, 0x7B	; 123
     fba:	df 4f       	sbci	r29, 0xFF	; 255
     fbc:	68 81       	ld	r22, Y
     fbe:	79 81       	ldd	r23, Y+1	; 0x01
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	9b 81       	ldd	r25, Y+3	; 0x03
     fc4:	c5 58       	subi	r28, 0x85	; 133
     fc6:	d0 40       	sbci	r29, 0x00	; 0
     fc8:	64 33       	cpi	r22, 0x34	; 52
     fca:	71 05       	cpc	r23, r1
     fcc:	81 05       	cpc	r24, r1
     fce:	91 05       	cpc	r25, r1
     fd0:	20 f0       	brcs	.+8      	; 0xfda <TMC_Task+0x1e4>
     fd2:	63 e3       	ldi	r22, 0x33	; 51
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0c e4       	ldi	r16, 0x4C	; 76
     fdc:	11 e0       	ldi	r17, 0x01	; 1
     fde:	9e 01       	movw	r18, r28
     fe0:	21 57       	subi	r18, 0x71	; 113
     fe2:	3f 4f       	sbci	r19, 0xFF	; 255
     fe4:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <TMC_InLastMessageComplete>
     fe8:	ce 01       	movw	r24, r28
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	2f de       	rcall	.-930    	; 0xc4c <GetNextMessage>
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	a0 e0       	ldi	r26, 0x00	; 0
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	cb 57       	subi	r28, 0x7B	; 123
     ff6:	df 4f       	sbci	r29, 0xFF	; 255
     ff8:	88 83       	st	Y, r24
     ffa:	99 83       	std	Y+1, r25	; 0x01
     ffc:	aa 83       	std	Y+2, r26	; 0x02
     ffe:	bb 83       	std	Y+3, r27	; 0x03
    1000:	c5 58       	subi	r28, 0x85	; 133
    1002:	d0 40       	sbci	r29, 0x00	; 0
					TMC_InLastMessageComplete = lastmessage;
    1004:	c1 57       	subi	r28, 0x71	; 113
    1006:	df 4f       	sbci	r29, 0xFF	; 255
    1008:	88 81       	ld	r24, Y
    100a:	cf 58       	subi	r28, 0x8F	; 143
    100c:	d0 40       	sbci	r29, 0x00	; 0
    100e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <TMC_InLastMessageComplete>
					
					MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction = lastmessage;
    1012:	c7 57       	subi	r28, 0x77	; 119
    1014:	df 4f       	sbci	r29, 0xFF	; 255
    1016:	88 83       	st	Y, r24
    1018:	c9 58       	subi	r28, 0x89	; 137
    101a:	d0 40       	sbci	r29, 0x00	; 0
					if (!IsTMCBulkINReset)
    101c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <IsTMCBulkINReset>
    1020:	81 11       	cpse	r24, r1
						WriteTMCHeader(&MessageHeader);					
    1022:	04 c0       	rjmp	.+8      	; 0x102c <TMC_Task+0x236>
    1024:	ce 01       	movw	r24, r28
    1026:	8f 57       	subi	r24, 0x7F	; 127
    1028:	9f 4f       	sbci	r25, 0xFF	; 255
    102a:	b5 de       	rcall	.-662    	; 0xd96 <WriteTMCHeader>
					
					LastTransferLength = 0;
    102c:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <LastTransferLength+0x1>
    1030:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <LastTransferLength>
					if (!IsTMCBulkINReset)
    1034:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <IsTMCBulkINReset>
    1038:	88 23       	and	r24, r24
    103a:	79 f0       	breq	.+30     	; 0x105a <TMC_Task+0x264>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1042:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1046:	8e 77       	andi	r24, 0x7E	; 126
    1048:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

					/* Also in case of a timeout, the host does not expire a Bulk IN IRP, so we still need to commit an empty endpoint to retire the IRP */
					Endpoint_SelectEndpoint(TMC_IN_EPADDR);
					Endpoint_ClearIN();
					
					if (IsTMCBulkINReset)
    104c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <IsTMCBulkINReset>
    1050:	88 23       	and	r24, r24
    1052:	09 f4       	brne	.+2      	; 0x1056 <TMC_Task+0x260>
					{
						TMC_resetstates();
    1054:	7a c0       	rjmp	.+244    	; 0x114a <TMC_Task+0x354>
    1056:	5f de       	rcall	.-834    	; 0xd16 <TMC_resetstates>
    1058:	78 c0       	rjmp	.+240    	; 0x114a <TMC_Task+0x354>
						WriteTMCHeader(&MessageHeader);					
					
					LastTransferLength = 0;
					if (!IsTMCBulkINReset)
					{
						while (Endpoint_Write_Stream_LE(MessagePayload, MessageHeader.TransferSize, &LastTransferLength) ==
    105a:	cb 57       	subi	r28, 0x7B	; 123
    105c:	df 4f       	sbci	r29, 0xFF	; 255
    105e:	68 81       	ld	r22, Y
    1060:	79 81       	ldd	r23, Y+1	; 0x01
    1062:	c5 58       	subi	r28, 0x85	; 133
    1064:	d0 40       	sbci	r29, 0x00	; 0
    1066:	47 e6       	ldi	r20, 0x67	; 103
    1068:	51 e0       	ldi	r21, 0x01	; 1
    106a:	ce 01       	movw	r24, r28
    106c:	01 96       	adiw	r24, 0x01	; 1
    106e:	58 d4       	rcall	.+2224   	; 0x1920 <Endpoint_Write_Stream_LE>
    1070:	85 30       	cpi	r24, 0x05	; 5
    1072:	01 f3       	breq	.-64     	; 0x1034 <TMC_Task+0x23e>
    1074:	e3 cf       	rjmp	.-58     	; 0x103c <TMC_Task+0x246>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1076:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    107a:	80 62       	ori	r24, 0x20	; 32
    107c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1080:	64 c0       	rjmp	.+200    	; 0x114a <TMC_Task+0x354>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1082:	83 e0       	ldi	r24, 0x03	; 3
    1084:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1088:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
			/* Select the Data Out endpoint */
		Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

		/* Abort if no command has been sent from the host */
		if (Endpoint_IsOUTReceived())
    108c:	82 ff       	sbrs	r24, 2
    108e:	5d c0       	rjmp	.+186    	; 0x114a <TMC_Task+0x354>
		{
			LastTransferLength = 0;
    1090:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <LastTransferLength+0x1>
    1094:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <LastTransferLength>
			
			curlen = TMC_IO_EPSIZE;
			if (s_remaining_bytes_receive < TMC_IO_EPSIZE)
    1098:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
    109c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
    10a0:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
    10a4:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
    10a8:	80 34       	cpi	r24, 0x40	; 64
    10aa:	91 05       	cpc	r25, r1
    10ac:	a1 05       	cpc	r26, r1
    10ae:	b1 05       	cpc	r27, r1
    10b0:	10 f4       	brcc	.+4      	; 0x10b6 <TMC_Task+0x2c0>
			{
				curlen = s_remaining_bytes_receive;
    10b2:	f8 2e       	mov	r15, r24
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <TMC_Task+0x2c4>
		/* Abort if no command has been sent from the host */
		if (Endpoint_IsOUTReceived())
		{
			LastTransferLength = 0;
			
			curlen = TMC_IO_EPSIZE;
    10b6:	80 e4       	ldi	r24, 0x40	; 64
			{
				curlen = s_remaining_bytes_receive;
			}
			
			//
			while (Endpoint_Read_Stream_LE(MessagePayload, curlen, &LastTransferLength) ==
    10b8:	f8 2e       	mov	r15, r24
    10ba:	cf 2c       	mov	r12, r15
    10bc:	d1 2c       	mov	r13, r1
    10be:	47 e6       	ldi	r20, 0x67	; 103
    10c0:	51 e0       	ldi	r21, 0x01	; 1
    10c2:	b6 01       	movw	r22, r12
    10c4:	ce 01       	movw	r24, r28
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	74 d4       	rcall	.+2280   	; 0x19b2 <Endpoint_Read_Stream_LE>
    10ca:	85 30       	cpi	r24, 0x05	; 5
    10cc:	21 f4       	brne	.+8      	; 0x10d6 <TMC_Task+0x2e0>
				   ENDPOINT_RWSTREAM_IncompleteTransfer)
			{
				if (IsTMCBulkOUTReset)
    10ce:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <IsTMCBulkOUTReset>
    10d2:	88 23       	and	r24, r24
    10d4:	a1 f3       	breq	.-24     	; 0x10be <TMC_Task+0x2c8>
				  break;
			}
			s_remaining_bytes_receive -= curlen;
    10d6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
    10da:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
    10de:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
    10e2:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
    10e6:	8f 19       	sub	r24, r15
    10e8:	91 09       	sbc	r25, r1
    10ea:	a1 09       	sbc	r26, r1
    10ec:	b1 09       	sbc	r27, r1
    10ee:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <s_remaining_bytes_receive>
    10f2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <s_remaining_bytes_receive+0x1>
    10f6:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <s_remaining_bytes_receive+0x2>
    10fa:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <s_remaining_bytes_receive+0x3>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1102:	8b 77       	andi	r24, 0x7B	; 123
    1104:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			Endpoint_ClearOUT();
			
			lastmessage = TMC_eom && (s_remaining_bytes_receive==0);
    1108:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <TMC_eom>
    110c:	88 23       	and	r24, r24
    110e:	69 f0       	breq	.+26     	; 0x112a <TMC_Task+0x334>
    1110:	21 e0       	ldi	r18, 0x01	; 1
    1112:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
    1116:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
    111a:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
    111e:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
    1122:	89 2b       	or	r24, r25
    1124:	8a 2b       	or	r24, r26
    1126:	8b 2b       	or	r24, r27
    1128:	09 f0       	breq	.+2      	; 0x112c <TMC_Task+0x336>
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	21 70       	andi	r18, 0x01	; 1
    112e:	c1 57       	subi	r28, 0x71	; 113
    1130:	df 4f       	sbci	r29, 0xFF	; 255
    1132:	28 83       	st	Y, r18
    1134:	cf 58       	subi	r28, 0x8F	; 143
			TMC_LastMessageComplete = lastmessage;
    1136:	d0 40       	sbci	r29, 0x00	; 0
    1138:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <TMC_LastMessageComplete>
			ProcessSentMessage(MessagePayload, curlen, false, lastmessage, tmc_gpib_write_timedout);
    113c:	04 e4       	ldi	r16, 0x44	; 68
    113e:	11 e0       	ldi	r17, 0x01	; 1
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	6f 2d       	mov	r22, r15
    1144:	ce 01       	movw	r24, r28
    1146:	01 96       	adiw	r24, 0x01	; 1
		}
	}
	
	if (handleSDC)
    1148:	34 dd       	rcall	.-1432   	; 0xbb2 <ProcessSentMessage>
    114a:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <handleSDC>
    114e:	88 23       	and	r24, r24
	{
		gpib_ren(1); /* ensure that remote control is enabled */
    1150:	a9 f0       	breq	.+42     	; 0x117c <TMC_Task+0x386>
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	ac d1       	rcall	.+856    	; 0x14ae <gpib_ren>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
    1156:	80 e5       	ldi	r24, 0x50	; 80
    1158:	93 ec       	ldi	r25, 0xC3	; 195
    115a:	a0 e0       	ldi	r26, 0x00	; 0
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <timeout_val>
    1162:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <timeout_val+0x1>
    1166:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <timeout_val+0x2>
    116a:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <timeout_val+0x3>
	
	if (handleSDC)
	{
		gpib_ren(1); /* ensure that remote control is enabled */
		timeout_start(50000); /* 0.5s timeout*/
		gpib_sdc(gpib_addr, is_timedout);
    116e:	65 e2       	ldi	r22, 0x25	; 37
    1170:	71 e0       	ldi	r23, 0x01	; 1
    1172:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
    1176:	3c d2       	rcall	.+1144   	; 0x15f0 <gpib_sdc>

		handleSDC = false;
    1178:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <handleSDC>
	}
	
	if (handleRSTB)
    117c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <handleRSTB>
    1180:	88 23       	and	r24, r24
    1182:	09 f1       	breq	.+66     	; 0x11c6 <TMC_Task+0x3d0>
	{
		uint8_t  ErrorCode;
		uint16_t BytesTransferred;
		uint8_t  notdata[2];
		
		handleRSTB = false;
    1184:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <handleRSTB>
		
		//Endpoint_ClearOUT();
		
		notdata[0] = RSTB_btag | 0x80;
    1188:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <RSTB_btag>
    118c:	80 68       	ori	r24, 0x80	; 128
    118e:	c3 57       	subi	r28, 0x73	; 115
    1190:	df 4f       	sbci	r29, 0xFF	; 255
    1192:	88 83       	st	Y, r24
    1194:	cd 58       	subi	r28, 0x8D	; 141
    1196:	d0 40       	sbci	r29, 0x00	; 0
		notdata[1] = RSTB_status;
    1198:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <RSTB_status>
    119c:	c2 57       	subi	r28, 0x72	; 114
    119e:	df 4f       	sbci	r29, 0xFF	; 255
    11a0:	88 83       	st	Y, r24
    11a2:	ce 58       	subi	r28, 0x8E	; 142
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11a4:	d0 40       	sbci	r29, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		Endpoint_SelectEndpoint(TMC_NOTIFICATION_EPADDR);
		Endpoint_Write_Stream_LE(notdata, sizeof(notdata), NULL);
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	62 e0       	ldi	r22, 0x02	; 2
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	ce 01       	movw	r24, r28
    11b6:	83 57       	subi	r24, 0x73	; 115
    11b8:	9f 4f       	sbci	r25, 0xFF	; 255
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11ba:	b2 d3       	rcall	.+1892   	; 0x1920 <Endpoint_Write_Stream_LE>
    11bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11c0:	8e 77       	andi	r24, 0x7E	; 126
    11c2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		//}
		//Endpoint_SelectEndpoint(TMC_NOTIFICATION_EPADDR);
		Endpoint_ClearIN();		
	}

	if (IsTMCBulkOUTReset || IsTMCBulkINReset)
    11c6:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <IsTMCBulkOUTReset>
    11ca:	81 11       	cpse	r24, r1
    11cc:	03 c0       	rjmp	.+6      	; 0x11d4 <TMC_Task+0x3de>
    11ce:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <IsTMCBulkINReset>
		TMC_resetstates();
    11d2:	81 11       	cpse	r24, r1
    11d4:	a0 dd       	rcall	.-1216   	; 0xd16 <TMC_resetstates>
	
	/* All pending data has been processed - reset the data abort flags */
	IsTMCBulkINReset  = false;
    11d6:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <IsTMCBulkINReset>
	IsTMCBulkOUTReset = false;
    11da:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <IsTMCBulkOUTReset>
}
    11de:	c1 57       	subi	r28, 0x71	; 113
    11e0:	df 4f       	sbci	r29, 0xFF	; 255
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	df 90       	pop	r13
    11fa:	cf 90       	pop	r12
    11fc:	bf 90       	pop	r11
    11fe:	08 95       	ret

00001200 <main>:
int main(void)
{
	uint8_t prevaddr;

	//mcusr_mirror = MCUSR; 
	MCUSR = 0; 
    1200:	14 be       	out	0x34, r1	; 52
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	a8 95       	wdr
    1208:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    120c:	88 61       	ori	r24, 0x18	; 24
    120e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1212:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1216:	0f be       	out	0x3f, r0	; 63
	wdt_disable(); 
	
	PORTB |=  (1<<2); /* PB2 = PULLUP */
    1218:	2a 9a       	sbi	0x05, 2	; 5
	DDRB  &= ~(1<<2); /* PB2 = input*/
    121a:	22 98       	cbi	0x04, 2	; 4
	
	SetupHardware();
    121c:	ba da       	rcall	.-2700   	; 0x792 <SetupHardware>
	
	gpib_init();
    121e:	61 d1       	rcall	.+706    	; 0x14e2 <gpib_init>
    1220:	f9 99       	sbic	0x1f, 1	; 31
	
	/* apply settings from eeprom */
	eeprom_busy_wait();	
    1222:	fe cf       	rjmp	.-4      	; 0x1220 <main+0x20>
    1224:	89 e6       	ldi	r24, 0x69	; 105
	gpib_set_readtermination(eeprom_read_byte((const uint8_t *)105));
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 cd 11 	call	0x239a	; 0x239a <eeprom_read_byte>
    122c:	0c d3       	rcall	.+1560   	; 0x1846 <gpib_set_readtermination>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    122e:	78 94       	sei
	
	
	//LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();
	
	while (!gpib_is_connected())
    1230:	37 d1       	rcall	.+622    	; 0x14a0 <gpib_is_connected>
    1232:	81 11       	cpse	r24, r1
    1234:	17 c0       	rjmp	.+46     	; 0x1264 <main+0x64>
    1236:	2f ef       	ldi	r18, 0xFF	; 255
    1238:	84 e3       	ldi	r24, 0x34	; 52
    123a:	9c e0       	ldi	r25, 0x0C	; 12
    123c:	21 50       	subi	r18, 0x01	; 1
    123e:	80 40       	sbci	r24, 0x00	; 0
    1240:	90 40       	sbci	r25, 0x00	; 0
    1242:	e1 f7       	brne	.-8      	; 0x123c <main+0x3c>
    1244:	00 c0       	rjmp	.+0      	; 0x1246 <main+0x46>
    1246:	00 00       	nop
    1248:	8d 9a       	sbi	0x11, 5	; 17
	{
		_delay_ms(250);
		LED(1);
    124a:	ef ef       	ldi	r30, 0xFF	; 255
    124c:	f4 e3       	ldi	r31, 0x34	; 52
    124e:	2c e0       	ldi	r18, 0x0C	; 12
    1250:	e1 50       	subi	r30, 0x01	; 1
    1252:	f0 40       	sbci	r31, 0x00	; 0
    1254:	20 40       	sbci	r18, 0x00	; 0
    1256:	e1 f7       	brne	.-8      	; 0x1250 <main+0x50>
    1258:	00 c0       	rjmp	.+0      	; 0x125a <main+0x5a>
    125a:	00 00       	nop
		_delay_ms(250);
		LED(0);
		check_bootloaderEntry();
    125c:	8d 98       	cbi	0x11, 5	; 17
    125e:	7d da       	rcall	.-2822   	; 0x75a <check_bootloaderEntry>
    1260:	e7 cf       	rjmp	.-50     	; 0x1230 <main+0x30>
			LED(0);
			_delay_ms(500);
			wdt_enable(WDTO_250MS);	
			while (1);
		}
		check_bootloaderEntry();
    1262:	7b da       	rcall	.-2826   	; 0x75a <check_bootloaderEntry>
    1264:	44 d8       	rcall	.-3960   	; 0x2ee <findGpibdevice>
		LED(0);
		check_bootloaderEntry();
	}
	
	/* physically GPIB is connected, now check if any GPIB address is responsive */
	while (!findGpibdevice())
    1266:	81 11       	cpse	r24, r1
    1268:	2c c0       	rjmp	.+88     	; 0x12c2 <main+0xc2>
    126a:	8f ef       	ldi	r24, 0xFF	; 255
    126c:	91 ee       	ldi	r25, 0xE1	; 225
    126e:	e4 e0       	ldi	r30, 0x04	; 4
    1270:	81 50       	subi	r24, 0x01	; 1
    1272:	90 40       	sbci	r25, 0x00	; 0
    1274:	e0 40       	sbci	r30, 0x00	; 0
    1276:	e1 f7       	brne	.-8      	; 0x1270 <main+0x70>
    1278:	00 c0       	rjmp	.+0      	; 0x127a <main+0x7a>
    127a:	00 00       	nop
    127c:	8d 9a       	sbi	0x11, 5	; 17
    127e:	ff ef       	ldi	r31, 0xFF	; 255
	{
		_delay_ms(100);
		LED(1);
    1280:	21 ee       	ldi	r18, 0xE1	; 225
    1282:	84 e0       	ldi	r24, 0x04	; 4
    1284:	f1 50       	subi	r31, 0x01	; 1
    1286:	20 40       	sbci	r18, 0x00	; 0
    1288:	80 40       	sbci	r24, 0x00	; 0
    128a:	e1 f7       	brne	.-8      	; 0x1284 <main+0x84>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <main+0x8e>
    128e:	00 00       	nop
    1290:	8d 98       	cbi	0x11, 5	; 17
		_delay_ms(100);
		LED(0);
    1292:	06 d1       	rcall	.+524    	; 0x14a0 <gpib_is_connected>
		if (!gpib_is_connected()) /* we want to reset here if the device is unplugged */
    1294:	81 11       	cpse	r24, r1
    1296:	e5 cf       	rjmp	.-54     	; 0x1262 <main+0x62>
    1298:	8d 98       	cbi	0x11, 5	; 17
    129a:	9f ef       	ldi	r25, 0xFF	; 255
		{
			LED(0);
    129c:	e9 e6       	ldi	r30, 0x69	; 105
    129e:	f8 e1       	ldi	r31, 0x18	; 24
    12a0:	91 50       	subi	r25, 0x01	; 1
    12a2:	e0 40       	sbci	r30, 0x00	; 0
    12a4:	f0 40       	sbci	r31, 0x00	; 0
    12a6:	e1 f7       	brne	.-8      	; 0x12a0 <main+0xa0>
    12a8:	00 c0       	rjmp	.+0      	; 0x12aa <main+0xaa>
    12aa:	00 00       	nop
    12ac:	9c e0       	ldi	r25, 0x0C	; 12
    12ae:	88 e1       	ldi	r24, 0x18	; 24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	a8 95       	wdr
    12b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    12c0:	ff cf       	rjmp	.-2      	; 0x12c0 <main+0xc0>
    12c2:	f9 99       	sbic	0x1f, 1	; 31
    12c4:	fe cf       	rjmp	.-4      	; 0x12c2 <main+0xc2>
			while (1);
		}
		check_bootloaderEntry();
	}; /* Identify the GPIB Address of the connected GPIB device */
	
	eeprom_busy_wait();
    12c6:	88 e6       	ldi	r24, 0x68	; 104
    12c8:	90 e0       	ldi	r25, 0x00	; 0
	if (eeprom_read_byte((const uint8_t *)104) != 0x01)
    12ca:	0e 94 cd 11 	call	0x239a	; 0x239a <eeprom_read_byte>
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	81 f1       	breq	.+96     	; 0x1332 <main+0x132>
    12d2:	f9 99       	sbic	0x1f, 1	; 31
	{
		/* found a responsive GPIB address, now setup USB descriptor with *IDN? or ID? command response */
		eeprom_busy_wait();
    12d4:	fe cf       	rjmp	.-4      	; 0x12d2 <main+0xd2>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
		prevaddr = eeprom_read_byte((uint8_t*)0); /* read previous gpib address */
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	0e 94 cd 11 	call	0x239a	; 0x239a <eeprom_read_byte>
    12de:	c8 2f       	mov	r28, r24
    12e0:	11 d8       	rcall	.-4062   	; 0x304 <identifyGpibDevice>
		if (identifyGpibDevice())
    12e2:	88 23       	and	r24, r24
    12e4:	99 f0       	breq	.+38     	; 0x130c <main+0x10c>
    12e6:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <gpib_addr>
		{ /* received a string over GPIB => Store it in EEPROM, if it changed */
			uint8_t *pdat, i;
			
			/* update gpib address and usb string descriptor in eeprom */
			eeprom_update_if_changed(0, gpib_addr);
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	38 da       	rcall	.-2960   	; 0x760 <eeprom_update_if_changed>
    12f0:	0e e7       	ldi	r16, 0x7E	; 126
    12f2:	11 e0       	ldi	r17, 0x01	; 1
    12f4:	c0 e0       	ldi	r28, 0x00	; 0
    12f6:	d0 e0       	ldi	r29, 0x00	; 0
    12f8:	f8 01       	movw	r30, r16
			pdat = (void *)&tmc_serial_string;
			for (i=0; i<sizeof(tmc_serial_string); i++)
			{
				eeprom_update_if_changed(1+i, *pdat++);
    12fa:	61 91       	ld	r22, Z+
    12fc:	8f 01       	movw	r16, r30
    12fe:	21 96       	adiw	r28, 0x01	; 1
    1300:	ce 01       	movw	r24, r28
    1302:	2e da       	rcall	.-2980   	; 0x760 <eeprom_update_if_changed>
    1304:	c6 36       	cpi	r28, 0x66	; 102
    1306:	d1 05       	cpc	r29, r1
			uint8_t *pdat, i;
			
			/* update gpib address and usb string descriptor in eeprom */
			eeprom_update_if_changed(0, gpib_addr);
			pdat = (void *)&tmc_serial_string;
			for (i=0; i<sizeof(tmc_serial_string); i++)
    1308:	b9 f7       	brne	.-18     	; 0x12f8 <main+0xf8>
    130a:	23 c0       	rjmp	.+70     	; 0x1352 <main+0x152>
    130c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
				eeprom_update_if_changed(1+i, *pdat++);
			}
		}
		else
		{ /* received NO string over GPIB => Check, if the GPIB addr matches the one in eeprom, then report EEProm string! */
			if (prevaddr == gpib_addr)
    1310:	c8 13       	cpse	r28, r24
    1312:	1f c0       	rjmp	.+62     	; 0x1352 <main+0x152>
    1314:	0e e7       	ldi	r16, 0x7E	; 126
    1316:	11 e0       	ldi	r17, 0x01	; 1
    1318:	c1 e0       	ldi	r28, 0x01	; 1
    131a:	d0 e0       	ldi	r29, 0x00	; 0
    131c:	ce 01       	movw	r24, r28
    131e:	0e 94 cd 11 	call	0x239a	; 0x239a <eeprom_read_byte>

				/* update gpib address and usb string descriptor in eeprom */
				pdat = (void *)&tmc_serial_string;
				for (i=0; i<sizeof(tmc_serial_string); i++)
				{
					*pdat++ = eeprom_read_byte((uint8_t*)(1+i));
    1322:	f8 01       	movw	r30, r16
    1324:	81 93       	st	Z+, r24
    1326:	8f 01       	movw	r16, r30
    1328:	21 96       	adiw	r28, 0x01	; 1
    132a:	c7 36       	cpi	r28, 0x67	; 103
			{
				uint8_t *pdat, i;

				/* update gpib address and usb string descriptor in eeprom */
				pdat = (void *)&tmc_serial_string;
				for (i=0; i<sizeof(tmc_serial_string); i++)
    132c:	d1 05       	cpc	r29, r1
    132e:	b1 f7       	brne	.-20     	; 0x131c <main+0x11c>
    1330:	10 c0       	rjmp	.+32     	; 0x1352 <main+0x152>
    1332:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	else /* user disabled fully automated detection mode */
	{
		TMC_SetInternalSerial(true);
    1334:	0e 94 a8 00 	call	0x150	; 0x150 <TMC_SetInternalSerial>
    1338:	80 e0       	ldi	r24, 0x00	; 0
		gpib_ren(false);
    133a:	b9 d0       	rcall	.+370    	; 0x14ae <gpib_ren>
    133c:	ff ef       	ldi	r31, 0xFF	; 255
    133e:	21 ee       	ldi	r18, 0xE1	; 225
    1340:	84 e0       	ldi	r24, 0x04	; 4
    1342:	f1 50       	subi	r31, 0x01	; 1
    1344:	20 40       	sbci	r18, 0x00	; 0
    1346:	80 40       	sbci	r24, 0x00	; 0
    1348:	e1 f7       	brne	.-8      	; 0x1342 <main+0x142>
    134a:	00 c0       	rjmp	.+0      	; 0x134c <main+0x14c>
		_delay_ms(100);
		gpib_ren(true);
    134c:	00 00       	nop
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	ae d0       	rcall	.+348    	; 0x14ae <gpib_ren>
	}

	/* all fine, now kickoff connect to USB to be able to communicate! */
	LED(1);
    1352:	8d 9a       	sbi	0x11, 5	; 17
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1354:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1358:	8e 7f       	andi	r24, 0xFE	; 254
    135a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	USB_Attach();
	
	for (;;)
	{
		TMC_Task();
    135e:	4b dd       	rcall	.-1386   	; 0xdf6 <TMC_Task>
    1360:	fc d9       	rcall	.-3080   	; 0x75a <check_bootloaderEntry>
		
		check_bootloaderEntry();
    1362:	9e d0       	rcall	.+316    	; 0x14a0 <gpib_is_connected>
    1364:	81 11       	cpse	r24, r1
		
		if (!gpib_is_connected()) /* check, if gpib is disconnected */
    1366:	1a c0       	rjmp	.+52     	; 0x139c <main+0x19c>
    1368:	8d 98       	cbi	0x11, 5	; 17
    136a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
		{ /* when we get here, reset the MCU and disconnect from USB ! It will reconnect once plugged in to GPIB again */
			LED(0);
    136e:	81 60       	ori	r24, 0x01	; 1
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1370:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1374:	9f ef       	ldi	r25, 0xFF	; 255
    1376:	e9 e6       	ldi	r30, 0x69	; 105
    1378:	f8 e1       	ldi	r31, 0x18	; 24
    137a:	91 50       	subi	r25, 0x01	; 1
    137c:	e0 40       	sbci	r30, 0x00	; 0
    137e:	f0 40       	sbci	r31, 0x00	; 0
    1380:	e1 f7       	brne	.-8      	; 0x137a <main+0x17a>
    1382:	00 c0       	rjmp	.+0      	; 0x1384 <main+0x184>
    1384:	00 00       	nop
    1386:	9c e0       	ldi	r25, 0x0C	; 12
    1388:	88 e1       	ldi	r24, 0x18	; 24
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	a8 95       	wdr
    1390:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    139a:	ff cf       	rjmp	.-2      	; 0x139a <main+0x19a>
    139c:	cf d7       	rcall	.+3998   	; 0x233c <USB_USBTask>
    139e:	df cf       	rjmp	.-66     	; 0x135e <main+0x15e>

000013a0 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
	
	*DescriptorMemorySpace = MEMSPACE_FLASH;
    13a0:	f9 01       	movw	r30, r18
    13a2:	10 82       	st	Z, r1

	switch (DescriptorType)
    13a4:	69 2f       	mov	r22, r25
    13a6:	77 27       	eor	r23, r23
    13a8:	62 30       	cpi	r22, 0x02	; 2
    13aa:	71 05       	cpc	r23, r1
    13ac:	59 f0       	breq	.+22     	; 0x13c4 <CALLBACK_USB_GetDescriptor+0x24>
    13ae:	63 30       	cpi	r22, 0x03	; 3
    13b0:	71 05       	cpc	r23, r1
    13b2:	69 f0       	breq	.+26     	; 0x13ce <CALLBACK_USB_GetDescriptor+0x2e>
    13b4:	61 30       	cpi	r22, 0x01	; 1
    13b6:	71 05       	cpc	r23, r1
    13b8:	49 f5       	brne	.+82     	; 0x140c <CALLBACK_USB_GetDescriptor+0x6c>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    13ba:	82 e1       	ldi	r24, 0x12	; 18
    13bc:	90 e0       	ldi	r25, 0x00	; 0
	*DescriptorMemorySpace = MEMSPACE_FLASH;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    13be:	21 e0       	ldi	r18, 0x01	; 1
    13c0:	31 e0       	ldi	r19, 0x01	; 1
    13c2:	28 c0       	rjmp	.+80     	; 0x1414 <CALLBACK_USB_GetDescriptor+0x74>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    13c4:	87 e2       	ldi	r24, 0x27	; 39
    13c6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    13c8:	2a ed       	ldi	r18, 0xDA	; 218
    13ca:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    13cc:	23 c0       	rjmp	.+70     	; 0x1414 <CALLBACK_USB_GetDescriptor+0x74>
		case DTYPE_String:
			switch (DescriptorNumber)
    13ce:	99 27       	eor	r25, r25
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	91 05       	cpc	r25, r1
    13d4:	91 f0       	breq	.+36     	; 0x13fa <CALLBACK_USB_GetDescriptor+0x5a>
    13d6:	70 f0       	brcs	.+28     	; 0x13f4 <CALLBACK_USB_GetDescriptor+0x54>
    13d8:	82 30       	cpi	r24, 0x02	; 2
    13da:	91 05       	cpc	r25, r1
    13dc:	89 f0       	breq	.+34     	; 0x1400 <CALLBACK_USB_GetDescriptor+0x60>
    13de:	03 97       	sbiw	r24, 0x03	; 3
    13e0:	a9 f4       	brne	.+42     	; 0x140c <CALLBACK_USB_GetDescriptor+0x6c>
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
				case STRING_ID_Serial:
					Address = &tmc_serial_string;
					Size = tmc_serial_string.Header.Size;
    13e2:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <tmc_serial_string>
    13e6:	90 e0       	ldi	r25, 0x00	; 0
					*DescriptorMemorySpace = MEMSPACE_RAM;
    13e8:	62 e0       	ldi	r22, 0x02	; 2
    13ea:	f9 01       	movw	r30, r18
    13ec:	60 83       	st	Z, r22
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
				case STRING_ID_Serial:
					Address = &tmc_serial_string;
    13ee:	2e e7       	ldi	r18, 0x7E	; 126
    13f0:	31 e0       	ldi	r19, 0x01	; 1
					Size = tmc_serial_string.Header.Size;
					*DescriptorMemorySpace = MEMSPACE_RAM;
					break;
    13f2:	10 c0       	rjmp	.+32     	; 0x1414 <CALLBACK_USB_GetDescriptor+0x74>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    13f4:	e6 ed       	ldi	r30, 0xD6	; 214
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	05 c0       	rjmp	.+10     	; 0x1404 <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    13fa:	ee eb       	ldi	r30, 0xBE	; 190
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    1400:	ec ea       	ldi	r30, 0xAC	; 172
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	84 91       	lpm	r24, Z
    1406:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    1408:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    140a:	04 c0       	rjmp	.+8      	; 0x1414 <CALLBACK_USB_GetDescriptor+0x74>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
			                        uint8_t* const DescriptorMemorySpace)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}
			break;
	}

	*DescriptorAddress = Address;
    1414:	fa 01       	movw	r30, r20
    1416:	31 83       	std	Z+1, r19	; 0x01
    1418:	20 83       	st	Z, r18
	return Size;
}
    141a:	08 95       	ret

0000141c <is_timedout>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    141c:	85 e3       	ldi	r24, 0x35	; 53
    141e:	8a 95       	dec	r24
    1420:	f1 f7       	brne	.-4      	; 0x141e <is_timedout+0x2>
    1422:	00 00       	nop
}

static bool is_timedout(void)
{
	_delay_us(10);
	if (timeout_val == 0)
    1424:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <timeout_val>
    1428:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <timeout_val+0x1>
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	39 f0       	breq	.+14     	; 0x143e <is_timedout+0x22>
		return true;
		
	timeout_val--;
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <timeout_val+0x1>
    1436:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <timeout_val>
	return false;
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	08 95       	ret

static bool is_timedout(void)
{
	_delay_us(10);
	if (timeout_val == 0)
		return true;
    143e:	81 e0       	ldi	r24, 0x01	; 1
		
	timeout_val--;
	return false;
}
    1440:	08 95       	ret

00001442 <__vector_23>:
	timer0_100mscounter = 0;
}


ISR (TIMER0_OVF_vect)
{
    1442:	1f 92       	push	r1
    1444:	0f 92       	push	r0
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	0f 92       	push	r0
    144a:	11 24       	eor	r1, r1
    144c:	8f 93       	push	r24
	timer0_div++;
    144e:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <timer0_div>
    1452:	8f 5f       	subi	r24, 0xFF	; 255
    1454:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <timer0_div>
	if (timer0_div >= 6) /* are 100ms passed? */
    1458:	86 30       	cpi	r24, 0x06	; 6
    145a:	e0 f0       	brcs	.+56     	; 0x1494 <__vector_23+0x52>
	{
		timer0_100mscounter++;
    145c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <timer0_100mscounter>
    1460:	8f 5f       	subi	r24, 0xFF	; 255
    1462:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timer0_100mscounter>
		timer0_div = 0;
    1466:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <timer0_div>
		
		if (!s_gpib_transaction_active) /* only check, if no GPIB transaction is active */
    146a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <s_gpib_transaction_active>
    146e:	81 11       	cpse	r24, r1
    1470:	11 c0       	rjmp	.+34     	; 0x1494 <__vector_23+0x52>
		{
			if (!ATN_STATE) /* is ATN LOW? This can only happen if no GPIB device is connected/powered */
    1472:	7e 99       	sbic	0x0f, 6	; 15
    1474:	0a c0       	rjmp	.+20     	; 0x148a <__vector_23+0x48>
			{
				if (s_gpib_disconnect_counter == 2)
    1476:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <s_gpib_disconnect_counter>
    147a:	82 30       	cpi	r24, 0x02	; 2
    147c:	11 f4       	brne	.+4      	; 0x1482 <__vector_23+0x40>
				{ /* after 100-200ms with ATN low, assume, that there is no GPIB device connected */
					s_device_state = GPIB_DEVICE_CONNECTSTATE_DISCONNECTED;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	07 c0       	rjmp	.+14     	; 0x1490 <__vector_23+0x4e>
				}
				else
				{
					s_gpib_disconnect_counter++;
    1482:	8f 5f       	subi	r24, 0xFF	; 255
    1484:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <s_gpib_disconnect_counter>
    1488:	05 c0       	rjmp	.+10     	; 0x1494 <__vector_23+0x52>
				}
			}
			else
			{ /* device is connected */
				s_gpib_disconnect_counter = 0;
    148a:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <s_gpib_disconnect_counter>
				s_device_state = GPIB_DEVICE_CONNECTSTATE_CONNECTED;
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <s_device_state>
			}
		}
	}
}
    1494:	8f 91       	pop	r24
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <gpib_is_connected>:
	timer_init(); /* init timeout timer */
}

bool gpib_is_connected(void)
{
	return s_device_state == GPIB_DEVICE_CONNECTSTATE_CONNECTED;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <s_device_state>
    14a6:	92 30       	cpi	r25, 0x02	; 2
    14a8:	09 f0       	breq	.+2      	; 0x14ac <gpib_is_connected+0xc>
    14aa:	80 e0       	ldi	r24, 0x00	; 0
}
    14ac:	08 95       	ret

000014ae <gpib_ren>:

void gpib_ren(bool enable)
{
	if (enable)
    14ae:	88 23       	and	r24, r24
    14b0:	11 f0       	breq	.+4      	; 0x14b6 <gpib_ren+0x8>
	{
		REN_LOW; /* remote enable */
    14b2:	25 9a       	sbi	0x04, 5	; 4
    14b4:	08 95       	ret
	}
	else
	{
		REN_HIGH; /* remote disable */
    14b6:	25 98       	cbi	0x04, 5	; 4
    14b8:	08 95       	ret

000014ba <gpib_interface_clear>:



void gpib_interface_clear(void)
{
	IFC_LOW; /* interface clear */
    14ba:	6a 9a       	sbi	0x0d, 2	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14bc:	2f ef       	ldi	r18, 0xFF	; 255
    14be:	81 ee       	ldi	r24, 0xE1	; 225
    14c0:	94 e0       	ldi	r25, 0x04	; 4
    14c2:	21 50       	subi	r18, 0x01	; 1
    14c4:	80 40       	sbci	r24, 0x00	; 0
    14c6:	90 40       	sbci	r25, 0x00	; 0
    14c8:	e1 f7       	brne	.-8      	; 0x14c2 <gpib_interface_clear+0x8>
    14ca:	00 c0       	rjmp	.+0      	; 0x14cc <gpib_interface_clear+0x12>
    14cc:	00 00       	nop
	_delay_ms(100);
	IFC_HIGH; /* interface clear */
    14ce:	6a 98       	cbi	0x0d, 2	; 13
    14d0:	8f e3       	ldi	r24, 0x3F	; 63
    14d2:	9c e9       	ldi	r25, 0x9C	; 156
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <gpib_interface_clear+0x1a>
    14d8:	00 c0       	rjmp	.+0      	; 0x14da <gpib_interface_clear+0x20>
    14da:	00 00       	nop
	_delay_ms(10);
	s_gpib_transaction_active = false;
    14dc:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <s_gpib_transaction_active>
    14e0:	08 95       	ret

000014e2 <gpib_init>:
 **********************************************************************************************************/

void gpib_init(void)
{
// PB5 = REN
	DDRD  = 0x00;
    14e2:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x00;
    14e4:	1b b8       	out	0x0b, r1	; 11
	PORTB &= ~((1<<4) | (1<<5) | (1<<6));
    14e6:	85 b1       	in	r24, 0x05	; 5
    14e8:	8f 78       	andi	r24, 0x8F	; 143
    14ea:	85 b9       	out	0x05, r24	; 5
	DDRB  &= ~((1<<4) | (1<<5) | (1<<6));
    14ec:	84 b1       	in	r24, 0x04	; 4
    14ee:	8f 78       	andi	r24, 0x8F	; 143
    14f0:	84 b9       	out	0x04, r24	; 4
	PORTC &= ~((1<<6) | (1<<7));
    14f2:	88 b1       	in	r24, 0x08	; 8
    14f4:	8f 73       	andi	r24, 0x3F	; 63
    14f6:	88 b9       	out	0x08, r24	; 8
	DDRC  &= ~((1<<6) | (1<<7));
    14f8:	87 b1       	in	r24, 0x07	; 7
    14fa:	8f 73       	andi	r24, 0x3F	; 63
    14fc:	87 b9       	out	0x07, r24	; 7
	PORTE &= ~(1<<2);
    14fe:	72 98       	cbi	0x0e, 2	; 14
	DDRE  &= ~(1<<2);
    1500:	6a 98       	cbi	0x0d, 2	; 13
	PORTF &= ~((1<<6) | (1<<7));
    1502:	81 b3       	in	r24, 0x11	; 17
    1504:	8f 73       	andi	r24, 0x3F	; 63
    1506:	81 bb       	out	0x11, r24	; 17
	DDRF  &= ~((1<<6) | (1<<7));
    1508:	80 b3       	in	r24, 0x10	; 16
    150a:	8f 73       	andi	r24, 0x3F	; 63
    150c:	80 bb       	out	0x10, r24	; 16
	
	DDRB |= (1<<5); /* remote enable */
    150e:	25 9a       	sbi	0x04, 5	; 4

	s_gpib_transaction_active = false;
    1510:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <s_gpib_transaction_active>
	s_gpib_disconnect_counter = 0;
    1514:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <s_gpib_disconnect_counter>
	
	gpib_interface_clear();
    1518:	d0 df       	rcall	.-96     	; 0x14ba <gpib_interface_clear>
	return timedout;
}

static void timer_init(void)
{
	TCCR0B = 5; // Prescaler 1024 = 15625 Hz
    151a:	85 e0       	ldi	r24, 0x05	; 5
    151c:	85 bd       	out	0x25, r24	; 37
	// Overflow Interrupt erlauben
	TIMSK0 |= (1<<TOIE0);
    151e:	ee e6       	ldi	r30, 0x6E	; 110
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	81 60       	ori	r24, 0x01	; 1
    1526:	80 83       	st	Z, r24
	timer0_div = 0;
    1528:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <timer0_div>
	timer0_100mscounter = 0;
    152c:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <timer0_100mscounter>
    1530:	08 95       	ret

00001532 <gpib_tx>:
{
	gpib_init();
}

static bool gpib_tx(uint8_t dat, bool iscommand, gpibtimeout_t ptimeoutfunc)
{
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	cf 93       	push	r28
    1538:	8a 01       	movw	r16, r20
	bool timedout;
	
	DAV_HIGH;
    153a:	26 98       	cbi	0x04, 6	; 4
	NRFD_HIGH;
    153c:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    153e:	3f 98       	cbi	0x07, 7	; 7
	
	if (iscommand)
    1540:	66 23       	and	r22, r22
    1542:	11 f0       	breq	.+4      	; 0x1548 <gpib_tx+0x16>
		ATN_LOW;
    1544:	86 9a       	sbi	0x10, 6	; 16
    1546:	01 c0       	rjmp	.+2      	; 0x154a <gpib_tx+0x18>
	else
		ATN_HIGH;
    1548:	86 98       	cbi	0x10, 6	; 16

	DDRD = dat;   /* set Data to data bus */
    154a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    154c:	85 e0       	ldi	r24, 0x05	; 5
    154e:	8a 95       	dec	r24
    1550:	f1 f7       	brne	.-4      	; 0x154e <gpib_tx+0x1c>
    1552:	00 00       	nop
	_delay_us(1); /* wait for data to settle */
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		timedout = ptimeoutfunc();
    1554:	f8 01       	movw	r30, r16
    1556:	09 95       	icall
    1558:	c8 2f       	mov	r28, r24
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    155a:	36 99       	sbic	0x06, 6	; 6
    155c:	03 c0       	rjmp	.+6      	; 0x1564 <gpib_tx+0x32>
    155e:	88 23       	and	r24, r24
    1560:	c9 f3       	breq	.-14     	; 0x1554 <gpib_tx+0x22>
    1562:	0b c0       	rjmp	.+22     	; 0x157a <gpib_tx+0x48>

	if (!timedout)
    1564:	81 11       	cpse	r24, r1
    1566:	09 c0       	rjmp	.+18     	; 0x157a <gpib_tx+0x48>
	{
		DAV_LOW;
    1568:	26 9a       	sbi	0x04, 6	; 4
		do
		{
			timedout = ptimeoutfunc();
    156a:	f8 01       	movw	r30, r16
    156c:	09 95       	icall
    156e:	c8 2f       	mov	r28, r24
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    1570:	37 99       	sbic	0x06, 7	; 6
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <gpib_tx+0x46>
    1574:	88 23       	and	r24, r24
    1576:	c9 f3       	breq	.-14     	; 0x156a <gpib_tx+0x38>
		DAV_HIGH; 
    1578:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    157a:	1a b8       	out	0x0a, r1	; 10
	ATN_HIGH;	 
    157c:	86 98       	cbi	0x10, 6	; 16
	
	if (timedout)
    157e:	c1 11       	cpse	r28, r1

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    1580:	b0 df       	rcall	.-160    	; 0x14e2 <gpib_init>
	if (timedout)
	{
		gpib_recover();
	}
	return timedout;
}
    1582:	8c 2f       	mov	r24, r28
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	08 95       	ret

0000158c <gpib_cmd_TAG>:
	return gpib_tx(addr | 0x60, true, ptimeoutfunc);
}


static bool gpib_cmd_TAG(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	c8 2f       	mov	r28, r24
    1594:	8b 01       	movw	r16, r22
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x40, true, ptimeoutfunc);
    1596:	8f 71       	andi	r24, 0x1F	; 31
    1598:	ab 01       	movw	r20, r22
    159a:	61 e0       	ldi	r22, 0x01	; 1
    159c:	80 64       	ori	r24, 0x40	; 64
    159e:	c9 df       	rcall	.-110    	; 0x1532 <gpib_tx>
	if (addr & 0xe0)
    15a0:	c0 7e       	andi	r28, 0xE0	; 224
    15a2:	39 f0       	breq	.+14     	; 0x15b2 <gpib_cmd_TAG+0x26>
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)	
    15a4:	a8 01       	movw	r20, r16
    15a6:	61 e0       	ldi	r22, 0x01	; 1
    15a8:	80 e6       	ldi	r24, 0x60	; 96
	}
	return result;
}
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
{
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x40, true, ptimeoutfunc);
	if (addr & 0xe0)
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)	
    15ae:	0f 91       	pop	r16
    15b0:	c0 cf       	rjmp	.-128    	; 0x1532 <gpib_tx>
	}
	return result;
}
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	08 95       	ret

000015ba <gpib_cmd_LAG>:
	return gpib_tx(dat, false, ptimeoutfunc);
}


static bool gpib_cmd_LAG(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    15ba:	0f 93       	push	r16
    15bc:	1f 93       	push	r17
    15be:	cf 93       	push	r28
    15c0:	c8 2f       	mov	r28, r24
    15c2:	8b 01       	movw	r16, r22
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x20, true, ptimeoutfunc);
    15c4:	8f 71       	andi	r24, 0x1F	; 31
    15c6:	ab 01       	movw	r20, r22
    15c8:	61 e0       	ldi	r22, 0x01	; 1
    15ca:	80 62       	ori	r24, 0x20	; 32
    15cc:	b2 df       	rcall	.-156    	; 0x1532 <gpib_tx>
	if (addr & 0xe0)
    15ce:	c0 7e       	andi	r28, 0xE0	; 224
    15d0:	39 f0       	breq	.+14     	; 0x15e0 <gpib_cmd_LAG+0x26>
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)
    15d2:	a8 01       	movw	r20, r16
    15d4:	61 e0       	ldi	r22, 0x01	; 1
    15d6:	80 e6       	ldi	r24, 0x60	; 96
	}
	return result;
}
    15d8:	cf 91       	pop	r28
    15da:	1f 91       	pop	r17
{
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x20, true, ptimeoutfunc);
	if (addr & 0xe0)
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)
    15dc:	0f 91       	pop	r16
    15de:	a9 cf       	rjmp	.-174    	; 0x1532 <gpib_tx>
	}
	return result;
}
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	08 95       	ret

000015e8 <gpib_cmd_UNL>:
	return result;
}

static bool gpib_cmd_UNL(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x3F, true, ptimeoutfunc);
    15e8:	ac 01       	movw	r20, r24
    15ea:	61 e0       	ldi	r22, 0x01	; 1
    15ec:	8f e3       	ldi	r24, 0x3F	; 63
    15ee:	a1 cf       	rjmp	.-190    	; 0x1532 <gpib_tx>

000015f0 <gpib_sdc>:
{
	return gpib_tx(0x04, true, ptimeoutfunc);
}

bool gpib_sdc(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	eb 01       	movw	r28, r22
	bool timedout;

	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
    15f6:	e1 df       	rcall	.-62     	; 0x15ba <gpib_cmd_LAG>
	if (!timedout)
    15f8:	81 11       	cpse	r24, r1
    15fa:	0a c0       	rjmp	.+20     	; 0x1610 <gpib_sdc+0x20>



static bool gpib_cmd_SDC(gpibtimeout_t ptimeoutfunc) // selective device clear
{
	return gpib_tx(0x04, true, ptimeoutfunc);
    15fc:	ae 01       	movw	r20, r28
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	84 e0       	ldi	r24, 0x04	; 4
    1602:	97 df       	rcall	.-210    	; 0x1532 <gpib_tx>
	bool timedout;

	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
	if (!timedout)
		timedout = gpib_cmd_SDC(ptimeoutfunc);
	if (!timedout)
    1604:	81 11       	cpse	r24, r1
		timedout = gpib_cmd_UNL(ptimeoutfunc);
    1606:	04 c0       	rjmp	.+8      	; 0x1610 <gpib_sdc+0x20>
    1608:	ce 01       	movw	r24, r28
		
	if (timedout)
    160a:	ee df       	rcall	.-36     	; 0x15e8 <gpib_cmd_UNL>
    160c:	88 23       	and	r24, r24

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    160e:	11 f0       	breq	.+4      	; 0x1614 <gpib_sdc+0x24>
    1610:	68 df       	rcall	.-304    	; 0x14e2 <gpib_init>
    1612:	81 e0       	ldi	r24, 0x01	; 1
		timedout = gpib_cmd_UNL(ptimeoutfunc);
		
	if (timedout)
		gpib_recover();
	return timedout;
}
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	08 95       	ret

0000161a <gpib_trigger>:
	return timedout;
}


bool gpib_trigger(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	eb 01       	movw	r28, r22
	bool timedout;
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
    1620:	cc df       	rcall	.-104    	; 0x15ba <gpib_cmd_LAG>
	if (!timedout)
    1622:	81 11       	cpse	r24, r1
    1624:	0a c0       	rjmp	.+20     	; 0x163a <gpib_trigger+0x20>
	return gpib_tx(0x19, true, ptimeoutfunc);
}

static bool gpib_cmd_GET(gpibtimeout_t ptimeoutfunc) // group execute trigger (addressed command)
{
	return gpib_tx(0x08, true, ptimeoutfunc);
    1626:	ae 01       	movw	r20, r28
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	88 e0       	ldi	r24, 0x08	; 8
    162c:	82 df       	rcall	.-252    	; 0x1532 <gpib_tx>
	bool timedout;
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
	if (!timedout)
		timedout = gpib_cmd_GET(ptimeoutfunc);
	if (!timedout)
    162e:	81 11       	cpse	r24, r1
		timedout = gpib_cmd_UNL(ptimeoutfunc);
    1630:	04 c0       	rjmp	.+8      	; 0x163a <gpib_trigger+0x20>
    1632:	ce 01       	movw	r24, r28
		
	if (timedout)
    1634:	d9 df       	rcall	.-78     	; 0x15e8 <gpib_cmd_UNL>
    1636:	88 23       	and	r24, r24

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    1638:	11 f0       	breq	.+4      	; 0x163e <gpib_trigger+0x24>
    163a:	53 df       	rcall	.-346    	; 0x14e2 <gpib_init>
    163c:	81 e0       	ldi	r24, 0x01	; 1
		timedout = gpib_cmd_UNL(ptimeoutfunc);
		
	if (timedout)
		gpib_recover();
	return timedout;
}
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <gpib_gotoLocal>:
		gpib_recover();
	return timedout;
}

bool gpib_gotoLocal(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	eb 01       	movw	r28, r22
	bool timedout;
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
    164a:	b7 df       	rcall	.-146    	; 0x15ba <gpib_cmd_LAG>
	if (!timedout)
    164c:	81 11       	cpse	r24, r1
    164e:	0a c0       	rjmp	.+20     	; 0x1664 <gpib_gotoLocal+0x20>
	return gpib_tx(0x11, true, ptimeoutfunc);
}

static bool gpib_cmd_GTL(gpibtimeout_t ptimeoutfunc) // goto local
{
	return gpib_tx(0x01, true, ptimeoutfunc);
    1650:	ae 01       	movw	r20, r28
    1652:	61 e0       	ldi	r22, 0x01	; 1
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	6d df       	rcall	.-294    	; 0x1532 <gpib_tx>
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
	if (!timedout)
		timedout = gpib_cmd_GTL(ptimeoutfunc);
		
	if (!timedout)
    1658:	81 11       	cpse	r24, r1
		timedout = gpib_cmd_UNL(ptimeoutfunc);
    165a:	04 c0       	rjmp	.+8      	; 0x1664 <gpib_gotoLocal+0x20>
    165c:	ce 01       	movw	r24, r28
		
	if (timedout)
    165e:	c4 df       	rcall	.-120    	; 0x15e8 <gpib_cmd_UNL>
    1660:	88 23       	and	r24, r24

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    1662:	11 f0       	breq	.+4      	; 0x1668 <gpib_gotoLocal+0x24>
    1664:	3e df       	rcall	.-388    	; 0x14e2 <gpib_init>
    1666:	81 e0       	ldi	r24, 0x01	; 1
		timedout = gpib_cmd_UNL(ptimeoutfunc);
		
	if (timedout)
		gpib_recover();
	return timedout;
}
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret

0000166e <gpib_localLockout>:
		gpib_recover();	
	return status;
}

bool gpib_localLockout(gpibtimeout_t ptimeoutfunc)
{
    166e:	cf 93       	push	r28
	return gpib_tx(0x5F, true, ptimeoutfunc);
}

static bool gpib_cmd_LLO(gpibtimeout_t ptimeoutfunc) // local lockout
{
	return gpib_tx(0x11, true, ptimeoutfunc);
    1670:	ac 01       	movw	r20, r24
    1672:	61 e0       	ldi	r22, 0x01	; 1
    1674:	81 e1       	ldi	r24, 0x11	; 17
    1676:	5d df       	rcall	.-326    	; 0x1532 <gpib_tx>
    1678:	c8 2f       	mov	r28, r24

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    167a:	81 11       	cpse	r24, r1
    167c:	32 df       	rcall	.-412    	; 0x14e2 <gpib_init>

	timedout = gpib_cmd_LLO(ptimeoutfunc);
	if (timedout)
		gpib_recover();
	return timedout;
}
    167e:	8c 2f       	mov	r24, r28
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

00001684 <gpib_readdat>:




uint8_t gpib_readdat(bool *pEoi, bool *ptimedout, gpibtimeout_t ptimeoutfunc)
{
    1684:	af 92       	push	r10
    1686:	bf 92       	push	r11
    1688:	df 92       	push	r13
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	8c 01       	movw	r16, r24
    1698:	7b 01       	movw	r14, r22
    169a:	5a 01       	movw	r10, r20
	
	c = 0;
	eoi = false;	
	
	/* skipping NRFD LOW step, because we are able to handshake and response to data */
	NDAC_LOW;
    169c:	3f 9a       	sbi	0x07, 7	; 7
	NRFD_HIGH;
    169e:	3e 98       	cbi	0x07, 6	; 7
	
	do
	{
		timedout = ptimeoutfunc();
    16a0:	f5 01       	movw	r30, r10
    16a2:	09 95       	icall
    16a4:	d8 2f       	mov	r29, r24
	}
	while ( (DAV_STATE != 0) && !timedout ); /* wait until DAV gets low */
    16a6:	1e 9b       	sbis	0x03, 6	; 3
    16a8:	03 c0       	rjmp	.+6      	; 0x16b0 <gpib_readdat+0x2c>
    16aa:	88 23       	and	r24, r24
    16ac:	c9 f3       	breq	.-14     	; 0x16a0 <gpib_readdat+0x1c>
    16ae:	14 c0       	rjmp	.+40     	; 0x16d8 <gpib_readdat+0x54>
	
	if (!timedout)
    16b0:	81 11       	cpse	r24, r1
    16b2:	12 c0       	rjmp	.+36     	; 0x16d8 <gpib_readdat+0x54>
	{
		NRFD_LOW;
    16b4:	3e 9a       	sbi	0x07, 6	; 7
		c = ~PIND;
    16b6:	c9 b1       	in	r28, 0x09	; 9
    16b8:	c0 95       	com	r28
		eoi = (EOI_STATE == 0) ;
    16ba:	d3 b0       	in	r13, 0x03	; 3
    16bc:	d4 fa       	bst	r13, 4
    16be:	dd 24       	eor	r13, r13
    16c0:	d0 f8       	bld	r13, 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	d8 26       	eor	r13, r24
		NDAC_HIGH;
    16c6:	3f 98       	cbi	0x07, 7	; 7
		
		do
		{
			timedout = ptimeoutfunc();
    16c8:	f5 01       	movw	r30, r10
    16ca:	09 95       	icall
    16cc:	d8 2f       	mov	r29, r24
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
    16ce:	1e 99       	sbic	0x03, 6	; 3
    16d0:	05 c0       	rjmp	.+10     	; 0x16dc <gpib_readdat+0x58>
    16d2:	88 23       	and	r24, r24
    16d4:	c9 f3       	breq	.-14     	; 0x16c8 <gpib_readdat+0x44>
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <gpib_readdat+0x58>
{
	uint8_t c;
	bool eoi, timedout;	
	
	c = 0;
	eoi = false;	
    16d8:	d1 2c       	mov	r13, r1
uint8_t gpib_readdat(bool *pEoi, bool *ptimedout, gpibtimeout_t ptimeoutfunc)
{
	uint8_t c;
	bool eoi, timedout;	
	
	c = 0;
    16da:	c0 e0       	ldi	r28, 0x00	; 0
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
	}

	
	if (s_terminator == '\0')
    16dc:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <s_terminator>
    16e0:	91 11       	cpse	r25, r1
    16e2:	03 c0       	rjmp	.+6      	; 0x16ea <gpib_readdat+0x66>
		*pEoi = eoi;
    16e4:	f8 01       	movw	r30, r16
    16e6:	d0 82       	st	Z, r13
    16e8:	08 c0       	rjmp	.+16     	; 0x16fa <gpib_readdat+0x76>
	else
		*pEoi = eoi || (c == s_terminator);
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	d1 10       	cpse	r13, r1
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <gpib_readdat+0x70>
    16f0:	c9 13       	cpse	r28, r25
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	81 70       	andi	r24, 0x01	; 1
    16f6:	f8 01       	movw	r30, r16
    16f8:	80 83       	st	Z, r24

	if (timedout)
    16fa:	d1 11       	cpse	r29, r1

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    16fc:	f2 de       	rcall	.-540    	; 0x14e2 <gpib_init>

	if (timedout)
	{
		gpib_recover();
	}
	*ptimedout = timedout;
    16fe:	f7 01       	movw	r30, r14
    1700:	d0 83       	st	Z, r29
	return c;
};
    1702:	8c 2f       	mov	r24, r28
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
    1710:	df 90       	pop	r13
    1712:	bf 90       	pop	r11
    1714:	af 90       	pop	r10
    1716:	08 95       	ret

00001718 <gpib_readStatusByte>:
}



uint8_t gpib_readStatusByte(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1718:	ff 92       	push	r15
    171a:	0f 93       	push	r16
    171c:	1f 93       	push	r17
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	00 d0       	rcall	.+0      	; 0x1724 <gpib_readStatusByte+0xc>
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	f8 2e       	mov	r15, r24
    172a:	8b 01       	movw	r16, r22
	bool timedout, eoi;
	uint8_t status;
	
	timedout = false;
    172c:	1a 82       	std	Y+2, r1	; 0x02
}


static bool gpib_cmd_SPE(gpibtimeout_t ptimeoutfunc) // serial poll enable
{
	return gpib_tx(0x18, true, ptimeoutfunc);
    172e:	ab 01       	movw	r20, r22
    1730:	61 e0       	ldi	r22, 0x01	; 1
    1732:	88 e1       	ldi	r24, 0x18	; 24
    1734:	fe de       	rcall	.-516    	; 0x1532 <gpib_tx>
	
	timedout = false;
	status = 0;
	
	if (!timedout)
		timedout = gpib_cmd_SPE(ptimeoutfunc);
    1736:	8a 83       	std	Y+2, r24	; 0x02
	if (!timedout)
    1738:	81 11       	cpse	r24, r1
    173a:	04 c0       	rjmp	.+8      	; 0x1744 <gpib_readStatusByte+0x2c>
		timedout = gpib_cmd_TAG(addr, ptimeoutfunc); 
    173c:	b8 01       	movw	r22, r16
    173e:	8f 2d       	mov	r24, r15
    1740:	25 df       	rcall	.-438    	; 0x158c <gpib_cmd_TAG>
    1742:	8a 83       	std	Y+2, r24	; 0x02
	ATN_HIGH; /* make ATN H */	
    1744:	86 98       	cbi	0x10, 6	; 16
	NDAC_LOW;   /* make NDAC L */
    1746:	3f 9a       	sbi	0x07, 7	; 7

	if (!timedout)
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	81 11       	cpse	r24, r1
    174c:	09 c0       	rjmp	.+18     	; 0x1760 <gpib_readStatusByte+0x48>
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
    174e:	a8 01       	movw	r20, r16
    1750:	be 01       	movw	r22, r28
    1752:	6e 5f       	subi	r22, 0xFE	; 254
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	ce 01       	movw	r24, r28
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	94 df       	rcall	.-216    	; 0x1684 <gpib_readdat>
    175c:	f8 2e       	mov	r15, r24
    175e:	01 c0       	rjmp	.+2      	; 0x1762 <gpib_readStatusByte+0x4a>
{
	bool timedout, eoi;
	uint8_t status;
	
	timedout = false;
	status = 0;
    1760:	f1 2c       	mov	r15, r1
	NDAC_LOW;   /* make NDAC L */

	if (!timedout)
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
	
	if (!timedout)
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	81 11       	cpse	r24, r1
    1766:	05 c0       	rjmp	.+10     	; 0x1772 <gpib_readStatusByte+0x5a>
	return gpib_tx(0x3F, true, ptimeoutfunc);
}

static bool gpib_cmd_UNT(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x5F, true, ptimeoutfunc);
    1768:	a8 01       	movw	r20, r16
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	8f e5       	ldi	r24, 0x5F	; 95
    176e:	e1 de       	rcall	.-574    	; 0x1532 <gpib_tx>

	if (!timedout)
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
	
	if (!timedout)
		timedout = gpib_cmd_UNT(ptimeoutfunc); 
    1770:	8a 83       	std	Y+2, r24	; 0x02
	if (!timedout)
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	81 11       	cpse	r24, r1
	return gpib_tx(0x18, true, ptimeoutfunc);
}

static bool gpib_cmd_SPD(gpibtimeout_t ptimeoutfunc) // serial poll disable
{
	return gpib_tx(0x19, true, ptimeoutfunc);
    1776:	05 c0       	rjmp	.+10     	; 0x1782 <gpib_readStatusByte+0x6a>
    1778:	a8 01       	movw	r20, r16
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	89 e1       	ldi	r24, 0x19	; 25
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
	
	if (!timedout)
		timedout = gpib_cmd_UNT(ptimeoutfunc); 
	if (!timedout)
		timedout = gpib_cmd_SPD(ptimeoutfunc);
    177e:	d9 de       	rcall	.-590    	; 0x1532 <gpib_tx>
	if (timedout)
    1780:	8a 83       	std	Y+2, r24	; 0x02
    1782:	8a 81       	ldd	r24, Y+2	; 0x02

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    1784:	81 11       	cpse	r24, r1
    1786:	ad de       	rcall	.-678    	; 0x14e2 <gpib_init>
	if (!timedout)
		timedout = gpib_cmd_SPD(ptimeoutfunc);
	if (timedout)
		gpib_recover();	
	return status;
}
    1788:	8f 2d       	mov	r24, r15
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	ff 90       	pop	r15
    1798:	08 95       	ret

0000179a <gpib_untalk_unlisten>:
	*ptimedout = timedout;
	return c;
};

bool gpib_untalk_unlisten(gpibtimeout_t ptimeoutfunc)
{
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	ec 01       	movw	r28, r24
	bool timedout;	
	timedout = gpib_cmd_UNL(ptimeoutfunc);
    17a0:	23 df       	rcall	.-442    	; 0x15e8 <gpib_cmd_UNL>
	if (!timedout)
    17a2:	88 23       	and	r24, r24

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    17a4:	19 f0       	breq	.+6      	; 0x17ac <gpib_untalk_unlisten+0x12>
    17a6:	9d de       	rcall	.-710    	; 0x14e2 <gpib_init>
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	06 c0       	rjmp	.+12     	; 0x17b8 <gpib_untalk_unlisten+0x1e>
	return gpib_tx(0x3F, true, ptimeoutfunc);
}

static bool gpib_cmd_UNT(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x5F, true, ptimeoutfunc);
    17ac:	ae 01       	movw	r20, r28
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	8f e5       	ldi	r24, 0x5F	; 95
    17b2:	bf de       	rcall	.-642    	; 0x1532 <gpib_tx>
{
	bool timedout;	
	timedout = gpib_cmd_UNL(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_UNT(ptimeoutfunc);
	if (timedout)
    17b4:	81 11       	cpse	r24, r1
    17b6:	f7 cf       	rjmp	.-18     	; 0x17a6 <gpib_untalk_unlisten+0xc>
		gpib_recover();
		
	s_gpib_transaction_active = false;
    17b8:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <s_gpib_transaction_active>
	return timedout;
}
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	08 95       	ret

000017c2 <gpib_make_talker>:

bool  gpib_make_talker(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	d8 2f       	mov	r29, r24
    17cc:	8b 01       	movw	r16, r22
	bool timedout;
	
	s_gpib_transaction_active = true;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <s_gpib_transaction_active>
	
	timedout = gpib_cmd_UNL(ptimeoutfunc);
    17d4:	cb 01       	movw	r24, r22
    17d6:	08 df       	rcall	.-496    	; 0x15e8 <gpib_cmd_UNL>
    17d8:	c8 2f       	mov	r28, r24
	if (!timedout)
    17da:	81 11       	cpse	r24, r1
    17dc:	04 c0       	rjmp	.+8      	; 0x17e6 <gpib_make_talker+0x24>
		timedout = gpib_cmd_TAG(addr, ptimeoutfunc); /* address as talker*/
    17de:	b8 01       	movw	r22, r16
    17e0:	8d 2f       	mov	r24, r29
    17e2:	d4 de       	rcall	.-600    	; 0x158c <gpib_cmd_TAG>
    17e4:	c8 2f       	mov	r28, r24
	ATN_HIGH; /* make ATN H */	
    17e6:	86 98       	cbi	0x10, 6	; 16
	NDAC_LOW;   /* make NDAC L */
	
	if (timedout)
    17e8:	3f 9a       	sbi	0x07, 7	; 7

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    17ea:	c1 11       	cpse	r28, r1
    17ec:	7a de       	rcall	.-780    	; 0x14e2 <gpib_init>
	NDAC_LOW;   /* make NDAC L */
	
	if (timedout)
		gpib_recover();
	return timedout;
}
    17ee:	8c 2f       	mov	r24, r28
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	08 95       	ret

000017fa <gpib_make_listener>:

bool gpib_make_listener(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    17fa:	1f 93       	push	r17
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	18 2f       	mov	r17, r24
    1802:	eb 01       	movw	r28, r22
	bool timedout;
	s_gpib_transaction_active = true;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <s_gpib_transaction_active>
	return gpib_tx(0x3F, true, ptimeoutfunc);
}

static bool gpib_cmd_UNT(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x5F, true, ptimeoutfunc);
    180a:	ab 01       	movw	r20, r22
    180c:	61 e0       	ldi	r22, 0x01	; 1
    180e:	8f e5       	ldi	r24, 0x5F	; 95
    1810:	90 de       	rcall	.-736    	; 0x1532 <gpib_tx>
bool gpib_make_listener(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
	bool timedout;
	s_gpib_transaction_active = true;
	timedout = gpib_cmd_UNT(ptimeoutfunc);
	if (!timedout)
    1812:	88 23       	and	r24, r24
    1814:	11 f0       	breq	.+4      	; 0x181a <gpib_make_listener+0x20>
		gpib_recover();
	return timedout;
}

bool gpib_make_listener(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1816:	c1 e0       	ldi	r28, 0x01	; 1
    1818:	08 c0       	rjmp	.+16     	; 0x182a <gpib_make_listener+0x30>
	bool timedout;
	s_gpib_transaction_active = true;
	timedout = gpib_cmd_UNT(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_UNL(ptimeoutfunc);
    181a:	ce 01       	movw	r24, r28
    181c:	e5 de       	rcall	.-566    	; 0x15e8 <gpib_cmd_UNL>
	if (!timedout)
    181e:	81 11       	cpse	r24, r1
    1820:	fa cf       	rjmp	.-12     	; 0x1816 <gpib_make_listener+0x1c>
		timedout = gpib_cmd_LAG(addr, ptimeoutfunc); /* address target as listener*/
    1822:	be 01       	movw	r22, r28
    1824:	81 2f       	mov	r24, r17
    1826:	c9 de       	rcall	.-622    	; 0x15ba <gpib_cmd_LAG>
    1828:	c8 2f       	mov	r28, r24
		
	ATN_HIGH;    /* make ATN H */
    182a:	86 98       	cbi	0x10, 6	; 16
	
	if (timedout)
    182c:	c1 11       	cpse	r28, r1

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    182e:	59 de       	rcall	.-846    	; 0x14e2 <gpib_init>
    1830:	8c 2f       	mov	r24, r28
	ATN_HIGH;    /* make ATN H */
	
	if (timedout)
		gpib_recover();
	return timedout;
}
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	1f 91       	pop	r17
    1838:	08 95       	ret

0000183a <gpib_writedat>:
    183a:	61 11       	cpse	r22, r1
bool gpib_writedat(uint8_t dat, bool Eoi, gpibtimeout_t ptimeoutfunc)
{
	bool timedout;
	if (Eoi)
	{
		EOI_LOW; /* make EOI L */
    183c:	24 9a       	sbi	0x04, 4	; 4
	return timedout;
}

static bool gpib_dat(uint8_t dat, gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(dat, false, ptimeoutfunc);
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	78 de       	rcall	.-784    	; 0x1532 <gpib_tx>
	if (Eoi)
	{
		EOI_LOW; /* make EOI L */
	}
	timedout = gpib_dat(dat, ptimeoutfunc);
	EOI_HIGH;    /* make EOI H */
    1842:	24 98       	cbi	0x04, 4	; 4
	return timedout;
}
    1844:	08 95       	ret

00001846 <gpib_set_readtermination>:

void gpib_set_readtermination(char terminator)
{
	switch(terminator)
    1846:	8a 30       	cpi	r24, 0x0A	; 10
    1848:	11 f0       	breq	.+4      	; 0x184e <gpib_set_readtermination+0x8>
    184a:	8d 30       	cpi	r24, 0x0D	; 13
    184c:	19 f4       	brne	.+6      	; 0x1854 <gpib_set_readtermination+0xe>
	{
		case '\n':
			s_terminator = '\n';
			break;
		case '\r':
			s_terminator = '\r';
    184e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <s_terminator>
			break;
    1852:	08 95       	ret
		default:
			s_terminator = '\0';
    1854:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <s_terminator>
    1858:	08 95       	ret

0000185a <gpib_search>:
	timeout_val--;
	return false;
}

uint8_t gpib_search(void)
{
    185a:	ef 92       	push	r14
    185c:	ff 92       	push	r15
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    1864:	84 ef       	ldi	r24, 0xF4	; 244
    1866:	91 e0       	ldi	r25, 0x01	; 1
    1868:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <timeout_val+0x1>
    186c:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <timeout_val>
uint8_t gpib_search(void)
{
	uint8_t addr, foundaddr;
	
	timeout_start(500);
	gpib_tx(0x3F, true, is_timedout); // UNL
    1870:	4e e0       	ldi	r20, 0x0E	; 14
    1872:	5a e0       	ldi	r21, 0x0A	; 10
    1874:	61 e0       	ldi	r22, 0x01	; 1
    1876:	8f e3       	ldi	r24, 0x3F	; 63
    1878:	5c de       	rcall	.-840    	; 0x1532 <gpib_tx>
	
	foundaddr = 255;
	addr = 255;
    187a:	cf ef       	ldi	r28, 0xFF	; 255

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    187c:	84 ef       	ldi	r24, 0xF4	; 244
    187e:	e8 2e       	mov	r14, r24
    1880:	ff 24       	eor	r15, r15
    1882:	f3 94       	inc	r15
	foundaddr = 255;
	addr = 255;
	do
	{
	
		addr++;
    1884:	cf 5f       	subi	r28, 0xFF	; 255
    1886:	1c 2f       	mov	r17, r28
    1888:	1f 71       	andi	r17, 0x1F	; 31
		if ((addr & 0x1f) != 31)
    188a:	1f 31       	cpi	r17, 0x1F	; 31
    188c:	09 f4       	brne	.+2      	; 0x1890 <gpib_search+0x36>
    188e:	3c c0       	rjmp	.+120    	; 0x1908 <gpib_search+0xae>

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    1890:	f0 92 72 01 	sts	0x0172, r15	; 0x800172 <timeout_val+0x1>
    1894:	e0 92 71 01 	sts	0x0171, r14	; 0x800171 <timeout_val>
	
		addr++;
		if ((addr & 0x1f) != 31)
		{
			timeout_start(500);
			gpib_cmd_LAG(addr, is_timedout);
    1898:	6e e0       	ldi	r22, 0x0E	; 14
    189a:	7a e0       	ldi	r23, 0x0A	; 10
    189c:	8c 2f       	mov	r24, r28
    189e:	8d de       	rcall	.-742    	; 0x15ba <gpib_cmd_LAG>
			
			ATN_HIGH; /* make ATN H */
    18a0:	86 98       	cbi	0x10, 6	; 16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18a2:	8f e3       	ldi	r24, 0x3F	; 63
    18a4:	9f e1       	ldi	r25, 0x1F	; 31
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <gpib_search+0x4c>
    18aa:	00 c0       	rjmp	.+0      	; 0x18ac <gpib_search+0x52>
    18ac:	00 00       	nop
			_delay_ms(2);
			if ( (NDAC_STATE == 0) && (ATN_STATE != 0))
    18ae:	37 99       	sbic	0x06, 7	; 6
    18b0:	2b c0       	rjmp	.+86     	; 0x1908 <gpib_search+0xae>
    18b2:	7e 9b       	sbis	0x0f, 6	; 15
    18b4:	29 c0       	rjmp	.+82     	; 0x1908 <gpib_search+0xae>
	foundaddr = 255;
	addr = 255;
	do
	{
	
		addr++;
    18b6:	dc 2f       	mov	r29, r28

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    18b8:	84 ef       	ldi	r24, 0xF4	; 244
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <timeout_val+0x1>
    18c0:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <timeout_val>
		
	}
	while ( (addr < 63) && (foundaddr == 255));
	
	timeout_start(500);
	gpib_tx(0x3F, true, is_timedout); // UNL
    18c4:	4e e0       	ldi	r20, 0x0E	; 14
    18c6:	5a e0       	ldi	r21, 0x0A	; 10
    18c8:	61 e0       	ldi	r22, 0x01	; 1
    18ca:	8f e3       	ldi	r24, 0x3F	; 63
    18cc:	32 de       	rcall	.-924    	; 0x1532 <gpib_tx>
	
	/* if the device needs a secondary address, ensure, that it really cannot be addressed without secondary address */
	if (addr >= 32)
    18ce:	c0 32       	cpi	r28, 0x20	; 32
    18d0:	00 f1       	brcs	.+64     	; 0x1912 <gpib_search+0xb8>
	{
		/* address once without SA. If it responds, force it to this primary addressing only! */
		gpib_cmd_LAG(addr & 0x1f, is_timedout);
    18d2:	6e e0       	ldi	r22, 0x0E	; 14
    18d4:	7a e0       	ldi	r23, 0x0A	; 10
    18d6:	81 2f       	mov	r24, r17
    18d8:	70 de       	rcall	.-800    	; 0x15ba <gpib_cmd_LAG>
		ATN_HIGH; /* make ATN H */
    18da:	86 98       	cbi	0x10, 6	; 16
    18dc:	8f e3       	ldi	r24, 0x3F	; 63
    18de:	9f e1       	ldi	r25, 0x1F	; 31
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	f1 f7       	brne	.-4      	; 0x18e0 <gpib_search+0x86>
    18e4:	00 c0       	rjmp	.+0      	; 0x18e6 <gpib_search+0x8c>
    18e6:	00 00       	nop
		_delay_ms(2);
		if ( (NDAC_STATE == 0) && (ATN_STATE != 0))
    18e8:	37 99       	sbic	0x06, 7	; 6
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <gpib_search+0x96>
    18ec:	7e 99       	sbic	0x0f, 6	; 15
    18ee:	d1 2f       	mov	r29, r17

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    18f0:	84 ef       	ldi	r24, 0xF4	; 244
    18f2:	91 e0       	ldi	r25, 0x01	; 1
    18f4:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <timeout_val+0x1>
    18f8:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <timeout_val>
		if ( (NDAC_STATE == 0) && (ATN_STATE != 0))
		{
			foundaddr = addr & 0x1f;
		}
		timeout_start(500);
		gpib_tx(0x3F, true, is_timedout); // UNL
    18fc:	4e e0       	ldi	r20, 0x0E	; 14
    18fe:	5a e0       	ldi	r21, 0x0A	; 10
    1900:	61 e0       	ldi	r22, 0x01	; 1
    1902:	8f e3       	ldi	r24, 0x3F	; 63
    1904:	16 de       	rcall	.-980    	; 0x1532 <gpib_tx>
	}
	
	//return 1;
		
	return foundaddr;
    1906:	05 c0       	rjmp	.+10     	; 0x1912 <gpib_search+0xb8>
				foundaddr = addr;
			}
		}
		
	}
	while ( (addr < 63) && (foundaddr == 255));
    1908:	cf 33       	cpi	r28, 0x3F	; 63
    190a:	09 f0       	breq	.+2      	; 0x190e <gpib_search+0xb4>
    190c:	bb cf       	rjmp	.-138    	; 0x1884 <gpib_search+0x2a>
    190e:	df ef       	ldi	r29, 0xFF	; 255
    1910:	d3 cf       	rjmp	.-90     	; 0x18b8 <gpib_search+0x5e>
	}
	
	//return 1;
		
	return foundaddr;
}
    1912:	8d 2f       	mov	r24, r29
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	1f 91       	pop	r17
    191a:	ff 90       	pop	r15
    191c:	ef 90       	pop	r14
    191e:	08 95       	ret

00001920 <Endpoint_Write_Stream_LE>:
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1920:	cf 92       	push	r12
    1922:	df 92       	push	r13
    1924:	ef 92       	push	r14
    1926:	ff 92       	push	r15
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	ec 01       	movw	r28, r24
    1932:	8b 01       	movw	r16, r22
    1934:	7a 01       	movw	r14, r20
    1936:	12 d2       	rcall	.+1060   	; 0x1d5c <Endpoint_WaitUntilReady>
    1938:	81 11       	cpse	r24, r1
    193a:	32 c0       	rjmp	.+100    	; 0x19a0 <Endpoint_Write_Stream_LE+0x80>
    193c:	e1 14       	cp	r14, r1
    193e:	f1 04       	cpc	r15, r1
    1940:	39 f0       	breq	.+14     	; 0x1950 <Endpoint_Write_Stream_LE+0x30>
    1942:	f7 01       	movw	r30, r14
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	08 1b       	sub	r16, r24
    194a:	19 0b       	sbc	r17, r25
    194c:	c8 0f       	add	r28, r24
    194e:	d9 1f       	adc	r29, r25
    1950:	c1 2c       	mov	r12, r1
    1952:	d1 2c       	mov	r13, r1
    1954:	01 15       	cp	r16, r1
    1956:	11 05       	cpc	r17, r1
    1958:	11 f1       	breq	.+68     	; 0x199e <Endpoint_Write_Stream_LE+0x7e>
    195a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    195e:	85 fd       	sbrc	r24, 5
    1960:	15 c0       	rjmp	.+42     	; 0x198c <Endpoint_Write_Stream_LE+0x6c>
    1962:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1966:	8e 77       	andi	r24, 0x7E	; 126
    1968:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    196c:	e1 14       	cp	r14, r1
    196e:	f1 04       	cpc	r15, r1
    1970:	49 f0       	breq	.+18     	; 0x1984 <Endpoint_Write_Stream_LE+0x64>
    1972:	f7 01       	movw	r30, r14
    1974:	80 81       	ld	r24, Z
    1976:	91 81       	ldd	r25, Z+1	; 0x01
    1978:	c8 0e       	add	r12, r24
    197a:	d9 1e       	adc	r13, r25
    197c:	d1 82       	std	Z+1, r13	; 0x01
    197e:	c0 82       	st	Z, r12
    1980:	85 e0       	ldi	r24, 0x05	; 5
    1982:	0e c0       	rjmp	.+28     	; 0x19a0 <Endpoint_Write_Stream_LE+0x80>
    1984:	eb d1       	rcall	.+982    	; 0x1d5c <Endpoint_WaitUntilReady>
    1986:	88 23       	and	r24, r24
    1988:	29 f3       	breq	.-54     	; 0x1954 <Endpoint_Write_Stream_LE+0x34>
    198a:	0a c0       	rjmp	.+20     	; 0x19a0 <Endpoint_Write_Stream_LE+0x80>
    198c:	89 91       	ld	r24, Y+
    198e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1992:	01 50       	subi	r16, 0x01	; 1
    1994:	11 09       	sbc	r17, r1
    1996:	ff ef       	ldi	r31, 0xFF	; 255
    1998:	cf 1a       	sub	r12, r31
    199a:	df 0a       	sbc	r13, r31
    199c:	db cf       	rjmp	.-74     	; 0x1954 <Endpoint_Write_Stream_LE+0x34>
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	1f 91       	pop	r17
    19a6:	0f 91       	pop	r16
    19a8:	ff 90       	pop	r15
    19aa:	ef 90       	pop	r14
    19ac:	df 90       	pop	r13
    19ae:	cf 90       	pop	r12
    19b0:	08 95       	ret

000019b2 <Endpoint_Read_Stream_LE>:
    19b2:	cf 92       	push	r12
    19b4:	df 92       	push	r13
    19b6:	ef 92       	push	r14
    19b8:	ff 92       	push	r15
    19ba:	0f 93       	push	r16
    19bc:	1f 93       	push	r17
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	ec 01       	movw	r28, r24
    19c4:	8b 01       	movw	r16, r22
    19c6:	7a 01       	movw	r14, r20
    19c8:	c9 d1       	rcall	.+914    	; 0x1d5c <Endpoint_WaitUntilReady>
    19ca:	81 11       	cpse	r24, r1
    19cc:	32 c0       	rjmp	.+100    	; 0x1a32 <Endpoint_Read_Stream_LE+0x80>
    19ce:	e1 14       	cp	r14, r1
    19d0:	f1 04       	cpc	r15, r1
    19d2:	39 f0       	breq	.+14     	; 0x19e2 <Endpoint_Read_Stream_LE+0x30>
    19d4:	f7 01       	movw	r30, r14
    19d6:	80 81       	ld	r24, Z
    19d8:	91 81       	ldd	r25, Z+1	; 0x01
    19da:	08 1b       	sub	r16, r24
    19dc:	19 0b       	sbc	r17, r25
    19de:	c8 0f       	add	r28, r24
    19e0:	d9 1f       	adc	r29, r25
    19e2:	c1 2c       	mov	r12, r1
    19e4:	d1 2c       	mov	r13, r1
    19e6:	01 15       	cp	r16, r1
    19e8:	11 05       	cpc	r17, r1
    19ea:	11 f1       	breq	.+68     	; 0x1a30 <Endpoint_Read_Stream_LE+0x7e>
    19ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19f0:	85 fd       	sbrc	r24, 5
    19f2:	15 c0       	rjmp	.+42     	; 0x1a1e <Endpoint_Read_Stream_LE+0x6c>
    19f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19f8:	8b 77       	andi	r24, 0x7B	; 123
    19fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19fe:	e1 14       	cp	r14, r1
    1a00:	f1 04       	cpc	r15, r1
    1a02:	49 f0       	breq	.+18     	; 0x1a16 <Endpoint_Read_Stream_LE+0x64>
    1a04:	f7 01       	movw	r30, r14
    1a06:	80 81       	ld	r24, Z
    1a08:	91 81       	ldd	r25, Z+1	; 0x01
    1a0a:	c8 0e       	add	r12, r24
    1a0c:	d9 1e       	adc	r13, r25
    1a0e:	d1 82       	std	Z+1, r13	; 0x01
    1a10:	c0 82       	st	Z, r12
    1a12:	85 e0       	ldi	r24, 0x05	; 5
    1a14:	0e c0       	rjmp	.+28     	; 0x1a32 <Endpoint_Read_Stream_LE+0x80>
    1a16:	a2 d1       	rcall	.+836    	; 0x1d5c <Endpoint_WaitUntilReady>
    1a18:	88 23       	and	r24, r24
    1a1a:	29 f3       	breq	.-54     	; 0x19e6 <Endpoint_Read_Stream_LE+0x34>
    1a1c:	0a c0       	rjmp	.+20     	; 0x1a32 <Endpoint_Read_Stream_LE+0x80>
    1a1e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1a22:	89 93       	st	Y+, r24
    1a24:	01 50       	subi	r16, 0x01	; 1
    1a26:	11 09       	sbc	r17, r1
    1a28:	ff ef       	ldi	r31, 0xFF	; 255
    1a2a:	cf 1a       	sub	r12, r31
    1a2c:	df 0a       	sbc	r13, r31
    1a2e:	db cf       	rjmp	.-74     	; 0x19e6 <Endpoint_Read_Stream_LE+0x34>
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	df 90       	pop	r13
    1a40:	cf 90       	pop	r12
    1a42:	08 95       	ret

00001a44 <Endpoint_Write_Control_Stream_LE>:
    1a44:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <USB_ControlRequest+0x6>
    1a48:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <USB_ControlRequest+0x7>
    1a4c:	26 17       	cp	r18, r22
    1a4e:	37 07       	cpc	r19, r23
    1a50:	48 f0       	brcs	.+18     	; 0x1a64 <Endpoint_Write_Control_Stream_LE+0x20>
    1a52:	61 15       	cp	r22, r1
    1a54:	71 05       	cpc	r23, r1
    1a56:	39 f4       	brne	.+14     	; 0x1a66 <Endpoint_Write_Control_Stream_LE+0x22>
    1a58:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a5c:	2e 77       	andi	r18, 0x7E	; 126
    1a5e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <Endpoint_Write_Control_Stream_LE+0x22>
    1a64:	b9 01       	movw	r22, r18
    1a66:	fc 01       	movw	r30, r24
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	61 15       	cp	r22, r1
    1a6c:	71 05       	cpc	r23, r1
    1a6e:	79 f1       	breq	.+94     	; 0x1ace <Endpoint_Write_Control_Stream_LE+0x8a>
    1a70:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
    1a74:	88 23       	and	r24, r24
    1a76:	f1 f1       	breq	.+124    	; 0x1af4 <Endpoint_Write_Control_Stream_LE+0xb0>
    1a78:	85 30       	cpi	r24, 0x05	; 5
    1a7a:	f1 f1       	breq	.+124    	; 0x1af8 <Endpoint_Write_Control_Stream_LE+0xb4>
    1a7c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a80:	83 fd       	sbrc	r24, 3
    1a82:	3c c0       	rjmp	.+120    	; 0x1afc <Endpoint_Write_Control_Stream_LE+0xb8>
    1a84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a88:	82 fd       	sbrc	r24, 2
    1a8a:	2e c0       	rjmp	.+92     	; 0x1ae8 <Endpoint_Write_Control_Stream_LE+0xa4>
    1a8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a90:	80 ff       	sbrs	r24, 0
    1a92:	eb cf       	rjmp	.-42     	; 0x1a6a <Endpoint_Write_Control_Stream_LE+0x26>
    1a94:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1a98:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	92 2b       	or	r25, r18
    1aa0:	61 15       	cp	r22, r1
    1aa2:	71 05       	cpc	r23, r1
    1aa4:	51 f0       	breq	.+20     	; 0x1aba <Endpoint_Write_Control_Stream_LE+0x76>
    1aa6:	88 30       	cpi	r24, 0x08	; 8
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	38 f4       	brcc	.+14     	; 0x1aba <Endpoint_Write_Control_Stream_LE+0x76>
    1aac:	21 91       	ld	r18, Z+
    1aae:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1ab2:	61 50       	subi	r22, 0x01	; 1
    1ab4:	71 09       	sbc	r23, r1
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	f3 cf       	rjmp	.-26     	; 0x1aa0 <Endpoint_Write_Control_Stream_LE+0x5c>
    1aba:	21 e0       	ldi	r18, 0x01	; 1
    1abc:	08 97       	sbiw	r24, 0x08	; 8
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <Endpoint_Write_Control_Stream_LE+0x7e>
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ac6:	8e 77       	andi	r24, 0x7E	; 126
    1ac8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1acc:	ce cf       	rjmp	.-100    	; 0x1a6a <Endpoint_Write_Control_Stream_LE+0x26>
    1ace:	21 11       	cpse	r18, r1
    1ad0:	cf cf       	rjmp	.-98     	; 0x1a70 <Endpoint_Write_Control_Stream_LE+0x2c>
    1ad2:	0a c0       	rjmp	.+20     	; 0x1ae8 <Endpoint_Write_Control_Stream_LE+0xa4>
    1ad4:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
    1ad8:	88 23       	and	r24, r24
    1ada:	61 f0       	breq	.+24     	; 0x1af4 <Endpoint_Write_Control_Stream_LE+0xb0>
    1adc:	85 30       	cpi	r24, 0x05	; 5
    1ade:	61 f0       	breq	.+24     	; 0x1af8 <Endpoint_Write_Control_Stream_LE+0xb4>
    1ae0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ae4:	83 fd       	sbrc	r24, 3
    1ae6:	0a c0       	rjmp	.+20     	; 0x1afc <Endpoint_Write_Control_Stream_LE+0xb8>
    1ae8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1aec:	82 ff       	sbrs	r24, 2
    1aee:	f2 cf       	rjmp	.-28     	; 0x1ad4 <Endpoint_Write_Control_Stream_LE+0x90>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	08 95       	ret
    1af4:	82 e0       	ldi	r24, 0x02	; 2
    1af6:	08 95       	ret
    1af8:	83 e0       	ldi	r24, 0x03	; 3
    1afa:	08 95       	ret
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	08 95       	ret

00001b00 <Endpoint_Write_Control_PStream_LE>:
    1b00:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <USB_ControlRequest+0x6>
    1b04:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <USB_ControlRequest+0x7>
    1b08:	26 17       	cp	r18, r22
    1b0a:	37 07       	cpc	r19, r23
    1b0c:	48 f0       	brcs	.+18     	; 0x1b20 <Endpoint_Write_Control_PStream_LE+0x20>
    1b0e:	61 15       	cp	r22, r1
    1b10:	71 05       	cpc	r23, r1
    1b12:	39 f4       	brne	.+14     	; 0x1b22 <Endpoint_Write_Control_PStream_LE+0x22>
    1b14:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b18:	2e 77       	andi	r18, 0x7E	; 126
    1b1a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b1e:	01 c0       	rjmp	.+2      	; 0x1b22 <Endpoint_Write_Control_PStream_LE+0x22>
    1b20:	b9 01       	movw	r22, r18
    1b22:	fc 01       	movw	r30, r24
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	61 15       	cp	r22, r1
    1b28:	71 05       	cpc	r23, r1
    1b2a:	91 f1       	breq	.+100    	; 0x1b90 <Endpoint_Write_Control_PStream_LE+0x90>
    1b2c:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
    1b30:	88 23       	and	r24, r24
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <Endpoint_Write_Control_PStream_LE+0x36>
    1b34:	40 c0       	rjmp	.+128    	; 0x1bb6 <Endpoint_Write_Control_PStream_LE+0xb6>
    1b36:	85 30       	cpi	r24, 0x05	; 5
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <Endpoint_Write_Control_PStream_LE+0x3c>
    1b3a:	3f c0       	rjmp	.+126    	; 0x1bba <Endpoint_Write_Control_PStream_LE+0xba>
    1b3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b40:	83 fd       	sbrc	r24, 3
    1b42:	3d c0       	rjmp	.+122    	; 0x1bbe <Endpoint_Write_Control_PStream_LE+0xbe>
    1b44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b48:	82 fd       	sbrc	r24, 2
    1b4a:	2f c0       	rjmp	.+94     	; 0x1baa <Endpoint_Write_Control_PStream_LE+0xaa>
    1b4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b50:	80 ff       	sbrs	r24, 0
    1b52:	e9 cf       	rjmp	.-46     	; 0x1b26 <Endpoint_Write_Control_PStream_LE+0x26>
    1b54:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1b58:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	92 2b       	or	r25, r18
    1b60:	61 15       	cp	r22, r1
    1b62:	71 05       	cpc	r23, r1
    1b64:	59 f0       	breq	.+22     	; 0x1b7c <Endpoint_Write_Control_PStream_LE+0x7c>
    1b66:	88 30       	cpi	r24, 0x08	; 8
    1b68:	91 05       	cpc	r25, r1
    1b6a:	40 f4       	brcc	.+16     	; 0x1b7c <Endpoint_Write_Control_PStream_LE+0x7c>
    1b6c:	24 91       	lpm	r18, Z
    1b6e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1b72:	31 96       	adiw	r30, 0x01	; 1
    1b74:	61 50       	subi	r22, 0x01	; 1
    1b76:	71 09       	sbc	r23, r1
    1b78:	01 96       	adiw	r24, 0x01	; 1
    1b7a:	f2 cf       	rjmp	.-28     	; 0x1b60 <Endpoint_Write_Control_PStream_LE+0x60>
    1b7c:	21 e0       	ldi	r18, 0x01	; 1
    1b7e:	08 97       	sbiw	r24, 0x08	; 8
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <Endpoint_Write_Control_PStream_LE+0x84>
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b88:	8e 77       	andi	r24, 0x7E	; 126
    1b8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b8e:	cb cf       	rjmp	.-106    	; 0x1b26 <Endpoint_Write_Control_PStream_LE+0x26>
    1b90:	21 11       	cpse	r18, r1
    1b92:	cc cf       	rjmp	.-104    	; 0x1b2c <Endpoint_Write_Control_PStream_LE+0x2c>
    1b94:	0a c0       	rjmp	.+20     	; 0x1baa <Endpoint_Write_Control_PStream_LE+0xaa>
    1b96:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
    1b9a:	88 23       	and	r24, r24
    1b9c:	61 f0       	breq	.+24     	; 0x1bb6 <Endpoint_Write_Control_PStream_LE+0xb6>
    1b9e:	85 30       	cpi	r24, 0x05	; 5
    1ba0:	61 f0       	breq	.+24     	; 0x1bba <Endpoint_Write_Control_PStream_LE+0xba>
    1ba2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ba6:	83 fd       	sbrc	r24, 3
    1ba8:	0a c0       	rjmp	.+20     	; 0x1bbe <Endpoint_Write_Control_PStream_LE+0xbe>
    1baa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bae:	82 ff       	sbrs	r24, 2
    1bb0:	f2 cf       	rjmp	.-28     	; 0x1b96 <Endpoint_Write_Control_PStream_LE+0x96>
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	08 95       	ret
    1bb6:	82 e0       	ldi	r24, 0x02	; 2
    1bb8:	08 95       	ret
    1bba:	83 e0       	ldi	r24, 0x03	; 3
    1bbc:	08 95       	ret
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	08 95       	ret

00001bc2 <Endpoint_Write_Control_EStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1bc2:	cf 92       	push	r12
    1bc4:	df 92       	push	r13
    1bc6:	ef 92       	push	r14
    1bc8:	ff 92       	push	r15
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	eb 01       	movw	r28, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1bd4:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <USB_ControlRequest+0x6>
    1bd8:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <USB_ControlRequest+0x7>
    1bdc:	26 17       	cp	r18, r22
    1bde:	37 07       	cpc	r19, r23
    1be0:	40 f0       	brcs	.+16     	; 0x1bf2 <Endpoint_Write_Control_EStream_LE+0x30>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1be2:	20 97       	sbiw	r28, 0x00	; 0
    1be4:	39 f4       	brne	.+14     	; 0x1bf4 <Endpoint_Write_Control_EStream_LE+0x32>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1be6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bea:	2e 77       	andi	r18, 0x7E	; 126
    1bec:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bf0:	01 c0       	rjmp	.+2      	; 0x1bf4 <Endpoint_Write_Control_EStream_LE+0x32>
    1bf2:	e9 01       	movw	r28, r18
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
    1bf4:	6c 01       	movw	r12, r24
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1bf8:	20 97       	sbiw	r28, 0x00	; 0
    1bfa:	d9 f1       	breq	.+118    	; 0x1c72 <Endpoint_Write_Control_EStream_LE+0xb0>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1bfc:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c00:	88 23       	and	r24, r24
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <Endpoint_Write_Control_EStream_LE+0x44>
    1c04:	49 c0       	rjmp	.+146    	; 0x1c98 <Endpoint_Write_Control_EStream_LE+0xd6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c06:	85 30       	cpi	r24, 0x05	; 5
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <Endpoint_Write_Control_EStream_LE+0x4a>
    1c0a:	48 c0       	rjmp	.+144    	; 0x1c9c <Endpoint_Write_Control_EStream_LE+0xda>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1c0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1c10:	83 fd       	sbrc	r24, 3
    1c12:	46 c0       	rjmp	.+140    	; 0x1ca0 <Endpoint_Write_Control_EStream_LE+0xde>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1c18:	82 fd       	sbrc	r24, 2
    1c1a:	38 c0       	rjmp	.+112    	; 0x1c8c <Endpoint_Write_Control_EStream_LE+0xca>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    1c20:	80 ff       	sbrs	r24, 0
    1c22:	ea cf       	rjmp	.-44     	; 0x1bf8 <Endpoint_Write_Control_EStream_LE+0x36>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1c24:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1c28:	00 91 f2 00 	lds	r16, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1c2c:	10 e0       	ldi	r17, 0x00	; 0
    1c2e:	18 2b       	or	r17, r24
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
    1c30:	78 01       	movw	r14, r16
    1c32:	c7 01       	movw	r24, r14
    1c34:	80 1b       	sub	r24, r16
    1c36:	91 0b       	sbc	r25, r17
    1c38:	8c 0d       	add	r24, r12
    1c3a:	9d 1d       	adc	r25, r13

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1c3c:	20 97       	sbiw	r28, 0x00	; 0
    1c3e:	61 f0       	breq	.+24     	; 0x1c58 <Endpoint_Write_Control_EStream_LE+0x96>
    1c40:	38 e0       	ldi	r19, 0x08	; 8
    1c42:	e3 16       	cp	r14, r19
    1c44:	f1 04       	cpc	r15, r1
    1c46:	40 f4       	brcc	.+16     	; 0x1c58 <Endpoint_Write_Control_EStream_LE+0x96>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1c48:	a8 d3       	rcall	.+1872   	; 0x239a <eeprom_read_byte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c4a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1c4e:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    1c50:	2f ef       	ldi	r18, 0xFF	; 255
    1c52:	e2 1a       	sub	r14, r18
    1c54:	f2 0a       	sbc	r15, r18
    1c56:	ed cf       	rjmp	.-38     	; 0x1c32 <Endpoint_Write_Control_EStream_LE+0x70>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1c58:	21 e0       	ldi	r18, 0x01	; 1
    1c5a:	38 e0       	ldi	r19, 0x08	; 8
    1c5c:	e3 16       	cp	r14, r19
    1c5e:	f1 04       	cpc	r15, r1
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <Endpoint_Write_Control_EStream_LE+0xa2>
    1c62:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c64:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c68:	3e 77       	andi	r19, 0x7E	; 126
    1c6a:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c6e:	6c 01       	movw	r12, r24
    1c70:	c3 cf       	rjmp	.-122    	; 0x1bf8 <Endpoint_Write_Control_EStream_LE+0x36>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1c72:	21 11       	cpse	r18, r1
    1c74:	c3 cf       	rjmp	.-122    	; 0x1bfc <Endpoint_Write_Control_EStream_LE+0x3a>
    1c76:	0a c0       	rjmp	.+20     	; 0x1c8c <Endpoint_Write_Control_EStream_LE+0xca>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c78:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c7c:	88 23       	and	r24, r24
    1c7e:	61 f0       	breq	.+24     	; 0x1c98 <Endpoint_Write_Control_EStream_LE+0xd6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c80:	85 30       	cpi	r24, 0x05	; 5
    1c82:	61 f0       	breq	.+24     	; 0x1c9c <Endpoint_Write_Control_EStream_LE+0xda>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1c84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1c88:	83 fd       	sbrc	r24, 3
    1c8a:	0a c0       	rjmp	.+20     	; 0x1ca0 <Endpoint_Write_Control_EStream_LE+0xde>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1c90:	82 ff       	sbrs	r24, 2
    1c92:	f2 cf       	rjmp	.-28     	; 0x1c78 <Endpoint_Write_Control_EStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	05 c0       	rjmp	.+10     	; 0x1ca2 <Endpoint_Write_Control_EStream_LE+0xe0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1c98:	82 e0       	ldi	r24, 0x02	; 2
    1c9a:	03 c0       	rjmp	.+6      	; 0x1ca2 <Endpoint_Write_Control_EStream_LE+0xe0>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1c9c:	83 e0       	ldi	r24, 0x03	; 3
    1c9e:	01 c0       	rjmp	.+2      	; 0x1ca2 <Endpoint_Write_Control_EStream_LE+0xe0>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	1f 91       	pop	r17
    1ca8:	0f 91       	pop	r16
    1caa:	ff 90       	pop	r15
    1cac:	ef 90       	pop	r14
    1cae:	df 90       	pop	r13
    1cb0:	cf 90       	pop	r12
    1cb2:	08 95       	ret

00001cb4 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1cb4:	98 2f       	mov	r25, r24
    1cb6:	97 30       	cpi	r25, 0x07	; 7
    1cb8:	68 f5       	brcc	.+90     	; 0x1d14 <Endpoint_ConfigureEndpoint_Prv+0x60>
    1cba:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1cbe:	98 17       	cp	r25, r24
    1cc0:	39 f0       	breq	.+14     	; 0x1cd0 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    1cc2:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1cc6:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1cca:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1cce:	03 c0       	rjmp	.+6      	; 0x1cd6 <Endpoint_ConfigureEndpoint_Prv+0x22>
    1cd0:	24 2f       	mov	r18, r20
    1cd2:	76 2f       	mov	r23, r22
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	21 fd       	sbrc	r18, 1
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <Endpoint_ConfigureEndpoint_Prv+0x2a>
    1cda:	9f 5f       	subi	r25, 0xFF	; 255
    1cdc:	ec cf       	rjmp	.-40     	; 0x1cb6 <Endpoint_ConfigureEndpoint_Prv+0x2>
    1cde:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1ce2:	3e 7f       	andi	r19, 0xFE	; 254
    1ce4:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1ce8:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1cec:	3d 7f       	andi	r19, 0xFD	; 253
    1cee:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1cf2:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1cf6:	31 60       	ori	r19, 0x01	; 1
    1cf8:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1cfc:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1d00:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1d04:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1d08:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1d0c:	27 fd       	sbrc	r18, 7
    1d0e:	e5 cf       	rjmp	.-54     	; 0x1cda <Endpoint_ConfigureEndpoint_Prv+0x26>
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	08 95       	ret
    1d14:	8f 70       	andi	r24, 0x0F	; 15
    1d16:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	08 95       	ret

00001d1e <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1d1e:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>
    1d22:	87 ff       	sbrs	r24, 7
    1d24:	11 c0       	rjmp	.+34     	; 0x1d48 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1d2a:	82 fd       	sbrc	r24, 2
    1d2c:	05 c0       	rjmp	.+10     	; 0x1d38 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1d2e:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
    1d32:	81 11       	cpse	r24, r1
    1d34:	f8 cf       	rjmp	.-16     	; 0x1d26 <Endpoint_ClearStatusStage+0x8>
    1d36:	11 c0       	rjmp	.+34     	; 0x1d5a <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d3c:	8b 77       	andi	r24, 0x7B	; 123
    1d3e:	0b c0       	rjmp	.+22     	; 0x1d56 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1d40:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
    1d44:	88 23       	and	r24, r24
    1d46:	49 f0       	breq	.+18     	; 0x1d5a <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1d4c:	80 ff       	sbrs	r24, 0
    1d4e:	f8 cf       	rjmp	.-16     	; 0x1d40 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d54:	8e 77       	andi	r24, 0x7E	; 126
    1d56:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d5a:	08 95       	ret

00001d5c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1d5c:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1d60:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1d64:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1d66:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1d6a:	84 2f       	mov	r24, r20
    1d6c:	81 70       	andi	r24, 0x01	; 1
    1d6e:	40 ff       	sbrs	r20, 0
    1d70:	23 c0       	rjmp	.+70     	; 0x1db8 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1d76:	80 fd       	sbrc	r24, 0
    1d78:	1d c0       	rjmp	.+58     	; 0x1db4 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1d7a:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1d7e:	88 23       	and	r24, r24
    1d80:	99 f0       	breq	.+38     	; 0x1da8 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1d82:	85 30       	cpi	r24, 0x05	; 5
    1d84:	99 f0       	breq	.+38     	; 0x1dac <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d86:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1d8a:	85 fd       	sbrc	r24, 5
    1d8c:	11 c0       	rjmp	.+34     	; 0x1db0 <Endpoint_WaitUntilReady+0x54>
    1d8e:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1d92:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1d96:	24 17       	cp	r18, r20
    1d98:	35 07       	cpc	r19, r21
    1d9a:	29 f3       	breq	.-54     	; 0x1d66 <Endpoint_WaitUntilReady+0xa>
    1d9c:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1d9e:	11 f0       	breq	.+4      	; 0x1da4 <Endpoint_WaitUntilReady+0x48>
    1da0:	9a 01       	movw	r18, r20
    1da2:	e1 cf       	rjmp	.-62     	; 0x1d66 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1da4:	84 e0       	ldi	r24, 0x04	; 4
    1da6:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1da8:	82 e0       	ldi	r24, 0x02	; 2
    1daa:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1dac:	83 e0       	ldi	r24, 0x03	; 3
    1dae:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1db8:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1dbc:	42 ff       	sbrs	r20, 2
    1dbe:	dd cf       	rjmp	.-70     	; 0x1d7a <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1dc0:	08 95       	ret

00001dc2 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1dc2:	67 d0       	rcall	.+206    	; 0x1e92 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1dc4:	6e d0       	rcall	.+220    	; 0x1ea2 <USB_INT_ClearAllInterrupts>
    1dc6:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	81 60       	ori	r24, 0x01	; 1
    1dce:	80 83       	st	Z, r24
    1dd0:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	8f 77       	andi	r24, 0x7F	; 127
    1dd8:	80 83       	st	Z, r24
    1dda:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ddc:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	8c 91       	ld	r24, X
    1de2:	8e 7f       	andi	r24, 0xFE	; 254
    1de4:	8c 93       	st	X, r24
    1de6:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1de8:	8f 7e       	andi	r24, 0xEF	; 239
    1dea:	80 83       	st	Z, r24
    1dec:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1df0:	08 95       	ret

00001df2 <USB_ResetInterface>:
    1df2:	0f 93       	push	r16
}

void USB_ResetInterface(void)
{
    1df4:	1f 93       	push	r17
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1dfa:	4b d0       	rcall	.+150    	; 0x1e92 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1dfc:	52 d0       	rcall	.+164    	; 0x1ea2 <USB_INT_ClearAllInterrupts>
    1dfe:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1e00:	d0 e0       	ldi	r29, 0x00	; 0
    1e02:	88 81       	ld	r24, Y
    1e04:	8f 77       	andi	r24, 0x7F	; 127
    1e06:	88 83       	st	Y, r24
    1e08:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    1e0a:	80 68       	ori	r24, 0x80	; 128
    1e0c:	88 83       	st	Y, r24
    1e0e:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1e10:	8f 7d       	andi	r24, 0xDF	; 223
    1e12:	88 83       	st	Y, r24
    1e14:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1e16:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1e1a:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    1e1e:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1e22:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1e26:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1e28:	10 e0       	ldi	r17, 0x00	; 0
    1e2a:	f8 01       	movw	r30, r16
    1e2c:	80 81       	ld	r24, Z
    1e2e:	8b 7f       	andi	r24, 0xFB	; 251
    1e30:	80 83       	st	Z, r24
    1e32:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1e34:	81 60       	ori	r24, 0x01	; 1
    1e36:	88 83       	st	Y, r24
    1e38:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	3a df       	rcall	.-396    	; 0x1cb4 <Endpoint_ConfigureEndpoint_Prv>
    1e40:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	8e 7f       	andi	r24, 0xFE	; 254
    1e48:	80 83       	st	Z, r24
    1e4a:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	81 60       	ori	r24, 0x01	; 1
    1e52:	80 83       	st	Z, r24
    1e54:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1e56:	88 60       	ori	r24, 0x08	; 8
    1e58:	80 83       	st	Z, r24
    1e5a:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8e 7f       	andi	r24, 0xFE	; 254
    1e60:	80 83       	st	Z, r24
    1e62:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1e64:	80 61       	ori	r24, 0x10	; 16
    1e66:	88 83       	st	Y, r24
    1e68:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1e6a:	cf 91       	pop	r28
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	08 95       	ret

00001e72 <USB_Init>:
    1e72:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	8f 7e       	andi	r24, 0xEF	; 239
    1e7a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1e7c:	e7 ed       	ldi	r30, 0xD7	; 215
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	81 60       	ori	r24, 0x01	; 1
    1e84:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1e86:	84 e0       	ldi	r24, 0x04	; 4
    1e88:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <USB_IsInitialized>

	USB_ResetInterface();
    1e90:	b0 cf       	rjmp	.-160    	; 0x1df2 <USB_ResetInterface>

00001e92 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1e92:	e8 ed       	ldi	r30, 0xD8	; 216
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	8e 7f       	andi	r24, 0xFE	; 254
    1e9a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1e9c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1ea0:	08 95       	ret

00001ea2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1ea2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1ea6:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1eaa:	08 95       	ret

00001eac <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1eac:	1f 92       	push	r1
    1eae:	0f 92       	push	r0
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	0f 92       	push	r0
    1eb4:	11 24       	eor	r1, r1
    1eb6:	2f 93       	push	r18
    1eb8:	3f 93       	push	r19
    1eba:	4f 93       	push	r20
    1ebc:	5f 93       	push	r21
    1ebe:	6f 93       	push	r22
    1ec0:	7f 93       	push	r23
    1ec2:	8f 93       	push	r24
    1ec4:	9f 93       	push	r25
    1ec6:	af 93       	push	r26
    1ec8:	bf 93       	push	r27
    1eca:	ef 93       	push	r30
    1ecc:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1ece:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1ed2:	82 ff       	sbrs	r24, 2
    1ed4:	0a c0       	rjmp	.+20     	; 0x1eea <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1ed6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1eda:	82 ff       	sbrs	r24, 2
    1edc:	06 c0       	rjmp	.+12     	; 0x1eea <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1ede:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1ee2:	8b 7f       	andi	r24, 0xFB	; 251
    1ee4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1ee8:	28 d2       	rcall	.+1104   	; 0x233a <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1eea:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1eee:	80 ff       	sbrs	r24, 0
    1ef0:	1f c0       	rjmp	.+62     	; 0x1f30 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1ef2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1ef6:	80 ff       	sbrs	r24, 0
    1ef8:	1b c0       	rjmp	.+54     	; 0x1f30 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1efa:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1efe:	8e 7f       	andi	r24, 0xFE	; 254
    1f00:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1f04:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1f08:	80 ff       	sbrs	r24, 0
    1f0a:	0d c0       	rjmp	.+26     	; 0x1f26 <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1f0c:	80 e1       	ldi	r24, 0x10	; 16
    1f0e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1f10:	82 e1       	ldi	r24, 0x12	; 18
    1f12:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1f14:	09 b4       	in	r0, 0x29	; 41
    1f16:	00 fe       	sbrs	r0, 0
    1f18:	fd cf       	rjmp	.-6      	; 0x1f14 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1f20:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <EVENT_USB_Device_Connect>
    1f24:	05 c0       	rjmp	.+10     	; 0x1f30 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1f26:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1f28:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1f2c:	0e 94 ed 03 	call	0x7da	; 0x7da <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1f30:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1f34:	80 ff       	sbrs	r24, 0
    1f36:	18 c0       	rjmp	.+48     	; 0x1f68 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1f38:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1f3c:	80 ff       	sbrs	r24, 0
    1f3e:	14 c0       	rjmp	.+40     	; 0x1f68 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1f40:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1f44:	8e 7f       	andi	r24, 0xFE	; 254
    1f46:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1f4a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1f4e:	80 61       	ori	r24, 0x10	; 16
    1f50:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1f54:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1f58:	80 62       	ori	r24, 0x20	; 32
    1f5a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1f5e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1f60:	85 e0       	ldi	r24, 0x05	; 5
    1f62:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1f66:	e9 d1       	rcall	.+978    	; 0x233a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1f68:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1f6c:	84 ff       	sbrs	r24, 4
    1f6e:	2f c0       	rjmp	.+94     	; 0x1fce <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1f70:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1f74:	84 ff       	sbrs	r24, 4
    1f76:	2b c0       	rjmp	.+86     	; 0x1fce <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1f78:	80 e1       	ldi	r24, 0x10	; 16
    1f7a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1f7c:	82 e1       	ldi	r24, 0x12	; 18
    1f7e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1f80:	09 b4       	in	r0, 0x29	; 41
    1f82:	00 fe       	sbrs	r0, 0
    1f84:	fd cf       	rjmp	.-6      	; 0x1f80 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1f86:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1f8a:	8f 7d       	andi	r24, 0xDF	; 223
    1f8c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1f90:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1f94:	8f 7e       	andi	r24, 0xEF	; 239
    1f96:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1f9a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1f9e:	8f 7e       	andi	r24, 0xEF	; 239
    1fa0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1fa4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1fa8:	81 60       	ori	r24, 0x01	; 1
    1faa:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1fae:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_Device_ConfigurationNumber>
    1fb2:	88 23       	and	r24, r24
    1fb4:	11 f0       	breq	.+4      	; 0x1fba <__vector_10+0x10e>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1fb6:	84 e0       	ldi	r24, 0x04	; 4
    1fb8:	07 c0       	rjmp	.+14     	; 0x1fc8 <__vector_10+0x11c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1fba:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1fbe:	87 fd       	sbrc	r24, 7
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <__vector_10+0x11a>
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	01 c0       	rjmp	.+2      	; 0x1fc8 <__vector_10+0x11c>
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1fcc:	b6 d1       	rcall	.+876    	; 0x233a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1fce:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1fd2:	83 ff       	sbrs	r24, 3
    1fd4:	27 c0       	rjmp	.+78     	; 0x2024 <__vector_10+0x178>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1fd6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1fda:	83 ff       	sbrs	r24, 3
    1fdc:	23 c0       	rjmp	.+70     	; 0x2024 <__vector_10+0x178>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1fde:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1fe2:	87 7f       	andi	r24, 0xF7	; 247
    1fe4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1fe8:	82 e0       	ldi	r24, 0x02	; 2
    1fea:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1fee:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1ff2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1ff6:	8e 7f       	andi	r24, 0xFE	; 254
    1ff8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1ffc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2000:	8e 7f       	andi	r24, 0xFE	; 254
    2002:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2006:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    200a:	80 61       	ori	r24, 0x10	; 16
    200c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2010:	42 e0       	ldi	r20, 0x02	; 2
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	4e de       	rcall	.-868    	; 0x1cb4 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2018:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    201c:	88 60       	ori	r24, 0x08	; 8
    201e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    2022:	8b d1       	rcall	.+790    	; 0x233a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2024:	ff 91       	pop	r31
    2026:	ef 91       	pop	r30
    2028:	bf 91       	pop	r27
    202a:	af 91       	pop	r26
    202c:	9f 91       	pop	r25
    202e:	8f 91       	pop	r24
    2030:	7f 91       	pop	r23
    2032:	6f 91       	pop	r22
    2034:	5f 91       	pop	r21
    2036:	4f 91       	pop	r20
    2038:	3f 91       	pop	r19
    203a:	2f 91       	pop	r18
    203c:	0f 90       	pop	r0
    203e:	0f be       	out	0x3f, r0	; 63
    2040:	0f 90       	pop	r0
    2042:	1f 90       	pop	r1
    2044:	18 95       	reti

00002046 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    2046:	1f 92       	push	r1
    2048:	0f 92       	push	r0
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	0f 92       	push	r0
    204e:	11 24       	eor	r1, r1
    2050:	2f 93       	push	r18
    2052:	3f 93       	push	r19
    2054:	4f 93       	push	r20
    2056:	5f 93       	push	r21
    2058:	6f 93       	push	r22
    205a:	7f 93       	push	r23
    205c:	8f 93       	push	r24
    205e:	9f 93       	push	r25
    2060:	af 93       	push	r26
    2062:	bf 93       	push	r27
    2064:	cf 93       	push	r28
    2066:	df 93       	push	r29
    2068:	ef 93       	push	r30
    206a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    206c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2070:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2072:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2076:	d8 2f       	mov	r29, r24
    2078:	d1 70       	andi	r29, 0x01	; 1
    207a:	80 fd       	sbrc	r24, 0
    207c:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    207e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    2082:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2086:	87 7f       	andi	r24, 0xF7	; 247
    2088:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    208c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    208e:	1e d0       	rcall	.+60     	; 0x20cc <USB_Device_ProcessControlRequest>
    2090:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2094:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2098:	88 60       	ori	r24, 0x08	; 8
    209a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    209e:	cd 2b       	or	r28, r29
    20a0:	cf 70       	andi	r28, 0x0F	; 15
    20a2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    20a6:	ff 91       	pop	r31
    20a8:	ef 91       	pop	r30
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	bf 91       	pop	r27
    20b0:	af 91       	pop	r26
    20b2:	9f 91       	pop	r25
    20b4:	8f 91       	pop	r24
    20b6:	7f 91       	pop	r23
    20b8:	6f 91       	pop	r22
    20ba:	5f 91       	pop	r21
    20bc:	4f 91       	pop	r20
    20be:	3f 91       	pop	r19
    20c0:	2f 91       	pop	r18
    20c2:	0f 90       	pop	r0
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	0f 90       	pop	r0
    20c8:	1f 90       	pop	r1
    20ca:	18 95       	reti

000020cc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <USB_Device_ProcessControlRequest+0x8>
    20d4:	1f 92       	push	r1
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	e9 ee       	ldi	r30, 0xE9	; 233
    20dc:	f1 e0       	ldi	r31, 0x01	; 1
    20de:	81 ef       	ldi	r24, 0xF1	; 241
    20e0:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    20e2:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    20e6:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    20e8:	8e 17       	cp	r24, r30
    20ea:	9f 07       	cpc	r25, r31
    20ec:	d1 f7       	brne	.-12     	; 0x20e2 <USB_Device_ProcessControlRequest+0x16>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    20ee:	0e 94 fd 03 	call	0x7fa	; 0x7fa <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    20f6:	83 ff       	sbrs	r24, 3
    20f8:	0b c1       	rjmp	.+534    	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    20fa:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    20fe:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <USB_ControlRequest+0x1>
    2102:	95 30       	cpi	r25, 0x05	; 5
    2104:	09 f4       	brne	.+2      	; 0x2108 <USB_Device_ProcessControlRequest+0x3c>
    2106:	83 c0       	rjmp	.+262    	; 0x220e <USB_Device_ProcessControlRequest+0x142>
    2108:	30 f4       	brcc	.+12     	; 0x2116 <USB_Device_ProcessControlRequest+0x4a>
    210a:	91 30       	cpi	r25, 0x01	; 1
    210c:	a9 f1       	breq	.+106    	; 0x2178 <USB_Device_ProcessControlRequest+0xac>
    210e:	68 f0       	brcs	.+26     	; 0x212a <USB_Device_ProcessControlRequest+0x5e>
    2110:	93 30       	cpi	r25, 0x03	; 3
    2112:	91 f1       	breq	.+100    	; 0x2178 <USB_Device_ProcessControlRequest+0xac>
    2114:	fd c0       	rjmp	.+506    	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
    2116:	98 30       	cpi	r25, 0x08	; 8
    2118:	09 f4       	brne	.+2      	; 0x211c <USB_Device_ProcessControlRequest+0x50>
    211a:	c9 c0       	rjmp	.+402    	; 0x22ae <USB_Device_ProcessControlRequest+0x1e2>
    211c:	99 30       	cpi	r25, 0x09	; 9
    211e:	09 f4       	brne	.+2      	; 0x2122 <USB_Device_ProcessControlRequest+0x56>
    2120:	d5 c0       	rjmp	.+426    	; 0x22cc <USB_Device_ProcessControlRequest+0x200>
    2122:	96 30       	cpi	r25, 0x06	; 6
    2124:	09 f0       	breq	.+2      	; 0x2128 <USB_Device_ProcessControlRequest+0x5c>
    2126:	f4 c0       	rjmp	.+488    	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
    2128:	94 c0       	rjmp	.+296    	; 0x2252 <USB_Device_ProcessControlRequest+0x186>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    212a:	80 38       	cpi	r24, 0x80	; 128
    212c:	21 f0       	breq	.+8      	; 0x2136 <USB_Device_ProcessControlRequest+0x6a>
    212e:	82 38       	cpi	r24, 0x82	; 130
    2130:	09 f0       	breq	.+2      	; 0x2134 <USB_Device_ProcessControlRequest+0x68>
    2132:	ee c0       	rjmp	.+476    	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
    2134:	08 c0       	rjmp	.+16     	; 0x2146 <USB_Device_ProcessControlRequest+0x7a>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2136:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    213a:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <USB_Device_RemoteWakeupEnabled>
    213e:	99 23       	and	r25, r25
    2140:	89 f0       	breq	.+34     	; 0x2164 <USB_Device_ProcessControlRequest+0x98>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2142:	82 60       	ori	r24, 0x02	; 2
    2144:	0f c0       	rjmp	.+30     	; 0x2164 <USB_Device_ProcessControlRequest+0x98>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2146:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <USB_ControlRequest+0x4>
    214a:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    214c:	87 30       	cpi	r24, 0x07	; 7
    214e:	08 f0       	brcs	.+2      	; 0x2152 <USB_Device_ProcessControlRequest+0x86>
    2150:	df c0       	rjmp	.+446    	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2152:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2156:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    215a:	85 fb       	bst	r24, 5
    215c:	88 27       	eor	r24, r24
    215e:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2160:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2164:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2168:	97 7f       	andi	r25, 0xF7	; 247
    216a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    216e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    2172:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2176:	a6 c0       	rjmp	.+332    	; 0x22c4 <USB_Device_ProcessControlRequest+0x1f8>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2178:	28 2f       	mov	r18, r24
    217a:	2d 7f       	andi	r18, 0xFD	; 253
    217c:	09 f0       	breq	.+2      	; 0x2180 <USB_Device_ProcessControlRequest+0xb4>
    217e:	c8 c0       	rjmp	.+400    	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2180:	88 23       	and	r24, r24
    2182:	19 f0       	breq	.+6      	; 0x218a <USB_Device_ProcessControlRequest+0xbe>
    2184:	82 30       	cpi	r24, 0x02	; 2
    2186:	61 f0       	breq	.+24     	; 0x21a0 <USB_Device_ProcessControlRequest+0xd4>
    2188:	c3 c0       	rjmp	.+390    	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    218a:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
    218e:	81 30       	cpi	r24, 0x01	; 1
    2190:	09 f0       	breq	.+2      	; 0x2194 <USB_Device_ProcessControlRequest+0xc8>
    2192:	be c0       	rjmp	.+380    	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2194:	93 30       	cpi	r25, 0x03	; 3
    2196:	09 f0       	breq	.+2      	; 0x219a <USB_Device_ProcessControlRequest+0xce>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <USB_Device_RemoteWakeupEnabled>
    219e:	2e c0       	rjmp	.+92     	; 0x21fc <USB_Device_ProcessControlRequest+0x130>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    21a0:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
    21a4:	81 11       	cpse	r24, r1
    21a6:	2a c0       	rjmp	.+84     	; 0x21fc <USB_Device_ProcessControlRequest+0x130>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    21a8:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <USB_ControlRequest+0x4>
    21ac:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    21ae:	2f ef       	ldi	r18, 0xFF	; 255
    21b0:	28 0f       	add	r18, r24
    21b2:	26 30       	cpi	r18, 0x06	; 6
    21b4:	08 f0       	brcs	.+2      	; 0x21b8 <USB_Device_ProcessControlRequest+0xec>
    21b6:	ac c0       	rjmp	.+344    	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21b8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    21bc:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    21c0:	20 ff       	sbrs	r18, 0
    21c2:	1c c0       	rjmp	.+56     	; 0x21fc <USB_Device_ProcessControlRequest+0x130>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    21c4:	93 30       	cpi	r25, 0x03	; 3
    21c6:	21 f4       	brne	.+8      	; 0x21d0 <USB_Device_ProcessControlRequest+0x104>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    21c8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    21cc:	80 62       	ori	r24, 0x20	; 32
    21ce:	14 c0       	rjmp	.+40     	; 0x21f8 <USB_Device_ProcessControlRequest+0x12c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    21d0:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    21d4:	90 61       	ori	r25, 0x10	; 16
    21d6:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    21da:	21 e0       	ldi	r18, 0x01	; 1
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	a9 01       	movw	r20, r18
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <USB_Device_ProcessControlRequest+0x11a>
    21e2:	44 0f       	add	r20, r20
    21e4:	55 1f       	adc	r21, r21
    21e6:	8a 95       	dec	r24
    21e8:	e2 f7       	brpl	.-8      	; 0x21e2 <USB_Device_ProcessControlRequest+0x116>
    21ea:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    21ee:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    21f2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    21f6:	88 60       	ori	r24, 0x08	; 8
    21f8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21fc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2200:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2204:	87 7f       	andi	r24, 0xF7	; 247
    2206:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    220a:	89 dd       	rcall	.-1262   	; 0x1d1e <Endpoint_ClearStatusStage>
    220c:	81 c0       	rjmp	.+258    	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    220e:	81 11       	cpse	r24, r1
    2210:	7f c0       	rjmp	.+254    	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2212:	10 91 eb 01 	lds	r17, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
    2216:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2218:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    221c:	80 78       	andi	r24, 0x80	; 128
    221e:	81 2b       	or	r24, r17
    2220:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    2224:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2228:	87 7f       	andi	r24, 0xF7	; 247
    222a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    222e:	77 dd       	rcall	.-1298   	; 0x1d1e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2230:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    2234:	80 ff       	sbrs	r24, 0
    2236:	fc cf       	rjmp	.-8      	; 0x2230 <USB_Device_ProcessControlRequest+0x164>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2238:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    223c:	80 68       	ori	r24, 0x80	; 128
    223e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2242:	11 11       	cpse	r17, r1
    2244:	02 c0       	rjmp	.+4      	; 0x224a <USB_Device_ProcessControlRequest+0x17e>
    2246:	82 e0       	ldi	r24, 0x02	; 2
    2248:	01 c0       	rjmp	.+2      	; 0x224c <USB_Device_ProcessControlRequest+0x180>
    224a:	83 e0       	ldi	r24, 0x03	; 3
    224c:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <USB_DeviceState>
    2250:	5f c0       	rjmp	.+190    	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2252:	80 58       	subi	r24, 0x80	; 128
    2254:	82 30       	cpi	r24, 0x02	; 2
    2256:	08 f0       	brcs	.+2      	; 0x225a <USB_Device_ProcessControlRequest+0x18e>
    2258:	5b c0       	rjmp	.+182    	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    225a:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <USB_ControlRequest+0x4>
    225e:	70 91 ee 01 	lds	r23, 0x01EE	; 0x8001ee <USB_ControlRequest+0x5>
    2262:	9e 01       	movw	r18, r28
    2264:	2d 5f       	subi	r18, 0xFD	; 253
    2266:	3f 4f       	sbci	r19, 0xFF	; 255
    2268:	ae 01       	movw	r20, r28
    226a:	4f 5f       	subi	r20, 0xFF	; 255
    226c:	5f 4f       	sbci	r21, 0xFF	; 255
    226e:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
    2272:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <USB_ControlRequest+0x3>
    2276:	94 d8       	rcall	.-3800   	; 0x13a0 <CALLBACK_USB_GetDescriptor>
    2278:	bc 01       	movw	r22, r24
    227a:	89 2b       	or	r24, r25
    227c:	09 f4       	brne	.+2      	; 0x2280 <USB_Device_ProcessControlRequest+0x1b4>
    227e:	48 c0       	rjmp	.+144    	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2280:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2284:	87 7f       	andi	r24, 0xF7	; 247
    2286:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	#else
	if (DescriptorAddressSpace == MEMSPACE_FLASH)
    228a:	2b 81       	ldd	r18, Y+3	; 0x03
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	9a 81       	ldd	r25, Y+2	; 0x02
    2290:	21 11       	cpse	r18, r1
	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <USB_Device_ProcessControlRequest+0x1cc>
    2294:	35 dc       	rcall	.-1942   	; 0x1b00 <Endpoint_Write_Control_PStream_LE>
	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
    2296:	05 c0       	rjmp	.+10     	; 0x22a2 <USB_Device_ProcessControlRequest+0x1d6>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
    2298:	21 30       	cpi	r18, 0x01	; 1
    229a:	11 f4       	brne	.+4      	; 0x22a0 <USB_Device_ProcessControlRequest+0x1d4>
    229c:	92 dc       	rcall	.-1756   	; 0x1bc2 <Endpoint_Write_Control_EStream_LE>
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    229e:	01 c0       	rjmp	.+2      	; 0x22a2 <USB_Device_ProcessControlRequest+0x1d6>
    22a0:	d1 db       	rcall	.-2142   	; 0x1a44 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    22a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    22a6:	8b 77       	andi	r24, 0x7B	; 123
    22a8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    22ac:	31 c0       	rjmp	.+98     	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    22ae:	80 38       	cpi	r24, 0x80	; 128
    22b0:	79 f5       	brne	.+94     	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    22b6:	87 7f       	andi	r24, 0xF7	; 247
    22b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    22bc:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    22c0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    22c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    22c8:	8e 77       	andi	r24, 0x7E	; 126
    22ca:	9d cf       	rjmp	.-198    	; 0x2206 <USB_Device_ProcessControlRequest+0x13a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    22cc:	81 11       	cpse	r24, r1
    22ce:	20 c0       	rjmp	.+64     	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    22d0:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
    22d4:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <USB_ControlRequest+0x3>
    22d8:	99 27       	eor	r25, r25
    22da:	02 97       	sbiw	r24, 0x02	; 2
    22dc:	cc f4       	brge	.+50     	; 0x2310 <USB_Device_ProcessControlRequest+0x244>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    22e2:	87 7f       	andi	r24, 0xF7	; 247
    22e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    22e8:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <USB_ControlRequest+0x2>
    22ec:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    22f0:	16 dd       	rcall	.-1492   	; 0x1d1e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    22f2:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_Device_ConfigurationNumber>
    22f6:	81 11       	cpse	r24, r1
    22f8:	06 c0       	rjmp	.+12     	; 0x2306 <USB_Device_ProcessControlRequest+0x23a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    22fa:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    22fe:	87 fd       	sbrc	r24, 7
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <USB_Device_ProcessControlRequest+0x23a>
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	01 c0       	rjmp	.+2      	; 0x2308 <USB_Device_ProcessControlRequest+0x23c>
    2306:	84 e0       	ldi	r24, 0x04	; 4
    2308:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    230c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2310:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2314:	83 ff       	sbrs	r24, 3
    2316:	0a c0       	rjmp	.+20     	; 0x232c <USB_Device_ProcessControlRequest+0x260>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2318:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    231c:	87 7f       	andi	r24, 0xF7	; 247
    231e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2322:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2326:	80 62       	ori	r24, 0x20	; 32
    2328:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	df 91       	pop	r29
    2334:	cf 91       	pop	r28
    2336:	1f 91       	pop	r17
    2338:	08 95       	ret

0000233a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    233a:	08 95       	ret

0000233c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    233c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    233e:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_DeviceState>
    2342:	88 23       	and	r24, r24
    2344:	99 f0       	breq	.+38     	; 0x236c <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2346:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    234a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    234c:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2350:	89 2f       	mov	r24, r25
    2352:	81 70       	andi	r24, 0x01	; 1
    2354:	90 fd       	sbrc	r25, 0
    2356:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2358:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    235a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    235e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2362:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2364:	b3 de       	rcall	.-666    	; 0x20cc <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2366:	cf 70       	andi	r28, 0x0F	; 15
    2368:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    236c:	cf 91       	pop	r28
    236e:	08 95       	ret

00002370 <__udivmodqi4>:
    2370:	99 1b       	sub	r25, r25
    2372:	79 e0       	ldi	r23, 0x09	; 9
    2374:	04 c0       	rjmp	.+8      	; 0x237e <__udivmodqi4_ep>

00002376 <__udivmodqi4_loop>:
    2376:	99 1f       	adc	r25, r25
    2378:	96 17       	cp	r25, r22
    237a:	08 f0       	brcs	.+2      	; 0x237e <__udivmodqi4_ep>
    237c:	96 1b       	sub	r25, r22

0000237e <__udivmodqi4_ep>:
    237e:	88 1f       	adc	r24, r24
    2380:	7a 95       	dec	r23
    2382:	c9 f7       	brne	.-14     	; 0x2376 <__udivmodqi4_loop>
    2384:	80 95       	com	r24
    2386:	08 95       	ret

00002388 <memcpy>:
    2388:	fb 01       	movw	r30, r22
    238a:	dc 01       	movw	r26, r24
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <memcpy+0xa>
    238e:	01 90       	ld	r0, Z+
    2390:	0d 92       	st	X+, r0
    2392:	41 50       	subi	r20, 0x01	; 1
    2394:	50 40       	sbci	r21, 0x00	; 0
    2396:	d8 f7       	brcc	.-10     	; 0x238e <memcpy+0x6>
    2398:	08 95       	ret

0000239a <eeprom_read_byte>:
    239a:	f9 99       	sbic	0x1f, 1	; 31
    239c:	fe cf       	rjmp	.-4      	; 0x239a <eeprom_read_byte>
    239e:	92 bd       	out	0x22, r25	; 34
    23a0:	81 bd       	out	0x21, r24	; 33
    23a2:	f8 9a       	sbi	0x1f, 0	; 31
    23a4:	99 27       	eor	r25, r25
    23a6:	80 b5       	in	r24, 0x20	; 32
    23a8:	08 95       	ret

000023aa <eeprom_write_byte>:
    23aa:	26 2f       	mov	r18, r22

000023ac <eeprom_write_r18>:
    23ac:	f9 99       	sbic	0x1f, 1	; 31
    23ae:	fe cf       	rjmp	.-4      	; 0x23ac <eeprom_write_r18>
    23b0:	1f ba       	out	0x1f, r1	; 31
    23b2:	92 bd       	out	0x22, r25	; 34
    23b4:	81 bd       	out	0x21, r24	; 33
    23b6:	20 bd       	out	0x20, r18	; 32
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	fa 9a       	sbi	0x1f, 2	; 31
    23be:	f9 9a       	sbi	0x1f, 1	; 31
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	01 96       	adiw	r24, 0x01	; 1
    23c4:	08 95       	ret

000023c6 <_exit>:
    23c6:	f8 94       	cli

000023c8 <__stop_program>:
    23c8:	ff cf       	rjmp	.-2      	; 0x23c8 <__stop_program>
